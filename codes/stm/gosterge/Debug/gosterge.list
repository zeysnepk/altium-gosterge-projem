
gosterge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009990  08009990  0000a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  0000addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  0000ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009dec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          000002d4  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9f8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228e  00000000  00000000  00018bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  0001ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  0001bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022156  00000000  00000000  0001c7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b54  00000000  00000000  0003e8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd152  00000000  00000000  0004f44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c59d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005074  00000000  00000000  0011c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00121654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009974 	.word	0x08009974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009974 	.word	0x08009974

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DHT11_Oku>:


#include "dht11.h"


Dht11 DHT11_Oku(TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	807b      	strh	r3, [r7, #2]
	int8_t presence, rh_byte1, rh_byte2, temp_byte1, temp_byte2, checksum;
	Dht11 dht;
	HAL_TIM_Base_Start(htim);
 8000ff2:	68b8      	ldr	r0, [r7, #8]
 8000ff4:	f003 fe62 	bl	8004cbc <HAL_TIM_Base_Start>
	Pin_Output(GPIOx, GPIO_Pin);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f883 	bl	8001108 <Pin_Output>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f001 fcc5 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 800100e:	2012      	movs	r0, #18
 8001010:	f000 feee 	bl	8001df0 <HAL_Delay>
	Pin_Input(GPIOx, GPIO_Pin);
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f89b 	bl	8001154 <Pin_Input>
	int8_t res = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	77fb      	strb	r3, [r7, #31]
	Delay_Microseconds(htim, 40);
 8001022:	2128      	movs	r1, #40	@ 0x28
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f000 f8b3 	bl	8001190 <Delay_Microseconds>
	if ( !(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) ){
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f001 fc9a 	bl	8002968 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <DHT11_Oku+0x78>
		Delay_Microseconds(htim, 80);
 800103a:	2150      	movs	r1, #80	@ 0x50
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f000 f8a7 	bl	8001190 <Delay_Microseconds>
		if( HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) ){
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fc8e 	bl	8002968 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <DHT11_Oku+0x74>
			res = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	77fb      	strb	r3, [r7, #31]
 8001056:	e001      	b.n	800105c <DHT11_Oku+0x78>
		} else{
			res = -1;
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	77fb      	strb	r3, [r7, #31]
		}
	}
	while( HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) );
 800105c:	bf00      	nop
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 fc80 	bl	8002968 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f7      	bne.n	800105e <DHT11_Oku+0x7a>
	if( res == 1 ){
 800106e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d13c      	bne.n	80010f0 <DHT11_Oku+0x10c>
	    rh_byte1 = DHT_veri_al(htim, GPIOx, GPIO_Pin);
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	461a      	mov	r2, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f000 f89f 	bl	80011c0 <DHT_veri_al>
 8001082:	4603      	mov	r3, r0
 8001084:	77bb      	strb	r3, [r7, #30]
	    rh_byte2 = DHT_veri_al(htim, GPIOx, GPIO_Pin);
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	461a      	mov	r2, r3
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	68b8      	ldr	r0, [r7, #8]
 800108e:	f000 f897 	bl	80011c0 <DHT_veri_al>
 8001092:	4603      	mov	r3, r0
 8001094:	777b      	strb	r3, [r7, #29]
	    temp_byte1 = DHT_veri_al(htim, GPIOx, GPIO_Pin);
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	461a      	mov	r2, r3
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f000 f88f 	bl	80011c0 <DHT_veri_al>
 80010a2:	4603      	mov	r3, r0
 80010a4:	773b      	strb	r3, [r7, #28]
	    temp_byte2 = DHT_veri_al(htim, GPIOx, GPIO_Pin);
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	461a      	mov	r2, r3
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f000 f887 	bl	80011c0 <DHT_veri_al>
 80010b2:	4603      	mov	r3, r0
 80010b4:	76fb      	strb	r3, [r7, #27]
	    checksum = DHT_veri_al(htim, GPIOx, GPIO_Pin);
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	68b8      	ldr	r0, [r7, #8]
 80010be:	f000 f87f 	bl	80011c0 <DHT_veri_al>
 80010c2:	4603      	mov	r3, r0
 80010c4:	76bb      	strb	r3, [r7, #26]

	    if( checksum == (rh_byte1 + rh_byte2 + temp_byte1 + temp_byte2) ){
 80010c6:	f997 201a 	ldrsb.w	r2, [r7, #26]
 80010ca:	f997 101e 	ldrsb.w	r1, [r7, #30]
 80010ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80010d2:	4419      	add	r1, r3
 80010d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010d8:	4419      	add	r1, r3
 80010da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80010de:	440b      	add	r3, r1
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d105      	bne.n	80010f0 <DHT11_Oku+0x10c>
	    	dht.hum = rh_byte1;
 80010e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010e8:	613b      	str	r3, [r7, #16]
	    	dht.temp = temp_byte1;
 80010ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010ee:	617b      	str	r3, [r7, #20]
	    }
	}
	return dht;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	461a      	mov	r2, r3
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <Pin_Output>:

void Pin_Output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 fc34 	bl	8002998 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f001 fa72 	bl	8002630 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <Pin_Input>:

void Pin_Input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f001 fa54 	bl	8002630 <HAL_GPIO_Init>
}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Delay_Microseconds>:

void Delay_Microseconds(TIM_HandleTypeDef *htim, uint16_t time){
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
	while( __HAL_TIM_GET_COUNTER(htim) < time );
 80011a4:	bf00      	nop
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3f9      	bcc.n	80011a6 <Delay_Microseconds+0x16>
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DHT_veri_al>:

int8_t DHT_veri_al(TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
	for( uint8_t j=0; j<8; j++ ){
 80011d2:	2300      	movs	r3, #0
 80011d4:	75bb      	strb	r3, [r7, #22]
 80011d6:	e03b      	b.n	8001250 <DHT_veri_al+0x90>
		while( !(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) );
 80011d8:	bf00      	nop
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4619      	mov	r1, r3
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f001 fbc2 	bl	8002968 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f7      	beq.n	80011da <DHT_veri_al+0x1a>
		Delay_Microseconds(htim, 50);
 80011ea:	2132      	movs	r1, #50	@ 0x32
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff ffcf 	bl	8001190 <Delay_Microseconds>
		if( !(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) ){
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4619      	mov	r1, r3
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f001 fbb6 	bl	8002968 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10e      	bne.n	8001220 <DHT_veri_al+0x60>
			i &= ~( 1 << ( 7 - j ) );
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	f1c3 0307 	rsb	r3, r3, #7
 8001208:	2201      	movs	r2, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	b25b      	sxtb	r3, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	b25a      	sxtb	r2, r3
 8001214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001218:	4013      	ands	r3, r2
 800121a:	b25b      	sxtb	r3, r3
 800121c:	75fb      	strb	r3, [r7, #23]
 800121e:	e00b      	b.n	8001238 <DHT_veri_al+0x78>
		} else{
			i |= ( 1 << ( 7 - j ) );
 8001220:	7dbb      	ldrb	r3, [r7, #22]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2201      	movs	r2, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	b25a      	sxtb	r2, r3
 800122e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001232:	4313      	orrs	r3, r2
 8001234:	b25b      	sxtb	r3, r3
 8001236:	75fb      	strb	r3, [r7, #23]
		}
		while( HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) );
 8001238:	bf00      	nop
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f001 fb92 	bl	8002968 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f7      	bne.n	800123a <DHT_veri_al+0x7a>
	for( uint8_t j=0; j<8; j++ ){
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	3301      	adds	r3, #1
 800124e:	75bb      	strb	r3, [r7, #22]
 8001250:	7dbb      	ldrb	r3, [r7, #22]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d9c0      	bls.n	80011d8 <DHT_veri_al+0x18>
	}
	return i;
 8001256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800126a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800126e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800127a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800127e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001282:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800128a:	e000      	b.n	800128e <ITM_SendChar+0x2c>
    {
      __NOP();
 800128c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800128e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001298:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012a2:	687b      	ldr	r3, [r7, #4]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f000 fd29 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f839 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 f945 	bl	800154c <MX_GPIO_Init>
  MX_DMA_Init();
 80012c2:	f000 f91b 	bl	80014fc <MX_DMA_Init>
  MX_I2C1_Init();
 80012c6:	f000 f89b 	bl	8001400 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ca:	f000 f8c7 	bl	800145c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MpuData mpu;
  Dht11 dht;
  who_am_i = WhoamI_Control(&hi2c1);
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <main+0x6c>)
 80012d0:	f000 f9ae 	bl	8001630 <WhoamI_Control>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <main+0x70>)
 80012da:	701a      	strb	r2, [r3, #0]
  if( who_am_i == 0x68 ){
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <main+0x70>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b68      	cmp	r3, #104	@ 0x68
 80012e2:	d102      	bne.n	80012ea <main+0x3a>
	  Mpu_Conf(&hi2c1);
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <main+0x6c>)
 80012e6:	f000 f9c0 	bl	800166a <Mpu_Conf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( who_am_i == 0x68 ){
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <main+0x70>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b68      	cmp	r3, #104	@ 0x68
 80012f0:	d105      	bne.n	80012fe <main+0x4e>
		  mpu = Mpu_Oku(&hi2c1);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4909      	ldr	r1, [pc, #36]	@ (800131c <main+0x6c>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fa19 	bl	8001730 <Mpu_Oku>
	  }
	  dht = DHT11_Oku(&htim1, DHT11_PORT, GPIO_PIN_6);
 80012fe:	1d38      	adds	r0, r7, #4
 8001300:	2340      	movs	r3, #64	@ 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <main+0x74>)
 8001304:	4908      	ldr	r1, [pc, #32]	@ (8001328 <main+0x78>)
 8001306:	f7ff fe6d 	bl	8000fe4 <DHT11_Oku>
	  hum = dht.hum;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <main+0x7c>)
 800130e:	6013      	str	r3, [r2, #0]
	  HAL_Delay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001314:	f000 fd6c 	bl	8001df0 <HAL_Delay>
	  if( who_am_i == 0x68 ){
 8001318:	e7e7      	b.n	80012ea <main+0x3a>
 800131a:	bf00      	nop
 800131c:	200001f0 	.word	0x200001f0
 8001320:	2000034c 	.word	0x2000034c
 8001324:	40020c00 	.word	0x40020c00
 8001328:	20000304 	.word	0x20000304
 800132c:	20000350 	.word	0x20000350

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	@ 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	@ 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fd94 	bl	8006e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <SystemClock_Config+0xc8>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	4a26      	ldr	r2, [pc, #152]	@ (80013f8 <SystemClock_Config+0xc8>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	@ 0x40
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <SystemClock_Config+0xc8>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <SystemClock_Config+0xcc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <SystemClock_Config+0xcc>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <SystemClock_Config+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013a4:	2340      	movs	r3, #64	@ 0x40
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ac:	2304      	movs	r3, #4
 80013ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 ffad 	bl	8004314 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c0:	f000 f930 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2101      	movs	r1, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fa10 	bl	8004804 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80013ea:	f000 f91b 	bl	8001624 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	@ 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f001 fac5 	bl	80029cc <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f8ec 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200001f0 	.word	0x200001f0
 8001454:	40005400 	.word	0x40005400
 8001458:	000186a0 	.word	0x000186a0

0800145c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <MX_TIM1_Init+0x9c>)
 800147c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001480:	221f      	movs	r2, #31
 8001482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800148c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014a6:	f003 fbb9 	bl	8004c1c <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014b0:	f000 f8b8 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014c2:	f003 fc63 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014cc:	f000 f8aa 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014de:	f003 fe63 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014e8:	f000 f89c 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000304 	.word	0x20000304
 80014f8:	40010000 	.word	0x40010000

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <MX_DMA_Init+0x4c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <MX_DMA_Init+0x4c>)
 800150c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <MX_DMA_Init+0x4c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	200b      	movs	r0, #11
 8001524:	f000 fd63 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001528:	200b      	movs	r0, #11
 800152a:	f000 fd7c 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2011      	movs	r0, #17
 8001534:	f000 fd5b 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001538:	2011      	movs	r0, #17
 800153a:	f000 fd74 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_GPIO_Init+0x98>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a1e      	ldr	r2, [pc, #120]	@ (80015e4 <MX_GPIO_Init+0x98>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_GPIO_Init+0x98>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_GPIO_Init+0x98>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <MX_GPIO_Init+0x98>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_GPIO_Init+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_GPIO_Init+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <MX_GPIO_Init+0x98>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_GPIO_Init+0x98>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2140      	movs	r1, #64	@ 0x40
 80015ba:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <MX_GPIO_Init+0x9c>)
 80015bc:	f001 f9ec 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_GPIO_Init+0x9c>)
 80015d8:	f001 f82a 	bl	8002630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020c00 	.word	0x40020c00

080015ec <_write>:
/* ########### */
	//err = 2;
}

int _write(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e009      	b.n	8001612 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe2b 	bl	8001262 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbf1      	blt.n	80015fe <_write+0x12>
  }
  return len;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	//err = 1;
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <WhoamI_Control>:

#include "mpu6050.h"


uint8_t WhoamI_Control(I2C_HandleTypeDef *hi2c){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
	uint8_t who_am_i;
	uint8_t reg = WHO_AM_I;
 8001638:	2375      	movs	r3, #117	@ 0x75
 800163a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, MPU_ADDR, &reg, 1, 100);
 800163c:	f107 020e 	add.w	r2, r7, #14
 8001640:	2364      	movs	r3, #100	@ 0x64
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	21d0      	movs	r1, #208	@ 0xd0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 fb03 	bl	8002c54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU_ADDR, &who_am_i, 1, 100);
 800164e:	f107 020f 	add.w	r2, r7, #15
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2301      	movs	r3, #1
 8001658:	21d0      	movs	r1, #208	@ 0xd0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 fbf8 	bl	8002e50 <HAL_I2C_Master_Receive>
	return who_am_i;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <Mpu_Conf>:

void Mpu_Conf(I2C_HandleTypeDef *hi2c){
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
	uint8_t kontrol = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
	// sleep modundan çıkma
	uint8_t data = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	73bb      	strb	r3, [r7, #14]
	Mem_W_R(hi2c, PWR_MGMT_1, &data, &kontrol);
 800167a:	f107 030f 	add.w	r3, r7, #15
 800167e:	f107 020e 	add.w	r2, r7, #14
 8001682:	216b      	movs	r1, #107	@ 0x6b
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f82a 	bl	80016de <Mem_W_R>

	/*
	DLPF reg aktif olduğundan Gyroscope Output Rate = 1kHz
	Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
	SMPLRT_DIV = 0 ile sample rate = 1kHz ayarlandı */
	data = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	73bb      	strb	r3, [r7, #14]
	Mem_W_R(hi2c, SMPRT_DIV, &data, &kontrol);
 800168e:	f107 030f 	add.w	r3, r7, #15
 8001692:	f107 020e 	add.w	r2, r7, #14
 8001696:	2119      	movs	r1, #25
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f820 	bl	80016de <Mem_W_R>

	 //daha hassas ölçüm için DLPF orta değerde ayarlandı
	data = 0x03;
 800169e:	2303      	movs	r3, #3
 80016a0:	73bb      	strb	r3, [r7, #14]
	Mem_W_R(hi2c, CONFIG, &data, &kontrol);
 80016a2:	f107 030f 	add.w	r3, r7, #15
 80016a6:	f107 020e 	add.w	r2, r7, #14
 80016aa:	211a      	movs	r1, #26
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f816 	bl	80016de <Mem_W_R>

	// Gyroscope ± 250 °/s ayarlandı
	data = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73bb      	strb	r3, [r7, #14]
	Mem_W_R(hi2c,GYRO_CONF, &data, &kontrol);
 80016b6:	f107 030f 	add.w	r3, r7, #15
 80016ba:	f107 020e 	add.w	r2, r7, #14
 80016be:	211b      	movs	r1, #27
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f80c 	bl	80016de <Mem_W_R>
	// Accelerometer ± 2g ayarlandı
	Mem_W_R(hi2c,ACCEL_CONF, &data, &kontrol);
 80016c6:	f107 030f 	add.w	r3, r7, #15
 80016ca:	f107 020e 	add.w	r2, r7, #14
 80016ce:	211c      	movs	r1, #28
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f804 	bl	80016de <Mem_W_R>

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <Mem_W_R>:

void Mem_W_R(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t *data, uint8_t *kontrol){
 80016de:	b580      	push	{r7, lr}
 80016e0:	b088      	sub	sp, #32
 80016e2:	af04      	add	r7, sp, #16
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	460b      	mov	r3, r1
 80016ec:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(hi2c, MPU_ADDR, addr, 1, data, 1, 100);
 80016ee:	7afb      	ldrb	r3, [r7, #11]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2301      	movs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	21d0      	movs	r1, #208	@ 0xd0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f001 fdd6 	bl	80032b4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c, MPU_ADDR, addr, 1, kontrol, 1, 100);
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	b29a      	uxth	r2, r3
 800170c:	2364      	movs	r3, #100	@ 0x64
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	21d0      	movs	r1, #208	@ 0xd0
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f001 fec3 	bl	80034a8 <HAL_I2C_Mem_Read>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	0000      	movs	r0, r0
 800172c:	0000      	movs	r0, r0
	...

08001730 <Mpu_Oku>:

MpuData Mpu_Oku(I2C_HandleTypeDef *hi2c){
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b094      	sub	sp, #80	@ 0x50
 8001734:	af04      	add	r7, sp, #16
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	uint8_t mpu_data[14];
	HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_XOUT_H, 1, mpu_data, 14, 500);
 800173a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	230e      	movs	r3, #14
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	223b      	movs	r2, #59	@ 0x3b
 800174e:	21d0      	movs	r1, #208	@ 0xd0
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f001 fea9 	bl	80034a8 <HAL_I2C_Mem_Read>
	int16_t acc_x = ( int16_t )( ( mpu_data[0] << 8 ) | mpu_data[1] );
 8001756:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	int16_t acc_y = ( int16_t )( ( mpu_data[2] << 8 ) | mpu_data[3] );
 8001768:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	int16_t acc_z = ( int16_t )( ( mpu_data[4] << 8 ) | mpu_data[5] );
 800177a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	877b      	strh	r3, [r7, #58]	@ 0x3a
	int16_t temp = ( int16_t )( ( mpu_data[6] << 8 ) | mpu_data[7] );
 800178c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001798:	b21b      	sxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t gyro_x = ( int16_t )( ( mpu_data[8] << 8 ) | mpu_data[9] );
 800179e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t gyro_y = ( int16_t )( ( mpu_data[10] << 8 ) | mpu_data[11] );
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t gyro_z = ( int16_t )( ( mpu_data[12] << 8 ) | mpu_data[13] );
 80017c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	867b      	strh	r3, [r7, #50]	@ 0x32

	MpuData data;

	data.ax = (float)acc_x / 16384.0;
 80017d4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80018c0 <Mpu_Oku+0x190>
 80017e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e8:	edc7 7a02 	vstr	s15, [r7, #8]
	data.ay = (float)acc_y / 16384.0;
 80017ec:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80018c0 <Mpu_Oku+0x190>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	edc7 7a03 	vstr	s15, [r7, #12]
	data.az = (float)acc_z / 16384.0;
 8001804:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001810:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80018c0 <Mpu_Oku+0x190>
 8001814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001818:	edc7 7a04 	vstr	s15, [r7, #16]

	data.gx = (float)gyro_x / 131.0;
 800181c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001828:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80018c4 <Mpu_Oku+0x194>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc7 7a05 	vstr	s15, [r7, #20]
	data.gy = (float)gyro_y / 131.0;
 8001834:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80018c4 <Mpu_Oku+0x194>
 8001844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001848:	edc7 7a06 	vstr	s15, [r7, #24]
	data.gz = (float)gyro_z / 131.0;
 800184c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001858:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80018c4 <Mpu_Oku+0x194>
 800185c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001860:	edc7 7a07 	vstr	s15, [r7, #28]

	data.t = temp / 340 + 36.53;
 8001864:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001868:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <Mpu_Oku+0x198>)
 800186a:	fb82 1203 	smull	r1, r2, r2, r3
 800186e:	11d2      	asrs	r2, r2, #7
 8001870:	17db      	asrs	r3, r3, #31
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b21b      	sxth	r3, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe54 	bl	8000524 <__aeabi_i2d>
 800187c:	a30e      	add	r3, pc, #56	@ (adr r3, 80018b8 <Mpu_Oku+0x188>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fd03 	bl	800028c <__adddf3>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9ab 	bl	8000be8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	623b      	str	r3, [r7, #32]

	return data;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	461d      	mov	r5, r3
 800189a:	f107 0408 	add.w	r4, r7, #8
 800189e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	3740      	adds	r7, #64	@ 0x40
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	0a3d70a4 	.word	0x0a3d70a4
 80018bc:	404243d7 	.word	0x404243d7
 80018c0:	46800000 	.word	0x46800000
 80018c4:	43030000 	.word	0x43030000
 80018c8:	60606061 	.word	0x60606061

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a47      	ldr	r2, [pc, #284]	@ (8001a58 <HAL_I2C_MspInit+0x13c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f040 8087 	bne.w	8001a4e <HAL_I2C_MspInit+0x132>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	4b45      	ldr	r3, [pc, #276]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4a44      	ldr	r2, [pc, #272]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001950:	4b42      	ldr	r3, [pc, #264]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195c:	23c0      	movs	r3, #192	@ 0xc0
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196c:	2304      	movs	r3, #4
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	483a      	ldr	r0, [pc, #232]	@ (8001a60 <HAL_I2C_MspInit+0x144>)
 8001978:	f000 fe5a 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a35      	ldr	r2, [pc, #212]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 8001986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
 800198c:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <HAL_I2C_MspInit+0x140>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001998:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 800199a:	4a33      	ldr	r2, [pc, #204]	@ (8001a68 <HAL_I2C_MspInit+0x14c>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_DISABLE;
 80019b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019d0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019d8:	4822      	ldr	r0, [pc, #136]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019da:	f000 fb3f 	bl	800205c <HAL_DMA_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80019e4:	f7ff fe1e 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80019ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <HAL_I2C_MspInit+0x148>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 80019f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a70 <HAL_I2C_MspInit+0x154>)
 80019f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 80019fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a04:	2240      	movs	r2, #64	@ 0x40
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a34:	f000 fb12 	bl	800205c <HAL_DMA_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001a3e:	f7ff fdf1 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a46:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a48:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0x150>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	20000244 	.word	0x20000244
 8001a68:	40026010 	.word	0x40026010
 8001a6c:	200002a4 	.word	0x200002a4
 8001a70:	400260a0 	.word	0x400260a0

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10d      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f94f 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <DMA1_Stream0_IRQHandler+0x10>)
 8001b1e:	f000 fb4b 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000244 	.word	0x20000244

08001b2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <DMA1_Stream6_IRQHandler+0x10>)
 8001b32:	f000 fb41 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002a4 	.word	0x200002a4

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5a:	f005 f993 	bl	8006e84 <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
  return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b82:	bf00      	nop
 8001b84:	e7fd      	b.n	8001b82 <_exit+0x12>

08001b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00a      	b.n	8001bae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b98:	f3af 8000 	nop.w
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf0      	blt.n	8001b98 <_read+0x12>
  }

  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f005 f914 	bl	8006e84 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	20000354 	.word	0x20000354
 8001c90:	200004a8 	.word	0x200004a8

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cbc:	f7ff ffea 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f005 f8d3 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fae1 	bl	80012b0 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cfc:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 8001d00:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d04:	200004a8 	.word	0x200004a8

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f94f 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fdc4 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f967 	bl	8002042 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d8c:	f000 f92f 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000358 	.word	0x20000358

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000358 	.word	0x20000358

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008

08001e38 <__NVIC_SetPriorityGrouping>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	@ (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff feb6 	bl	8001dd8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e099      	b.n	80021ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	e00f      	b.n	80020ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff fe9d 	bl	8001dd8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d908      	bls.n	80020ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e078      	b.n	80021ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <HAL_DMA_Init+0x158>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	2b04      	cmp	r3, #4
 800214c:	d117      	bne.n	800217e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f9e9 	bl	8002538 <DMA_CheckFifoParam>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	@ 0x40
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9a0 	bl	80024cc <DMA_CalcBaseAndBitshift>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	223f      	movs	r2, #63	@ 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	f010803f 	.word	0xf010803f

080021b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002400 <HAL_DMA_IRQHandler+0x248>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002404 <HAL_DMA_IRQHandler+0x24c>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2208      	movs	r2, #8
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2208      	movs	r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2204      	movs	r2, #4
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2204      	movs	r2, #4
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2210      	movs	r2, #16
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2210      	movs	r2, #16
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e01f      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e016      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0208 	bic.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2220      	movs	r2, #32
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 808f 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8087 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	2220      	movs	r2, #32
 8002350:	409a      	lsls	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d136      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0216 	bic.w	r2, r2, #22
 8002370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_DMA_IRQHandler+0x1da>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0208 	bic.w	r2, r2, #8
 80023a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	223f      	movs	r2, #63	@ 0x3f
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07e      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
        }
        return;
 80023ce:	e079      	b.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01d      	beq.n	800241a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d031      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e02c      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e01e      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10f      	bne.n	8002448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0210 	bic.w	r2, r2, #16
 8002436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d307      	bcc.n	80024a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_DMA_IRQHandler+0x2cc>
 800249e:	e000      	b.n	80024a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e000      	b.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024c4:	bf00      	nop
    }
  }
}
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3b10      	subs	r3, #16
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <DMA_CalcBaseAndBitshift+0x64>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024e6:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <DMA_CalcBaseAndBitshift+0x68>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d909      	bls.n	800250e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	@ 0x58
 800250c:	e007      	b.n	800251e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	aaaaaaab 	.word	0xaaaaaaab
 8002534:	080099a8 	.word	0x080099a8

08002538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11f      	bne.n	8002592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d856      	bhi.n	8002606 <DMA_CheckFifoParam+0xce>
 8002558:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <DMA_CheckFifoParam+0x28>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002571 	.word	0x08002571
 8002564:	08002583 	.word	0x08002583
 8002568:	08002571 	.word	0x08002571
 800256c:	08002607 	.word	0x08002607
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d046      	beq.n	800260a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e043      	b.n	800260a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800258a:	d140      	bne.n	800260e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e03d      	b.n	800260e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800259a:	d121      	bne.n	80025e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d837      	bhi.n	8002612 <DMA_CheckFifoParam+0xda>
 80025a2:	a201      	add	r2, pc, #4	@ (adr r2, 80025a8 <DMA_CheckFifoParam+0x70>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025bf 	.word	0x080025bf
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	080025d1 	.word	0x080025d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e030      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e022      	b.n	8002616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d8:	d11f      	bne.n	800261a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025de:	e01c      	b.n	800261a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d903      	bls.n	80025ee <DMA_CheckFifoParam+0xb6>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d003      	beq.n	80025f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025ec:	e018      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      break;
 80025f2:	e015      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e00b      	b.n	800261e <DMA_CheckFifoParam+0xe6>
      break;
 8002606:	bf00      	nop
 8002608:	e00a      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e008      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e006      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e004      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;   
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
    }
  } 
  
  return status; 
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e16b      	b.n	8002924 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 815a 	bne.w	800291e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	2b02      	cmp	r3, #2
 8002680:	d130      	bne.n	80026e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80b4 	beq.w	800291e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b60      	ldr	r3, [pc, #384]	@ (800293c <HAL_GPIO_Init+0x30c>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a5f      	ldr	r2, [pc, #380]	@ (800293c <HAL_GPIO_Init+0x30c>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b5d      	ldr	r3, [pc, #372]	@ (800293c <HAL_GPIO_Init+0x30c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002940 <HAL_GPIO_Init+0x310>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_GPIO_Init+0x314>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02b      	beq.n	8002856 <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a51      	ldr	r2, [pc, #324]	@ (8002948 <HAL_GPIO_Init+0x318>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d025      	beq.n	8002852 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a50      	ldr	r2, [pc, #320]	@ (800294c <HAL_GPIO_Init+0x31c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01f      	beq.n	800284e <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4f      	ldr	r2, [pc, #316]	@ (8002950 <HAL_GPIO_Init+0x320>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d019      	beq.n	800284a <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4e      	ldr	r2, [pc, #312]	@ (8002954 <HAL_GPIO_Init+0x324>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4d      	ldr	r2, [pc, #308]	@ (8002958 <HAL_GPIO_Init+0x328>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00d      	beq.n	8002842 <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4c      	ldr	r2, [pc, #304]	@ (800295c <HAL_GPIO_Init+0x32c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x20e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4b      	ldr	r2, [pc, #300]	@ (8002960 <HAL_GPIO_Init+0x330>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_GPIO_Init+0x20a>
 8002836:	2307      	movs	r3, #7
 8002838:	e00e      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800283a:	2308      	movs	r3, #8
 800283c:	e00c      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800283e:	2306      	movs	r3, #6
 8002840:	e00a      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002842:	2305      	movs	r3, #5
 8002844:	e008      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002846:	2304      	movs	r3, #4
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002856:	2300      	movs	r3, #0
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002868:	4935      	ldr	r1, [pc, #212]	@ (8002940 <HAL_GPIO_Init+0x310>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_GPIO_Init+0x334>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a32      	ldr	r2, [pc, #200]	@ (8002964 <HAL_GPIO_Init+0x334>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b30      	ldr	r3, [pc, #192]	@ (8002964 <HAL_GPIO_Init+0x334>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a27      	ldr	r2, [pc, #156]	@ (8002964 <HAL_GPIO_Init+0x334>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <HAL_GPIO_Init+0x334>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_GPIO_Init+0x334>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_GPIO_Init+0x334>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002918:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <HAL_GPIO_Init+0x334>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	f67f ae90 	bls.w	800264c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	@ 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40021400 	.word	0x40021400
 800295c:	40021800 	.word	0x40021800
 8002960:	40021c00 	.word	0x40021c00
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e001      	b.n	800298a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e12b      	b.n	8002c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe ff92 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	@ 0x24
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a30:	f002 f8e0 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8002a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a81      	ldr	r2, [pc, #516]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d807      	bhi.n	8002a50 <HAL_I2C_Init+0x84>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a80      	ldr	r2, [pc, #512]	@ (8002c44 <HAL_I2C_Init+0x278>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e006      	b.n	8002a5e <HAL_I2C_Init+0x92>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a7d      	ldr	r2, [pc, #500]	@ (8002c48 <HAL_I2C_Init+0x27c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf94      	ite	ls
 8002a58:	2301      	movls	r3, #1
 8002a5a:	2300      	movhi	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0e7      	b.n	8002c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a78      	ldr	r2, [pc, #480]	@ (8002c4c <HAL_I2C_Init+0x280>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a6a      	ldr	r2, [pc, #424]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d802      	bhi.n	8002aa0 <HAL_I2C_Init+0xd4>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	e009      	b.n	8002ab4 <HAL_I2C_Init+0xe8>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	4a69      	ldr	r2, [pc, #420]	@ (8002c50 <HAL_I2C_Init+0x284>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ac6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	495c      	ldr	r1, [pc, #368]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d819      	bhi.n	8002b08 <HAL_I2C_Init+0x13c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e59      	subs	r1, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae2:	1c59      	adds	r1, r3, #1
 8002ae4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae8:	400b      	ands	r3, r1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_I2C_Init+0x138>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1e59      	subs	r1, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b02:	e051      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e04f      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d111      	bne.n	8002b34 <HAL_I2C_Init+0x168>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e58      	subs	r0, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e012      	b.n	8002b5a <HAL_I2C_Init+0x18e>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e58      	subs	r0, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	0099      	lsls	r1, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Init+0x196>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e022      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10e      	bne.n	8002b88 <HAL_I2C_Init+0x1bc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1e58      	subs	r0, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	440b      	add	r3, r1
 8002b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e58      	subs	r0, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	0099      	lsls	r1, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6809      	ldr	r1, [r1, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6911      	ldr	r1, [r2, #16]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	000186a0 	.word	0x000186a0
 8002c44:	001e847f 	.word	0x001e847f
 8002c48:	003d08ff 	.word	0x003d08ff
 8002c4c:	431bde83 	.word	0x431bde83
 8002c50:	10624dd3 	.word	0x10624dd3

08002c54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff f8b6 	bl	8001dd8 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f040 80e0 	bne.w	8002e3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2319      	movs	r3, #25
 8002c82:	2201      	movs	r2, #1
 8002c84:	4970      	ldr	r1, [pc, #448]	@ (8002e48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 f90e 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0d3      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x50>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0cc      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d007      	beq.n	8002cca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2221      	movs	r2, #33	@ 0x21
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fdfa 	bl	800390c <I2C_MasterRequestWrite>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e08d      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d38:	e066      	b.n	8002e08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f001 f9cc 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d107      	bne.n	8002d62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d11b      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0x188>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6a39      	ldr	r1, [r7, #32]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f001 f9c3 	bl	800416c <I2C_WaitOnBTFFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d107      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01a      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d194      	bne.n	8002d3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	00100002 	.word	0x00100002
 8002e4c:	ffff0000 	.word	0xffff0000

08002e50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	817b      	strh	r3, [r7, #10]
 8002e60:	4613      	mov	r3, r2
 8002e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7fe ffb8 	bl	8001dd8 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	f040 8217 	bne.w	80032a6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2319      	movs	r3, #25
 8002e7e:	2201      	movs	r2, #1
 8002e80:	497c      	ldr	r1, [pc, #496]	@ (8003074 <HAL_I2C_Master_Receive+0x224>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 f810 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e20a      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_I2C_Master_Receive+0x50>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e203      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d007      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2222      	movs	r2, #34	@ 0x22
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	893a      	ldrh	r2, [r7, #8]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a5c      	ldr	r2, [pc, #368]	@ (8003078 <HAL_I2C_Master_Receive+0x228>)
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f08:	8979      	ldrh	r1, [r7, #10]
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fd7e 	bl	8003a10 <I2C_MasterRequestRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1c4      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e198      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e178      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d11b      	bne.n	8002fce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	e158      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ff4:	e144      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	f200 80f1 	bhi.w	80031e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	2b01      	cmp	r3, #1
 8003006:	d123      	bne.n	8003050 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f001 f8f5 	bl	80041fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e145      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800304e:	e117      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	2b02      	cmp	r3, #2
 8003056:	d14e      	bne.n	80030f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	2200      	movs	r2, #0
 8003060:	4906      	ldr	r1, [pc, #24]	@ (800307c <HAL_I2C_Master_Receive+0x22c>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 ff20 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e11a      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000
 800307c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030f4:	e0c4      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	2200      	movs	r2, #0
 80030fe:	496c      	ldr	r1, [pc, #432]	@ (80032b0 <HAL_I2C_Master_Receive+0x460>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fed1 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0cb      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	2200      	movs	r2, #0
 800315a:	4955      	ldr	r1, [pc, #340]	@ (80032b0 <HAL_I2C_Master_Receive+0x460>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fea3 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e09d      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031e0:	e04e      	b.n	8003280 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f001 f808 	bl	80041fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e058      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d124      	bne.n	8003280 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	2b03      	cmp	r3, #3
 800323c:	d107      	bne.n	800324e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f aeb6 	bne.w	8002ff6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	00010004 	.word	0x00010004

080032b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ce:	f7fe fd83 	bl	8001dd8 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	f040 80d9 	bne.w	8003494 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2319      	movs	r3, #25
 80032e8:	2201      	movs	r2, #1
 80032ea:	496d      	ldr	r1, [pc, #436]	@ (80034a0 <HAL_I2C_Mem_Write+0x1ec>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fddb 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
 80032fa:	e0cc      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2C_Mem_Write+0x56>
 8003306:	2302      	movs	r3, #2
 8003308:	e0c5      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d007      	beq.n	8003330 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2221      	movs	r2, #33	@ 0x21
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2240      	movs	r2, #64	@ 0x40
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a4d      	ldr	r2, [pc, #308]	@ (80034a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003370:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003372:	88f8      	ldrh	r0, [r7, #6]
 8003374:	893a      	ldrh	r2, [r7, #8]
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4603      	mov	r3, r0
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fc12 	bl	8003bac <I2C_RequestMemoryWrite>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d052      	beq.n	8003434 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e081      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fea0 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e06b      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d11b      	bne.n	8003434 <HAL_I2C_Mem_Write+0x180>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d017      	beq.n	8003434 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1aa      	bne.n	8003392 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fe93 	bl	800416c <I2C_WaitOnBTFFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	2b04      	cmp	r3, #4
 8003452:	d107      	bne.n	8003464 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e016      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	00100002 	.word	0x00100002
 80034a4:	ffff0000 	.word	0xffff0000

080034a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	@ 0x30
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	817b      	strh	r3, [r7, #10]
 80034ba:	460b      	mov	r3, r1
 80034bc:	813b      	strh	r3, [r7, #8]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034c2:	f7fe fc89 	bl	8001dd8 <HAL_GetTick>
 80034c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f040 8214 	bne.w	80038fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2319      	movs	r3, #25
 80034dc:	2201      	movs	r2, #1
 80034de:	497b      	ldr	r1, [pc, #492]	@ (80036cc <HAL_I2C_Mem_Read+0x224>)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fce1 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
 80034ee:	e207      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Mem_Read+0x56>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e200      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2222      	movs	r2, #34	@ 0x22
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a5b      	ldr	r2, [pc, #364]	@ (80036d0 <HAL_I2C_Mem_Read+0x228>)
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003566:	88f8      	ldrh	r0, [r7, #6]
 8003568:	893a      	ldrh	r2, [r7, #8]
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	4603      	mov	r3, r0
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbae 	bl	8003cd8 <I2C_RequestMemoryRead>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1bc      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e190      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11b      	bne.n	80035f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e170      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d11b      	bne.n	8003636 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	e150      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800364c:	e144      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	2b03      	cmp	r3, #3
 8003654:	f200 80f1 	bhi.w	800383a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b01      	cmp	r3, #1
 800365e:	d123      	bne.n	80036a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fdc9 	bl	80041fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e145      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a6:	e117      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d14e      	bne.n	800374e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b6:	2200      	movs	r2, #0
 80036b8:	4906      	ldr	r1, [pc, #24]	@ (80036d4 <HAL_I2C_Mem_Read+0x22c>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fbf4 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e11a      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
 80036ca:	bf00      	nop
 80036cc:	00100002 	.word	0x00100002
 80036d0:	ffff0000 	.word	0xffff0000
 80036d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800374c:	e0c4      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	2200      	movs	r2, #0
 8003756:	496c      	ldr	r1, [pc, #432]	@ (8003908 <HAL_I2C_Mem_Read+0x460>)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fba5 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0cb      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	2200      	movs	r2, #0
 80037b2:	4955      	ldr	r1, [pc, #340]	@ (8003908 <HAL_I2C_Mem_Read+0x460>)
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fb77 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e09d      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003838:	e04e      	b.n	80038d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fcdc 	bl	80041fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e058      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d124      	bne.n	80038d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f aeb6 	bne.w	800364e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00010004 	.word	0x00010004

0800390c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	460b      	mov	r3, r1
 800391a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d006      	beq.n	8003936 <I2C_MasterRequestWrite+0x2a>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d003      	beq.n	8003936 <I2C_MasterRequestWrite+0x2a>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003934:	d108      	bne.n	8003948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e00b      	b.n	8003960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	2b12      	cmp	r3, #18
 800394e:	d107      	bne.n	8003960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800395e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa9b 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003986:	d103      	bne.n	8003990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e035      	b.n	8003a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800399c:	d108      	bne.n	80039b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ac:	611a      	str	r2, [r3, #16]
 80039ae:	e01b      	b.n	80039e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	11db      	asrs	r3, r3, #7
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0306 	and.w	r3, r3, #6
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f063 030f 	orn	r3, r3, #15
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	490e      	ldr	r1, [pc, #56]	@ (8003a08 <I2C_MasterRequestWrite+0xfc>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fae4 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e010      	b.n	8003a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4907      	ldr	r1, [pc, #28]	@ (8003a0c <I2C_MasterRequestWrite+0x100>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fad4 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	00010008 	.word	0x00010008
 8003a0c:	00010002 	.word	0x00010002

08003a10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d006      	beq.n	8003a4a <I2C_MasterRequestRead+0x3a>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d003      	beq.n	8003a4a <I2C_MasterRequestRead+0x3a>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a48:	d108      	bne.n	8003a5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e00b      	b.n	8003a74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a60:	2b11      	cmp	r3, #17
 8003a62:	d107      	bne.n	8003a74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fa11 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a9a:	d103      	bne.n	8003aa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e079      	b.n	8003b9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab0:	d108      	bne.n	8003ac4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ab2:	897b      	ldrh	r3, [r7, #10]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	e05f      	b.n	8003b84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ac4:	897b      	ldrh	r3, [r7, #10]
 8003ac6:	11db      	asrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0306 	and.w	r3, r3, #6
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f063 030f 	orn	r3, r3, #15
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4930      	ldr	r1, [pc, #192]	@ (8003ba4 <I2C_MasterRequestRead+0x194>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa5a 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e054      	b.n	8003b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4929      	ldr	r1, [pc, #164]	@ (8003ba8 <I2C_MasterRequestRead+0x198>)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa4a 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e044      	b.n	8003b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f9af 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5e:	d103      	bne.n	8003b68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b66:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e017      	b.n	8003b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b6c:	897b      	ldrh	r3, [r7, #10]
 8003b6e:	11db      	asrs	r3, r3, #7
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f063 030e 	orn	r3, r3, #14
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4907      	ldr	r1, [pc, #28]	@ (8003ba8 <I2C_MasterRequestRead+0x198>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa06 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00010008 	.word	0x00010008
 8003ba8:	00010002 	.word	0x00010002

08003bac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	813b      	strh	r3, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f960 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfc:	d103      	bne.n	8003c06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e05f      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	492d      	ldr	r1, [pc, #180]	@ (8003cd4 <I2C_RequestMemoryWrite+0x128>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f9bb 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e04c      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c48:	6a39      	ldr	r1, [r7, #32]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa46 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d107      	bne.n	8003c6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e02b      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	e021      	b.n	8003cc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa20 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e005      	b.n	8003cca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	00010002 	.word	0x00010002

08003cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	460b      	mov	r3, r1
 8003cec:	813b      	strh	r3, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8c2 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d38:	d103      	bne.n	8003d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0aa      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	4952      	ldr	r1, [pc, #328]	@ (8003ea4 <I2C_RequestMemoryRead+0x1cc>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f91d 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e097      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f9a8 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e076      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e021      	b.n	8003e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f982 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e050      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e06:	6a39      	ldr	r1, [r7, #32]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f967 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e035      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f82b 	bl	8003ea8 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e66:	d103      	bne.n	8003e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e013      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	4906      	ldr	r1, [pc, #24]	@ (8003ea4 <I2C_RequestMemoryRead+0x1cc>)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f886 	bl	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	00010002 	.word	0x00010002

08003ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb8:	e048      	b.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ec0:	d044      	beq.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fd ff89 	bl	8001dd8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d139      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	e00c      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d116      	bne.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e023      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10d      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	e00c      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d093      	beq.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003faa:	e071      	b.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d123      	bne.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e067      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800400a:	d041      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fd fee4 	bl	8001dd8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d136      	bne.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e00b      	b.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e021      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10c      	bne.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e00b      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af6d 	bne.w	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e8:	e034      	b.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8e3 	bl	80042b6 <I2C_IsAcknowledgeFailed>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004100:	d028      	beq.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd fe69 	bl	8001dd8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11d      	bne.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d016      	beq.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e007      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415e:	2b80      	cmp	r3, #128	@ 0x80
 8004160:	d1c3      	bne.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004178:	e034      	b.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f89b 	bl	80042b6 <I2C_IsAcknowledgeFailed>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004190:	d028      	beq.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fd fe21 	bl	8001dd8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d016      	beq.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e007      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d1c3      	bne.n	800417a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004208:	e049      	b.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d119      	bne.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0210 	mvn.w	r2, #16
 8004220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e030      	b.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fd fdc4 	bl	8001dd8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11d      	bne.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b40      	cmp	r3, #64	@ 0x40
 800426e:	d016      	beq.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e007      	b.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d1ae      	bne.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042cc:	d11b      	bne.n	8004306 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e267      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d075      	beq.n	800441e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004332:	4b88      	ldr	r3, [pc, #544]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b04      	cmp	r3, #4
 800433c:	d00c      	beq.n	8004358 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b85      	ldr	r3, [pc, #532]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004346:	2b08      	cmp	r3, #8
 8004348:	d112      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b82      	ldr	r3, [pc, #520]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b7e      	ldr	r3, [pc, #504]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05b      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d157      	bne.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e242      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x74>
 800437a:	4b76      	ldr	r3, [pc, #472]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a75      	ldr	r2, [pc, #468]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x98>
 8004392:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6f      	ldr	r2, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6d      	ldr	r3, [pc, #436]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 80043ac:	4b69      	ldr	r3, [pc, #420]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a68      	ldr	r2, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b66      	ldr	r3, [pc, #408]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a65      	ldr	r2, [pc, #404]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fd04 	bl	8001dd8 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd fd00 	bl	8001dd8 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e207      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fcf0 	bl	8001dd8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd fcec 	bl	8001dd8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1f3      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b51      	ldr	r3, [pc, #324]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800442a:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b44      	ldr	r3, [pc, #272]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c7      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4937      	ldr	r1, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b34      	ldr	r3, [pc, #208]	@ (8004558 <HAL_RCC_OscConfig+0x244>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fca5 	bl	8001dd8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fca1 	bl	8001dd8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1a8      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b28      	ldr	r3, [pc, #160]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4925      	ldr	r1, [pc, #148]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <HAL_RCC_OscConfig+0x244>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fc84 	bl	8001dd8 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fd fc80 	bl	8001dd8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e187      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d036      	beq.n	800456c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_RCC_OscConfig+0x248>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fc64 	bl	8001dd8 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fc60 	bl	8001dd8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e167      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x240>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x200>
 8004532:	e01b      	b.n	800456c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_OscConfig+0x248>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd fc4d 	bl	8001dd8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	e00e      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004542:	f7fd fc49 	bl	8001dd8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d907      	bls.n	8004560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e150      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ea      	bne.n	8004542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8097 	beq.w	80046a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	4b7d      	ldr	r3, [pc, #500]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	4a7c      	ldr	r2, [pc, #496]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	@ 0x40
 800459a:	4b7a      	ldr	r3, [pc, #488]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b77      	ldr	r3, [pc, #476]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d118      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b6:	4b74      	ldr	r3, [pc, #464]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a73      	ldr	r2, [pc, #460]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c2:	f7fd fc09 	bl	8001dd8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ca:	f7fd fc05 	bl	8001dd8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e10c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004788 <HAL_RCC_OscConfig+0x474>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x2ea>
 80045f0:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a63      	ldr	r2, [pc, #396]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	e01c      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x30c>
 8004606:	4b5f      	ldr	r3, [pc, #380]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	4a5e      	ldr	r2, [pc, #376]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6713      	str	r3, [r2, #112]	@ 0x70
 8004612:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	4a5b      	ldr	r2, [pc, #364]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	@ 0x70
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 8004620:	4b58      	ldr	r3, [pc, #352]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	4a57      	ldr	r2, [pc, #348]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	@ 0x70
 800462c:	4b55      	ldr	r3, [pc, #340]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a54      	ldr	r2, [pc, #336]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd fbca 	bl	8001dd8 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fd fbc6 	bl	8001dd8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0cb      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	4b49      	ldr	r3, [pc, #292]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ee      	beq.n	8004648 <HAL_RCC_OscConfig+0x334>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466c:	f7fd fbb4 	bl	8001dd8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fd fbb0 	bl	8001dd8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0b5      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	4b3e      	ldr	r3, [pc, #248]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ee      	bne.n	8004674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	4a38      	ldr	r2, [pc, #224]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a1 	beq.w	80047f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d05c      	beq.n	8004778 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d141      	bne.n	800474a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b31      	ldr	r3, [pc, #196]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd fb84 	bl	8001dd8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd fb80 	bl	8001dd8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e087      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	491b      	ldr	r1, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fd fb59 	bl	8001dd8 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fd fb55 	bl	8001dd8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e05c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x416>
 8004748:	e054      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fd fb42 	bl	8001dd8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fb3e 	bl	8001dd8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e045      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x444>
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e038      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000
 800478c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004790:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <HAL_RCC_OscConfig+0x4ec>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d121      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d111      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cc      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b68      	ldr	r3, [pc, #416]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90c      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b65      	ldr	r3, [pc, #404]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a58      	ldr	r2, [pc, #352]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800487a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e067      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b37      	ldr	r3, [pc, #220]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4934      	ldr	r1, [pc, #208]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fa70 	bl	8001dd8 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fa6c 	bl	8001dd8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d20c      	bcs.n	800494c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f821 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd f9d0 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	08009990 	.word	0x08009990
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b094      	sub	sp, #80	@ 0x50
 80049d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e8:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x40>
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	f200 80e1 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a02:	e0db      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b73      	ldr	r3, [pc, #460]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a08:	e0db      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	0159      	lsls	r1, r3, #5
 8004a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a54:	0150      	lsls	r0, r2, #5
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	1a51      	subs	r1, r2, r1
 8004a5e:	6139      	str	r1, [r7, #16]
 8004a60:	4629      	mov	r1, r5
 8004a62:	eb63 0301 	sbc.w	r3, r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	018b      	lsls	r3, r1, #6
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7e:	4651      	mov	r1, sl
 8004a80:	018a      	lsls	r2, r1, #6
 8004a82:	4651      	mov	r1, sl
 8004a84:	ebb2 0801 	subs.w	r8, r2, r1
 8004a88:	4659      	mov	r1, fp
 8004a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	462b      	mov	r3, r5
 8004ab0:	eb49 0303 	adc.w	r3, r9, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	024b      	lsls	r3, r1, #9
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004acc:	4621      	mov	r1, r4
 8004ace:	024a      	lsls	r2, r1, #9
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ae0:	f7fc f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aec:	e058      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b38      	ldr	r3, [pc, #224]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	4611      	mov	r1, r2
 8004afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	0159      	lsls	r1, r3, #5
 8004b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1a:	0150      	lsls	r0, r2, #5
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4641      	mov	r1, r8
 8004b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b40:	ebb2 040a 	subs.w	r4, r2, sl
 8004b44:	eb63 050b 	sbc.w	r5, r3, fp
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb45 0303 	adc.w	r3, r5, r3
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b76:	4629      	mov	r1, r5
 8004b78:	028b      	lsls	r3, r1, #10
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b80:	4621      	mov	r1, r4
 8004b82:	028a      	lsls	r2, r1, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b94:	f7fc f878 	bl	8000c88 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3750      	adds	r7, #80	@ 0x50
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	@ (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000000 	.word	0x20000000

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	@ (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	080099a0 	.word	0x080099a0

08004c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e041      	b.n	8004cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc ff16 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 f95e 	bl	8004f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e046      	b.n	8004d62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <HAL_TIM_Base_Start+0xb4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cee:	d01d      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_TIM_Base_Start+0xb8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_TIM_Base_Start+0xbc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <HAL_TIM_Base_Start+0xc0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_TIM_Base_Start+0xc4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	@ (8004d84 <HAL_TIM_Base_Start+0xc8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start+0x70>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_TIM_Base_Start+0xcc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0b4      	b.n	8004f12 <HAL_TIM_ConfigClockSource+0x186>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de0:	d03e      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xd4>
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de6:	f200 8087 	bhi.w	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	f000 8086 	beq.w	8004efe <HAL_TIM_ConfigClockSource+0x172>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df6:	d87f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b70      	cmp	r3, #112	@ 0x70
 8004dfa:	d01a      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xa6>
 8004dfc:	2b70      	cmp	r3, #112	@ 0x70
 8004dfe:	d87b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b60      	cmp	r3, #96	@ 0x60
 8004e02:	d050      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e04:	2b60      	cmp	r3, #96	@ 0x60
 8004e06:	d877      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b50      	cmp	r3, #80	@ 0x50
 8004e0a:	d03c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xfa>
 8004e0c:	2b50      	cmp	r3, #80	@ 0x50
 8004e0e:	d873      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b40      	cmp	r3, #64	@ 0x40
 8004e12:	d058      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d86f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b30      	cmp	r3, #48	@ 0x30
 8004e1a:	d064      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	2b30      	cmp	r3, #48	@ 0x30
 8004e1e:	d86b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d060      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d867      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d05a      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e30:	e062      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	f000 f991 	bl	8005168 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	609a      	str	r2, [r3, #8]
      break;
 8004e5e:	e04f      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	f000 f97a 	bl	8005168 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e82:	609a      	str	r2, [r3, #8]
      break;
 8004e84:	e03c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 f8ee 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2150      	movs	r1, #80	@ 0x50
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f947 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e02c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 f90d 	bl	80050d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2160      	movs	r1, #96	@ 0x60
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f937 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e01c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 f8ce 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2140      	movs	r1, #64	@ 0x40
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f927 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e00c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 f91e 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ef6:	e003      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a46      	ldr	r2, [pc, #280]	@ (8005048 <TIM_Base_SetConfig+0x12c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3a:	d00f      	beq.n	8004f5c <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a43      	ldr	r2, [pc, #268]	@ (800504c <TIM_Base_SetConfig+0x130>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a42      	ldr	r2, [pc, #264]	@ (8005050 <TIM_Base_SetConfig+0x134>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a41      	ldr	r2, [pc, #260]	@ (8005054 <TIM_Base_SetConfig+0x138>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a40      	ldr	r2, [pc, #256]	@ (8005058 <TIM_Base_SetConfig+0x13c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <TIM_Base_SetConfig+0x12c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d02b      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7c:	d027      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a32      	ldr	r2, [pc, #200]	@ (800504c <TIM_Base_SetConfig+0x130>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d023      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a31      	ldr	r2, [pc, #196]	@ (8005050 <TIM_Base_SetConfig+0x134>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01f      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <TIM_Base_SetConfig+0x138>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01b      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <TIM_Base_SetConfig+0x13c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d017      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800505c <TIM_Base_SetConfig+0x140>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <TIM_Base_SetConfig+0x144>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00f      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <TIM_Base_SetConfig+0x148>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <TIM_Base_SetConfig+0x14c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <TIM_Base_SetConfig+0x150>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <TIM_Base_SetConfig+0x154>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a10      	ldr	r2, [pc, #64]	@ (8005048 <TIM_Base_SetConfig+0x12c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0xf8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <TIM_Base_SetConfig+0x13c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d103      	bne.n	800501c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f023 0201 	bic.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]
  }
}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40010400 	.word	0x40010400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800
 8005068:	40001800 	.word	0x40001800
 800506c:	40001c00 	.word	0x40001c00
 8005070:	40002000 	.word	0x40002000

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 030a 	bic.w	r3, r3, #10
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f023 0210 	bic.w	r2, r3, #16
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	f043 0307 	orr.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e05a      	b.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520c:	d01d      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1b      	ldr	r2, [pc, #108]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1a      	ldr	r2, [pc, #104]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a18      	ldr	r2, [pc, #96]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a17      	ldr	r2, [pc, #92]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10c      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40010400 	.word	0x40010400
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <__cvt>:
 80052a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	ec57 6b10 	vmov	r6, r7, d0
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4619      	mov	r1, r3
 80052ae:	463b      	mov	r3, r7
 80052b0:	bfbb      	ittet	lt
 80052b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052b6:	461f      	movlt	r7, r3
 80052b8:	2300      	movge	r3, #0
 80052ba:	232d      	movlt	r3, #45	@ 0x2d
 80052bc:	700b      	strb	r3, [r1, #0]
 80052be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052c4:	4691      	mov	r9, r2
 80052c6:	f023 0820 	bic.w	r8, r3, #32
 80052ca:	bfbc      	itt	lt
 80052cc:	4632      	movlt	r2, r6
 80052ce:	4616      	movlt	r6, r2
 80052d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052d4:	d005      	beq.n	80052e2 <__cvt+0x42>
 80052d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052da:	d100      	bne.n	80052de <__cvt+0x3e>
 80052dc:	3401      	adds	r4, #1
 80052de:	2102      	movs	r1, #2
 80052e0:	e000      	b.n	80052e4 <__cvt+0x44>
 80052e2:	2103      	movs	r1, #3
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	ab02      	add	r3, sp, #8
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	ec47 6b10 	vmov	d0, r6, r7
 80052f0:	4653      	mov	r3, sl
 80052f2:	4622      	mov	r2, r4
 80052f4:	f001 fe9c 	bl	8007030 <_dtoa_r>
 80052f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052fc:	4605      	mov	r5, r0
 80052fe:	d119      	bne.n	8005334 <__cvt+0x94>
 8005300:	f019 0f01 	tst.w	r9, #1
 8005304:	d00e      	beq.n	8005324 <__cvt+0x84>
 8005306:	eb00 0904 	add.w	r9, r0, r4
 800530a:	2200      	movs	r2, #0
 800530c:	2300      	movs	r3, #0
 800530e:	4630      	mov	r0, r6
 8005310:	4639      	mov	r1, r7
 8005312:	f7fb fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005316:	b108      	cbz	r0, 800531c <__cvt+0x7c>
 8005318:	f8cd 900c 	str.w	r9, [sp, #12]
 800531c:	2230      	movs	r2, #48	@ 0x30
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	454b      	cmp	r3, r9
 8005322:	d31e      	bcc.n	8005362 <__cvt+0xc2>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005328:	1b5b      	subs	r3, r3, r5
 800532a:	4628      	mov	r0, r5
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	b004      	add	sp, #16
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005338:	eb00 0904 	add.w	r9, r0, r4
 800533c:	d1e5      	bne.n	800530a <__cvt+0x6a>
 800533e:	7803      	ldrb	r3, [r0, #0]
 8005340:	2b30      	cmp	r3, #48	@ 0x30
 8005342:	d10a      	bne.n	800535a <__cvt+0xba>
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fb fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005350:	b918      	cbnz	r0, 800535a <__cvt+0xba>
 8005352:	f1c4 0401 	rsb	r4, r4, #1
 8005356:	f8ca 4000 	str.w	r4, [sl]
 800535a:	f8da 3000 	ldr.w	r3, [sl]
 800535e:	4499      	add	r9, r3
 8005360:	e7d3      	b.n	800530a <__cvt+0x6a>
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	9103      	str	r1, [sp, #12]
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e7d9      	b.n	800531e <__cvt+0x7e>

0800536a <__exponent>:
 800536a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536c:	2900      	cmp	r1, #0
 800536e:	bfba      	itte	lt
 8005370:	4249      	neglt	r1, r1
 8005372:	232d      	movlt	r3, #45	@ 0x2d
 8005374:	232b      	movge	r3, #43	@ 0x2b
 8005376:	2909      	cmp	r1, #9
 8005378:	7002      	strb	r2, [r0, #0]
 800537a:	7043      	strb	r3, [r0, #1]
 800537c:	dd29      	ble.n	80053d2 <__exponent+0x68>
 800537e:	f10d 0307 	add.w	r3, sp, #7
 8005382:	461d      	mov	r5, r3
 8005384:	270a      	movs	r7, #10
 8005386:	461a      	mov	r2, r3
 8005388:	fbb1 f6f7 	udiv	r6, r1, r7
 800538c:	fb07 1416 	mls	r4, r7, r6, r1
 8005390:	3430      	adds	r4, #48	@ 0x30
 8005392:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005396:	460c      	mov	r4, r1
 8005398:	2c63      	cmp	r4, #99	@ 0x63
 800539a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800539e:	4631      	mov	r1, r6
 80053a0:	dcf1      	bgt.n	8005386 <__exponent+0x1c>
 80053a2:	3130      	adds	r1, #48	@ 0x30
 80053a4:	1e94      	subs	r4, r2, #2
 80053a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053aa:	1c41      	adds	r1, r0, #1
 80053ac:	4623      	mov	r3, r4
 80053ae:	42ab      	cmp	r3, r5
 80053b0:	d30a      	bcc.n	80053c8 <__exponent+0x5e>
 80053b2:	f10d 0309 	add.w	r3, sp, #9
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	42ac      	cmp	r4, r5
 80053ba:	bf88      	it	hi
 80053bc:	2300      	movhi	r3, #0
 80053be:	3302      	adds	r3, #2
 80053c0:	4403      	add	r3, r0
 80053c2:	1a18      	subs	r0, r3, r0
 80053c4:	b003      	add	sp, #12
 80053c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053d0:	e7ed      	b.n	80053ae <__exponent+0x44>
 80053d2:	2330      	movs	r3, #48	@ 0x30
 80053d4:	3130      	adds	r1, #48	@ 0x30
 80053d6:	7083      	strb	r3, [r0, #2]
 80053d8:	70c1      	strb	r1, [r0, #3]
 80053da:	1d03      	adds	r3, r0, #4
 80053dc:	e7f1      	b.n	80053c2 <__exponent+0x58>
	...

080053e0 <_printf_float>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	b08d      	sub	sp, #52	@ 0x34
 80053e6:	460c      	mov	r4, r1
 80053e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053ec:	4616      	mov	r6, r2
 80053ee:	461f      	mov	r7, r3
 80053f0:	4605      	mov	r5, r0
 80053f2:	f001 fd43 	bl	8006e7c <_localeconv_r>
 80053f6:	6803      	ldr	r3, [r0, #0]
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fa ff38 	bl	8000270 <strlen>
 8005400:	2300      	movs	r3, #0
 8005402:	930a      	str	r3, [sp, #40]	@ 0x28
 8005404:	f8d8 3000 	ldr.w	r3, [r8]
 8005408:	9005      	str	r0, [sp, #20]
 800540a:	3307      	adds	r3, #7
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	f103 0208 	add.w	r2, r3, #8
 8005414:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005418:	f8d4 b000 	ldr.w	fp, [r4]
 800541c:	f8c8 2000 	str.w	r2, [r8]
 8005420:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005424:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005428:	9307      	str	r3, [sp, #28]
 800542a:	f8cd 8018 	str.w	r8, [sp, #24]
 800542e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005436:	4b9c      	ldr	r3, [pc, #624]	@ (80056a8 <_printf_float+0x2c8>)
 8005438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800543c:	f7fb fb76 	bl	8000b2c <__aeabi_dcmpun>
 8005440:	bb70      	cbnz	r0, 80054a0 <_printf_float+0xc0>
 8005442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005446:	4b98      	ldr	r3, [pc, #608]	@ (80056a8 <_printf_float+0x2c8>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800544c:	f7fb fb50 	bl	8000af0 <__aeabi_dcmple>
 8005450:	bb30      	cbnz	r0, 80054a0 <_printf_float+0xc0>
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	4640      	mov	r0, r8
 8005458:	4649      	mov	r1, r9
 800545a:	f7fb fb3f 	bl	8000adc <__aeabi_dcmplt>
 800545e:	b110      	cbz	r0, 8005466 <_printf_float+0x86>
 8005460:	232d      	movs	r3, #45	@ 0x2d
 8005462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005466:	4a91      	ldr	r2, [pc, #580]	@ (80056ac <_printf_float+0x2cc>)
 8005468:	4b91      	ldr	r3, [pc, #580]	@ (80056b0 <_printf_float+0x2d0>)
 800546a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800546e:	bf94      	ite	ls
 8005470:	4690      	movls	r8, r2
 8005472:	4698      	movhi	r8, r3
 8005474:	2303      	movs	r3, #3
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	f02b 0304 	bic.w	r3, fp, #4
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	f04f 0900 	mov.w	r9, #0
 8005482:	9700      	str	r7, [sp, #0]
 8005484:	4633      	mov	r3, r6
 8005486:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005488:	4621      	mov	r1, r4
 800548a:	4628      	mov	r0, r5
 800548c:	f000 f9d2 	bl	8005834 <_printf_common>
 8005490:	3001      	adds	r0, #1
 8005492:	f040 808d 	bne.w	80055b0 <_printf_float+0x1d0>
 8005496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800549a:	b00d      	add	sp, #52	@ 0x34
 800549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	4640      	mov	r0, r8
 80054a6:	4649      	mov	r1, r9
 80054a8:	f7fb fb40 	bl	8000b2c <__aeabi_dcmpun>
 80054ac:	b140      	cbz	r0, 80054c0 <_printf_float+0xe0>
 80054ae:	464b      	mov	r3, r9
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bfbc      	itt	lt
 80054b4:	232d      	movlt	r3, #45	@ 0x2d
 80054b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054ba:	4a7e      	ldr	r2, [pc, #504]	@ (80056b4 <_printf_float+0x2d4>)
 80054bc:	4b7e      	ldr	r3, [pc, #504]	@ (80056b8 <_printf_float+0x2d8>)
 80054be:	e7d4      	b.n	800546a <_printf_float+0x8a>
 80054c0:	6863      	ldr	r3, [r4, #4]
 80054c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054c6:	9206      	str	r2, [sp, #24]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	d13b      	bne.n	8005544 <_printf_float+0x164>
 80054cc:	2306      	movs	r3, #6
 80054ce:	6063      	str	r3, [r4, #4]
 80054d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054d4:	2300      	movs	r3, #0
 80054d6:	6022      	str	r2, [r4, #0]
 80054d8:	9303      	str	r3, [sp, #12]
 80054da:	ab0a      	add	r3, sp, #40	@ 0x28
 80054dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054e0:	ab09      	add	r3, sp, #36	@ 0x24
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	ec49 8b10 	vmov	d0, r8, r9
 80054ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7ff fed6 	bl	80052a0 <__cvt>
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054f8:	2b47      	cmp	r3, #71	@ 0x47
 80054fa:	4680      	mov	r8, r0
 80054fc:	d129      	bne.n	8005552 <_printf_float+0x172>
 80054fe:	1cc8      	adds	r0, r1, #3
 8005500:	db02      	blt.n	8005508 <_printf_float+0x128>
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	4299      	cmp	r1, r3
 8005506:	dd41      	ble.n	800558c <_printf_float+0x1ac>
 8005508:	f1aa 0a02 	sub.w	sl, sl, #2
 800550c:	fa5f fa8a 	uxtb.w	sl, sl
 8005510:	3901      	subs	r1, #1
 8005512:	4652      	mov	r2, sl
 8005514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005518:	9109      	str	r1, [sp, #36]	@ 0x24
 800551a:	f7ff ff26 	bl	800536a <__exponent>
 800551e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005520:	1813      	adds	r3, r2, r0
 8005522:	2a01      	cmp	r2, #1
 8005524:	4681      	mov	r9, r0
 8005526:	6123      	str	r3, [r4, #16]
 8005528:	dc02      	bgt.n	8005530 <_printf_float+0x150>
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	07d2      	lsls	r2, r2, #31
 800552e:	d501      	bpl.n	8005534 <_printf_float+0x154>
 8005530:	3301      	adds	r3, #1
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0a2      	beq.n	8005482 <_printf_float+0xa2>
 800553c:	232d      	movs	r3, #45	@ 0x2d
 800553e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005542:	e79e      	b.n	8005482 <_printf_float+0xa2>
 8005544:	9a06      	ldr	r2, [sp, #24]
 8005546:	2a47      	cmp	r2, #71	@ 0x47
 8005548:	d1c2      	bne.n	80054d0 <_printf_float+0xf0>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1c0      	bne.n	80054d0 <_printf_float+0xf0>
 800554e:	2301      	movs	r3, #1
 8005550:	e7bd      	b.n	80054ce <_printf_float+0xee>
 8005552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005556:	d9db      	bls.n	8005510 <_printf_float+0x130>
 8005558:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800555c:	d118      	bne.n	8005590 <_printf_float+0x1b0>
 800555e:	2900      	cmp	r1, #0
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	dd0b      	ble.n	800557c <_printf_float+0x19c>
 8005564:	6121      	str	r1, [r4, #16]
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x18e>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	07d0      	lsls	r0, r2, #31
 800556c:	d502      	bpl.n	8005574 <_printf_float+0x194>
 800556e:	3301      	adds	r3, #1
 8005570:	440b      	add	r3, r1
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005576:	f04f 0900 	mov.w	r9, #0
 800557a:	e7db      	b.n	8005534 <_printf_float+0x154>
 800557c:	b913      	cbnz	r3, 8005584 <_printf_float+0x1a4>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	07d2      	lsls	r2, r2, #31
 8005582:	d501      	bpl.n	8005588 <_printf_float+0x1a8>
 8005584:	3302      	adds	r3, #2
 8005586:	e7f4      	b.n	8005572 <_printf_float+0x192>
 8005588:	2301      	movs	r3, #1
 800558a:	e7f2      	b.n	8005572 <_printf_float+0x192>
 800558c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005592:	4299      	cmp	r1, r3
 8005594:	db05      	blt.n	80055a2 <_printf_float+0x1c2>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	6121      	str	r1, [r4, #16]
 800559a:	07d8      	lsls	r0, r3, #31
 800559c:	d5ea      	bpl.n	8005574 <_printf_float+0x194>
 800559e:	1c4b      	adds	r3, r1, #1
 80055a0:	e7e7      	b.n	8005572 <_printf_float+0x192>
 80055a2:	2900      	cmp	r1, #0
 80055a4:	bfd4      	ite	le
 80055a6:	f1c1 0202 	rsble	r2, r1, #2
 80055aa:	2201      	movgt	r2, #1
 80055ac:	4413      	add	r3, r2
 80055ae:	e7e0      	b.n	8005572 <_printf_float+0x192>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	055a      	lsls	r2, r3, #21
 80055b4:	d407      	bmi.n	80055c6 <_printf_float+0x1e6>
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	4642      	mov	r2, r8
 80055ba:	4631      	mov	r1, r6
 80055bc:	4628      	mov	r0, r5
 80055be:	47b8      	blx	r7
 80055c0:	3001      	adds	r0, #1
 80055c2:	d12b      	bne.n	800561c <_printf_float+0x23c>
 80055c4:	e767      	b.n	8005496 <_printf_float+0xb6>
 80055c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055ca:	f240 80dd 	bls.w	8005788 <_printf_float+0x3a8>
 80055ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055d2:	2200      	movs	r2, #0
 80055d4:	2300      	movs	r3, #0
 80055d6:	f7fb fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d033      	beq.n	8005646 <_printf_float+0x266>
 80055de:	4a37      	ldr	r2, [pc, #220]	@ (80056bc <_printf_float+0x2dc>)
 80055e0:	2301      	movs	r3, #1
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f af54 	beq.w	8005496 <_printf_float+0xb6>
 80055ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055f2:	4543      	cmp	r3, r8
 80055f4:	db02      	blt.n	80055fc <_printf_float+0x21c>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	07d8      	lsls	r0, r3, #31
 80055fa:	d50f      	bpl.n	800561c <_printf_float+0x23c>
 80055fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af45 	beq.w	8005496 <_printf_float+0xb6>
 800560c:	f04f 0900 	mov.w	r9, #0
 8005610:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005614:	f104 0a1a 	add.w	sl, r4, #26
 8005618:	45c8      	cmp	r8, r9
 800561a:	dc09      	bgt.n	8005630 <_printf_float+0x250>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	079b      	lsls	r3, r3, #30
 8005620:	f100 8103 	bmi.w	800582a <_printf_float+0x44a>
 8005624:	68e0      	ldr	r0, [r4, #12]
 8005626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005628:	4298      	cmp	r0, r3
 800562a:	bfb8      	it	lt
 800562c:	4618      	movlt	r0, r3
 800562e:	e734      	b.n	800549a <_printf_float+0xba>
 8005630:	2301      	movs	r3, #1
 8005632:	4652      	mov	r2, sl
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f af2b 	beq.w	8005496 <_printf_float+0xb6>
 8005640:	f109 0901 	add.w	r9, r9, #1
 8005644:	e7e8      	b.n	8005618 <_printf_float+0x238>
 8005646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	dc39      	bgt.n	80056c0 <_printf_float+0x2e0>
 800564c:	4a1b      	ldr	r2, [pc, #108]	@ (80056bc <_printf_float+0x2dc>)
 800564e:	2301      	movs	r3, #1
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f af1d 	beq.w	8005496 <_printf_float+0xb6>
 800565c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005660:	ea59 0303 	orrs.w	r3, r9, r3
 8005664:	d102      	bne.n	800566c <_printf_float+0x28c>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	07d9      	lsls	r1, r3, #31
 800566a:	d5d7      	bpl.n	800561c <_printf_float+0x23c>
 800566c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af0d 	beq.w	8005496 <_printf_float+0xb6>
 800567c:	f04f 0a00 	mov.w	sl, #0
 8005680:	f104 0b1a 	add.w	fp, r4, #26
 8005684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005686:	425b      	negs	r3, r3
 8005688:	4553      	cmp	r3, sl
 800568a:	dc01      	bgt.n	8005690 <_printf_float+0x2b0>
 800568c:	464b      	mov	r3, r9
 800568e:	e793      	b.n	80055b8 <_printf_float+0x1d8>
 8005690:	2301      	movs	r3, #1
 8005692:	465a      	mov	r2, fp
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	f43f aefb 	beq.w	8005496 <_printf_float+0xb6>
 80056a0:	f10a 0a01 	add.w	sl, sl, #1
 80056a4:	e7ee      	b.n	8005684 <_printf_float+0x2a4>
 80056a6:	bf00      	nop
 80056a8:	7fefffff 	.word	0x7fefffff
 80056ac:	080099b0 	.word	0x080099b0
 80056b0:	080099b4 	.word	0x080099b4
 80056b4:	080099b8 	.word	0x080099b8
 80056b8:	080099bc 	.word	0x080099bc
 80056bc:	080099c0 	.word	0x080099c0
 80056c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056c6:	4553      	cmp	r3, sl
 80056c8:	bfa8      	it	ge
 80056ca:	4653      	movge	r3, sl
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	4699      	mov	r9, r3
 80056d0:	dc36      	bgt.n	8005740 <_printf_float+0x360>
 80056d2:	f04f 0b00 	mov.w	fp, #0
 80056d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056da:	f104 021a 	add.w	r2, r4, #26
 80056de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056e0:	9306      	str	r3, [sp, #24]
 80056e2:	eba3 0309 	sub.w	r3, r3, r9
 80056e6:	455b      	cmp	r3, fp
 80056e8:	dc31      	bgt.n	800574e <_printf_float+0x36e>
 80056ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ec:	459a      	cmp	sl, r3
 80056ee:	dc3a      	bgt.n	8005766 <_printf_float+0x386>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	07da      	lsls	r2, r3, #31
 80056f4:	d437      	bmi.n	8005766 <_printf_float+0x386>
 80056f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f8:	ebaa 0903 	sub.w	r9, sl, r3
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005702:	4599      	cmp	r9, r3
 8005704:	bfa8      	it	ge
 8005706:	4699      	movge	r9, r3
 8005708:	f1b9 0f00 	cmp.w	r9, #0
 800570c:	dc33      	bgt.n	8005776 <_printf_float+0x396>
 800570e:	f04f 0800 	mov.w	r8, #0
 8005712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005716:	f104 0b1a 	add.w	fp, r4, #26
 800571a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571c:	ebaa 0303 	sub.w	r3, sl, r3
 8005720:	eba3 0309 	sub.w	r3, r3, r9
 8005724:	4543      	cmp	r3, r8
 8005726:	f77f af79 	ble.w	800561c <_printf_float+0x23c>
 800572a:	2301      	movs	r3, #1
 800572c:	465a      	mov	r2, fp
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f aeae 	beq.w	8005496 <_printf_float+0xb6>
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	e7ec      	b.n	800571a <_printf_float+0x33a>
 8005740:	4642      	mov	r2, r8
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	d1c2      	bne.n	80056d2 <_printf_float+0x2f2>
 800574c:	e6a3      	b.n	8005496 <_printf_float+0xb6>
 800574e:	2301      	movs	r3, #1
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	9206      	str	r2, [sp, #24]
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f ae9c 	beq.w	8005496 <_printf_float+0xb6>
 800575e:	9a06      	ldr	r2, [sp, #24]
 8005760:	f10b 0b01 	add.w	fp, fp, #1
 8005764:	e7bb      	b.n	80056de <_printf_float+0x2fe>
 8005766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	d1c0      	bne.n	80056f6 <_printf_float+0x316>
 8005774:	e68f      	b.n	8005496 <_printf_float+0xb6>
 8005776:	9a06      	ldr	r2, [sp, #24]
 8005778:	464b      	mov	r3, r9
 800577a:	4442      	add	r2, r8
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	d1c3      	bne.n	800570e <_printf_float+0x32e>
 8005786:	e686      	b.n	8005496 <_printf_float+0xb6>
 8005788:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800578c:	f1ba 0f01 	cmp.w	sl, #1
 8005790:	dc01      	bgt.n	8005796 <_printf_float+0x3b6>
 8005792:	07db      	lsls	r3, r3, #31
 8005794:	d536      	bpl.n	8005804 <_printf_float+0x424>
 8005796:	2301      	movs	r3, #1
 8005798:	4642      	mov	r2, r8
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae78 	beq.w	8005496 <_printf_float+0xb6>
 80057a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae70 	beq.w	8005496 <_printf_float+0xb6>
 80057b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057ba:	2200      	movs	r2, #0
 80057bc:	2300      	movs	r3, #0
 80057be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80057c2:	f7fb f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80057c6:	b9c0      	cbnz	r0, 80057fa <_printf_float+0x41a>
 80057c8:	4653      	mov	r3, sl
 80057ca:	f108 0201 	add.w	r2, r8, #1
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	d10c      	bne.n	80057f2 <_printf_float+0x412>
 80057d8:	e65d      	b.n	8005496 <_printf_float+0xb6>
 80057da:	2301      	movs	r3, #1
 80057dc:	465a      	mov	r2, fp
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f ae56 	beq.w	8005496 <_printf_float+0xb6>
 80057ea:	f108 0801 	add.w	r8, r8, #1
 80057ee:	45d0      	cmp	r8, sl
 80057f0:	dbf3      	blt.n	80057da <_printf_float+0x3fa>
 80057f2:	464b      	mov	r3, r9
 80057f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057f8:	e6df      	b.n	80055ba <_printf_float+0x1da>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	f104 0b1a 	add.w	fp, r4, #26
 8005802:	e7f4      	b.n	80057ee <_printf_float+0x40e>
 8005804:	2301      	movs	r3, #1
 8005806:	4642      	mov	r2, r8
 8005808:	e7e1      	b.n	80057ce <_printf_float+0x3ee>
 800580a:	2301      	movs	r3, #1
 800580c:	464a      	mov	r2, r9
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f ae3e 	beq.w	8005496 <_printf_float+0xb6>
 800581a:	f108 0801 	add.w	r8, r8, #1
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005822:	1a5b      	subs	r3, r3, r1
 8005824:	4543      	cmp	r3, r8
 8005826:	dcf0      	bgt.n	800580a <_printf_float+0x42a>
 8005828:	e6fc      	b.n	8005624 <_printf_float+0x244>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	f104 0919 	add.w	r9, r4, #25
 8005832:	e7f4      	b.n	800581e <_printf_float+0x43e>

08005834 <_printf_common>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	4616      	mov	r6, r2
 800583a:	4698      	mov	r8, r3
 800583c:	688a      	ldr	r2, [r1, #8]
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005844:	4293      	cmp	r3, r2
 8005846:	bfb8      	it	lt
 8005848:	4613      	movlt	r3, r2
 800584a:	6033      	str	r3, [r6, #0]
 800584c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005850:	4607      	mov	r7, r0
 8005852:	460c      	mov	r4, r1
 8005854:	b10a      	cbz	r2, 800585a <_printf_common+0x26>
 8005856:	3301      	adds	r3, #1
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	0699      	lsls	r1, r3, #26
 800585e:	bf42      	ittt	mi
 8005860:	6833      	ldrmi	r3, [r6, #0]
 8005862:	3302      	addmi	r3, #2
 8005864:	6033      	strmi	r3, [r6, #0]
 8005866:	6825      	ldr	r5, [r4, #0]
 8005868:	f015 0506 	ands.w	r5, r5, #6
 800586c:	d106      	bne.n	800587c <_printf_common+0x48>
 800586e:	f104 0a19 	add.w	sl, r4, #25
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	6832      	ldr	r2, [r6, #0]
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	42ab      	cmp	r3, r5
 800587a:	dc26      	bgt.n	80058ca <_printf_common+0x96>
 800587c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	3b00      	subs	r3, #0
 8005884:	bf18      	it	ne
 8005886:	2301      	movne	r3, #1
 8005888:	0692      	lsls	r2, r2, #26
 800588a:	d42b      	bmi.n	80058e4 <_printf_common+0xb0>
 800588c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005890:	4641      	mov	r1, r8
 8005892:	4638      	mov	r0, r7
 8005894:	47c8      	blx	r9
 8005896:	3001      	adds	r0, #1
 8005898:	d01e      	beq.n	80058d8 <_printf_common+0xa4>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	f003 0306 	and.w	r3, r3, #6
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	bf02      	ittt	eq
 80058a6:	68e5      	ldreq	r5, [r4, #12]
 80058a8:	6833      	ldreq	r3, [r6, #0]
 80058aa:	1aed      	subeq	r5, r5, r3
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	bf0c      	ite	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	2500      	movne	r5, #0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bfc4      	itt	gt
 80058ba:	1a9b      	subgt	r3, r3, r2
 80058bc:	18ed      	addgt	r5, r5, r3
 80058be:	2600      	movs	r6, #0
 80058c0:	341a      	adds	r4, #26
 80058c2:	42b5      	cmp	r5, r6
 80058c4:	d11a      	bne.n	80058fc <_printf_common+0xc8>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e008      	b.n	80058dc <_printf_common+0xa8>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4652      	mov	r2, sl
 80058ce:	4641      	mov	r1, r8
 80058d0:	4638      	mov	r0, r7
 80058d2:	47c8      	blx	r9
 80058d4:	3001      	adds	r0, #1
 80058d6:	d103      	bne.n	80058e0 <_printf_common+0xac>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	3501      	adds	r5, #1
 80058e2:	e7c6      	b.n	8005872 <_printf_common+0x3e>
 80058e4:	18e1      	adds	r1, r4, r3
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	2030      	movs	r0, #48	@ 0x30
 80058ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ee:	4422      	add	r2, r4
 80058f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058f8:	3302      	adds	r3, #2
 80058fa:	e7c7      	b.n	800588c <_printf_common+0x58>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4622      	mov	r2, r4
 8005900:	4641      	mov	r1, r8
 8005902:	4638      	mov	r0, r7
 8005904:	47c8      	blx	r9
 8005906:	3001      	adds	r0, #1
 8005908:	d0e6      	beq.n	80058d8 <_printf_common+0xa4>
 800590a:	3601      	adds	r6, #1
 800590c:	e7d9      	b.n	80058c2 <_printf_common+0x8e>
	...

08005910 <_printf_i>:
 8005910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	7e0f      	ldrb	r7, [r1, #24]
 8005916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005918:	2f78      	cmp	r7, #120	@ 0x78
 800591a:	4691      	mov	r9, r2
 800591c:	4680      	mov	r8, r0
 800591e:	460c      	mov	r4, r1
 8005920:	469a      	mov	sl, r3
 8005922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005926:	d807      	bhi.n	8005938 <_printf_i+0x28>
 8005928:	2f62      	cmp	r7, #98	@ 0x62
 800592a:	d80a      	bhi.n	8005942 <_printf_i+0x32>
 800592c:	2f00      	cmp	r7, #0
 800592e:	f000 80d2 	beq.w	8005ad6 <_printf_i+0x1c6>
 8005932:	2f58      	cmp	r7, #88	@ 0x58
 8005934:	f000 80b9 	beq.w	8005aaa <_printf_i+0x19a>
 8005938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800593c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005940:	e03a      	b.n	80059b8 <_printf_i+0xa8>
 8005942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005946:	2b15      	cmp	r3, #21
 8005948:	d8f6      	bhi.n	8005938 <_printf_i+0x28>
 800594a:	a101      	add	r1, pc, #4	@ (adr r1, 8005950 <_printf_i+0x40>)
 800594c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005950:	080059a9 	.word	0x080059a9
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005939 	.word	0x08005939
 800595c:	08005939 	.word	0x08005939
 8005960:	08005939 	.word	0x08005939
 8005964:	08005939 	.word	0x08005939
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005939 	.word	0x08005939
 8005970:	08005939 	.word	0x08005939
 8005974:	08005939 	.word	0x08005939
 8005978:	08005939 	.word	0x08005939
 800597c:	08005abd 	.word	0x08005abd
 8005980:	080059e7 	.word	0x080059e7
 8005984:	08005a77 	.word	0x08005a77
 8005988:	08005939 	.word	0x08005939
 800598c:	08005939 	.word	0x08005939
 8005990:	08005adf 	.word	0x08005adf
 8005994:	08005939 	.word	0x08005939
 8005998:	080059e7 	.word	0x080059e7
 800599c:	08005939 	.word	0x08005939
 80059a0:	08005939 	.word	0x08005939
 80059a4:	08005a7f 	.word	0x08005a7f
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6032      	str	r2, [r6, #0]
 80059b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059b8:	2301      	movs	r3, #1
 80059ba:	e09d      	b.n	8005af8 <_printf_i+0x1e8>
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6031      	str	r1, [r6, #0]
 80059c4:	0606      	lsls	r6, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xbc>
 80059c8:	681d      	ldr	r5, [r3, #0]
 80059ca:	e003      	b.n	80059d4 <_printf_i+0xc4>
 80059cc:	0645      	lsls	r5, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xb8>
 80059d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	da03      	bge.n	80059e0 <_printf_i+0xd0>
 80059d8:	232d      	movs	r3, #45	@ 0x2d
 80059da:	426d      	negs	r5, r5
 80059dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059e0:	4859      	ldr	r0, [pc, #356]	@ (8005b48 <_printf_i+0x238>)
 80059e2:	230a      	movs	r3, #10
 80059e4:	e011      	b.n	8005a0a <_printf_i+0xfa>
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	6833      	ldr	r3, [r6, #0]
 80059ea:	0608      	lsls	r0, r1, #24
 80059ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80059f0:	d402      	bmi.n	80059f8 <_printf_i+0xe8>
 80059f2:	0649      	lsls	r1, r1, #25
 80059f4:	bf48      	it	mi
 80059f6:	b2ad      	uxthmi	r5, r5
 80059f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059fa:	4853      	ldr	r0, [pc, #332]	@ (8005b48 <_printf_i+0x238>)
 80059fc:	6033      	str	r3, [r6, #0]
 80059fe:	bf14      	ite	ne
 8005a00:	230a      	movne	r3, #10
 8005a02:	2308      	moveq	r3, #8
 8005a04:	2100      	movs	r1, #0
 8005a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a0a:	6866      	ldr	r6, [r4, #4]
 8005a0c:	60a6      	str	r6, [r4, #8]
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	bfa2      	ittt	ge
 8005a12:	6821      	ldrge	r1, [r4, #0]
 8005a14:	f021 0104 	bicge.w	r1, r1, #4
 8005a18:	6021      	strge	r1, [r4, #0]
 8005a1a:	b90d      	cbnz	r5, 8005a20 <_printf_i+0x110>
 8005a1c:	2e00      	cmp	r6, #0
 8005a1e:	d04b      	beq.n	8005ab8 <_printf_i+0x1a8>
 8005a20:	4616      	mov	r6, r2
 8005a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a26:	fb03 5711 	mls	r7, r3, r1, r5
 8005a2a:	5dc7      	ldrb	r7, [r0, r7]
 8005a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a30:	462f      	mov	r7, r5
 8005a32:	42bb      	cmp	r3, r7
 8005a34:	460d      	mov	r5, r1
 8005a36:	d9f4      	bls.n	8005a22 <_printf_i+0x112>
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d10b      	bne.n	8005a54 <_printf_i+0x144>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	07df      	lsls	r7, r3, #31
 8005a40:	d508      	bpl.n	8005a54 <_printf_i+0x144>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	4299      	cmp	r1, r3
 8005a48:	bfde      	ittt	le
 8005a4a:	2330      	movle	r3, #48	@ 0x30
 8005a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a54:	1b92      	subs	r2, r2, r6
 8005a56:	6122      	str	r2, [r4, #16]
 8005a58:	f8cd a000 	str.w	sl, [sp]
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	aa03      	add	r2, sp, #12
 8005a60:	4621      	mov	r1, r4
 8005a62:	4640      	mov	r0, r8
 8005a64:	f7ff fee6 	bl	8005834 <_printf_common>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d14a      	bne.n	8005b02 <_printf_i+0x1f2>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a70:	b004      	add	sp, #16
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	f043 0320 	orr.w	r3, r3, #32
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	4833      	ldr	r0, [pc, #204]	@ (8005b4c <_printf_i+0x23c>)
 8005a80:	2778      	movs	r7, #120	@ 0x78
 8005a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	6831      	ldr	r1, [r6, #0]
 8005a8a:	061f      	lsls	r7, r3, #24
 8005a8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a90:	d402      	bmi.n	8005a98 <_printf_i+0x188>
 8005a92:	065f      	lsls	r7, r3, #25
 8005a94:	bf48      	it	mi
 8005a96:	b2ad      	uxthmi	r5, r5
 8005a98:	6031      	str	r1, [r6, #0]
 8005a9a:	07d9      	lsls	r1, r3, #31
 8005a9c:	bf44      	itt	mi
 8005a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa2:	6023      	strmi	r3, [r4, #0]
 8005aa4:	b11d      	cbz	r5, 8005aae <_printf_i+0x19e>
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	e7ac      	b.n	8005a04 <_printf_i+0xf4>
 8005aaa:	4827      	ldr	r0, [pc, #156]	@ (8005b48 <_printf_i+0x238>)
 8005aac:	e7e9      	b.n	8005a82 <_printf_i+0x172>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f023 0320 	bic.w	r3, r3, #32
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	e7f6      	b.n	8005aa6 <_printf_i+0x196>
 8005ab8:	4616      	mov	r6, r2
 8005aba:	e7bd      	b.n	8005a38 <_printf_i+0x128>
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	6961      	ldr	r1, [r4, #20]
 8005ac2:	1d18      	adds	r0, r3, #4
 8005ac4:	6030      	str	r0, [r6, #0]
 8005ac6:	062e      	lsls	r6, r5, #24
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	d501      	bpl.n	8005ad0 <_printf_i+0x1c0>
 8005acc:	6019      	str	r1, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <_printf_i+0x1c6>
 8005ad0:	0668      	lsls	r0, r5, #25
 8005ad2:	d5fb      	bpl.n	8005acc <_printf_i+0x1bc>
 8005ad4:	8019      	strh	r1, [r3, #0]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	4616      	mov	r6, r2
 8005adc:	e7bc      	b.n	8005a58 <_printf_i+0x148>
 8005ade:	6833      	ldr	r3, [r6, #0]
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	6032      	str	r2, [r6, #0]
 8005ae4:	681e      	ldr	r6, [r3, #0]
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7fa fb70 	bl	80001d0 <memchr>
 8005af0:	b108      	cbz	r0, 8005af6 <_printf_i+0x1e6>
 8005af2:	1b80      	subs	r0, r0, r6
 8005af4:	6060      	str	r0, [r4, #4]
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	2300      	movs	r3, #0
 8005afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b00:	e7aa      	b.n	8005a58 <_printf_i+0x148>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	4632      	mov	r2, r6
 8005b06:	4649      	mov	r1, r9
 8005b08:	4640      	mov	r0, r8
 8005b0a:	47d0      	blx	sl
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d0ad      	beq.n	8005a6c <_printf_i+0x15c>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	079b      	lsls	r3, r3, #30
 8005b14:	d413      	bmi.n	8005b3e <_printf_i+0x22e>
 8005b16:	68e0      	ldr	r0, [r4, #12]
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	4298      	cmp	r0, r3
 8005b1c:	bfb8      	it	lt
 8005b1e:	4618      	movlt	r0, r3
 8005b20:	e7a6      	b.n	8005a70 <_printf_i+0x160>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4632      	mov	r2, r6
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	47d0      	blx	sl
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d09d      	beq.n	8005a6c <_printf_i+0x15c>
 8005b30:	3501      	adds	r5, #1
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	9903      	ldr	r1, [sp, #12]
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dcf2      	bgt.n	8005b22 <_printf_i+0x212>
 8005b3c:	e7eb      	b.n	8005b16 <_printf_i+0x206>
 8005b3e:	2500      	movs	r5, #0
 8005b40:	f104 0619 	add.w	r6, r4, #25
 8005b44:	e7f5      	b.n	8005b32 <_printf_i+0x222>
 8005b46:	bf00      	nop
 8005b48:	080099c2 	.word	0x080099c2
 8005b4c:	080099d3 	.word	0x080099d3

08005b50 <_scanf_float>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	b087      	sub	sp, #28
 8005b56:	4617      	mov	r7, r2
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	688b      	ldr	r3, [r1, #8]
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b62:	bf81      	itttt	hi
 8005b64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b68:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b70:	608b      	strhi	r3, [r1, #8]
 8005b72:	680b      	ldr	r3, [r1, #0]
 8005b74:	460a      	mov	r2, r1
 8005b76:	f04f 0500 	mov.w	r5, #0
 8005b7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b7e:	f842 3b1c 	str.w	r3, [r2], #28
 8005b82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b86:	4680      	mov	r8, r0
 8005b88:	460c      	mov	r4, r1
 8005b8a:	bf98      	it	ls
 8005b8c:	f04f 0b00 	movls.w	fp, #0
 8005b90:	9201      	str	r2, [sp, #4]
 8005b92:	4616      	mov	r6, r2
 8005b94:	46aa      	mov	sl, r5
 8005b96:	46a9      	mov	r9, r5
 8005b98:	9502      	str	r5, [sp, #8]
 8005b9a:	68a2      	ldr	r2, [r4, #8]
 8005b9c:	b152      	cbz	r2, 8005bb4 <_scanf_float+0x64>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ba4:	d864      	bhi.n	8005c70 <_scanf_float+0x120>
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d83c      	bhi.n	8005c24 <_scanf_float+0xd4>
 8005baa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005bae:	b2c8      	uxtb	r0, r1
 8005bb0:	280e      	cmp	r0, #14
 8005bb2:	d93a      	bls.n	8005c2a <_scanf_float+0xda>
 8005bb4:	f1b9 0f00 	cmp.w	r9, #0
 8005bb8:	d003      	beq.n	8005bc2 <_scanf_float+0x72>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005bc6:	f1ba 0f01 	cmp.w	sl, #1
 8005bca:	f200 8117 	bhi.w	8005dfc <_scanf_float+0x2ac>
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	429e      	cmp	r6, r3
 8005bd2:	f200 8108 	bhi.w	8005de6 <_scanf_float+0x296>
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	b007      	add	sp, #28
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005be2:	2a0d      	cmp	r2, #13
 8005be4:	d8e6      	bhi.n	8005bb4 <_scanf_float+0x64>
 8005be6:	a101      	add	r1, pc, #4	@ (adr r1, 8005bec <_scanf_float+0x9c>)
 8005be8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bec:	08005d33 	.word	0x08005d33
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005bb5 	.word	0x08005bb5
 8005bfc:	08005d93 	.word	0x08005d93
 8005c00:	08005d6b 	.word	0x08005d6b
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d41 	.word	0x08005d41
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005bb5 	.word	0x08005bb5
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005cf9 	.word	0x08005cf9
 8005c24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c28:	e7db      	b.n	8005be2 <_scanf_float+0x92>
 8005c2a:	290e      	cmp	r1, #14
 8005c2c:	d8c2      	bhi.n	8005bb4 <_scanf_float+0x64>
 8005c2e:	a001      	add	r0, pc, #4	@ (adr r0, 8005c34 <_scanf_float+0xe4>)
 8005c30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c34:	08005ce9 	.word	0x08005ce9
 8005c38:	08005bb5 	.word	0x08005bb5
 8005c3c:	08005ce9 	.word	0x08005ce9
 8005c40:	08005d7f 	.word	0x08005d7f
 8005c44:	08005bb5 	.word	0x08005bb5
 8005c48:	08005c91 	.word	0x08005c91
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005ccf 	.word	0x08005ccf
 8005c54:	08005ccf 	.word	0x08005ccf
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005ccf 	.word	0x08005ccf
 8005c60:	08005ccf 	.word	0x08005ccf
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005ccf 	.word	0x08005ccf
 8005c6c:	08005ccf 	.word	0x08005ccf
 8005c70:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c72:	d809      	bhi.n	8005c88 <_scanf_float+0x138>
 8005c74:	2b60      	cmp	r3, #96	@ 0x60
 8005c76:	d8b2      	bhi.n	8005bde <_scanf_float+0x8e>
 8005c78:	2b54      	cmp	r3, #84	@ 0x54
 8005c7a:	d07b      	beq.n	8005d74 <_scanf_float+0x224>
 8005c7c:	2b59      	cmp	r3, #89	@ 0x59
 8005c7e:	d199      	bne.n	8005bb4 <_scanf_float+0x64>
 8005c80:	2d07      	cmp	r5, #7
 8005c82:	d197      	bne.n	8005bb4 <_scanf_float+0x64>
 8005c84:	2508      	movs	r5, #8
 8005c86:	e02c      	b.n	8005ce2 <_scanf_float+0x192>
 8005c88:	2b74      	cmp	r3, #116	@ 0x74
 8005c8a:	d073      	beq.n	8005d74 <_scanf_float+0x224>
 8005c8c:	2b79      	cmp	r3, #121	@ 0x79
 8005c8e:	e7f6      	b.n	8005c7e <_scanf_float+0x12e>
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	05c8      	lsls	r0, r1, #23
 8005c94:	d51b      	bpl.n	8005cce <_scanf_float+0x17e>
 8005c96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c9a:	6021      	str	r1, [r4, #0]
 8005c9c:	f109 0901 	add.w	r9, r9, #1
 8005ca0:	f1bb 0f00 	cmp.w	fp, #0
 8005ca4:	d003      	beq.n	8005cae <_scanf_float+0x15e>
 8005ca6:	3201      	adds	r2, #1
 8005ca8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005cac:	60a2      	str	r2, [r4, #8]
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60a3      	str	r3, [r4, #8]
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	f340 8087 	ble.w	8005dd4 <_scanf_float+0x284>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	e765      	b.n	8005b9a <_scanf_float+0x4a>
 8005cce:	eb1a 0105 	adds.w	r1, sl, r5
 8005cd2:	f47f af6f 	bne.w	8005bb4 <_scanf_float+0x64>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005cdc:	6022      	str	r2, [r4, #0]
 8005cde:	460d      	mov	r5, r1
 8005ce0:	468a      	mov	sl, r1
 8005ce2:	f806 3b01 	strb.w	r3, [r6], #1
 8005ce6:	e7e2      	b.n	8005cae <_scanf_float+0x15e>
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	0610      	lsls	r0, r2, #24
 8005cec:	f57f af62 	bpl.w	8005bb4 <_scanf_float+0x64>
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf4:	6022      	str	r2, [r4, #0]
 8005cf6:	e7f4      	b.n	8005ce2 <_scanf_float+0x192>
 8005cf8:	f1ba 0f00 	cmp.w	sl, #0
 8005cfc:	d10e      	bne.n	8005d1c <_scanf_float+0x1cc>
 8005cfe:	f1b9 0f00 	cmp.w	r9, #0
 8005d02:	d10e      	bne.n	8005d22 <_scanf_float+0x1d2>
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d0e:	d108      	bne.n	8005d22 <_scanf_float+0x1d2>
 8005d10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d14:	6022      	str	r2, [r4, #0]
 8005d16:	f04f 0a01 	mov.w	sl, #1
 8005d1a:	e7e2      	b.n	8005ce2 <_scanf_float+0x192>
 8005d1c:	f1ba 0f02 	cmp.w	sl, #2
 8005d20:	d055      	beq.n	8005dce <_scanf_float+0x27e>
 8005d22:	2d01      	cmp	r5, #1
 8005d24:	d002      	beq.n	8005d2c <_scanf_float+0x1dc>
 8005d26:	2d04      	cmp	r5, #4
 8005d28:	f47f af44 	bne.w	8005bb4 <_scanf_float+0x64>
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	b2ed      	uxtb	r5, r5
 8005d30:	e7d7      	b.n	8005ce2 <_scanf_float+0x192>
 8005d32:	f1ba 0f01 	cmp.w	sl, #1
 8005d36:	f47f af3d 	bne.w	8005bb4 <_scanf_float+0x64>
 8005d3a:	f04f 0a02 	mov.w	sl, #2
 8005d3e:	e7d0      	b.n	8005ce2 <_scanf_float+0x192>
 8005d40:	b97d      	cbnz	r5, 8005d62 <_scanf_float+0x212>
 8005d42:	f1b9 0f00 	cmp.w	r9, #0
 8005d46:	f47f af38 	bne.w	8005bba <_scanf_float+0x6a>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d54:	f040 8108 	bne.w	8005f68 <_scanf_float+0x418>
 8005d58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d5c:	6022      	str	r2, [r4, #0]
 8005d5e:	2501      	movs	r5, #1
 8005d60:	e7bf      	b.n	8005ce2 <_scanf_float+0x192>
 8005d62:	2d03      	cmp	r5, #3
 8005d64:	d0e2      	beq.n	8005d2c <_scanf_float+0x1dc>
 8005d66:	2d05      	cmp	r5, #5
 8005d68:	e7de      	b.n	8005d28 <_scanf_float+0x1d8>
 8005d6a:	2d02      	cmp	r5, #2
 8005d6c:	f47f af22 	bne.w	8005bb4 <_scanf_float+0x64>
 8005d70:	2503      	movs	r5, #3
 8005d72:	e7b6      	b.n	8005ce2 <_scanf_float+0x192>
 8005d74:	2d06      	cmp	r5, #6
 8005d76:	f47f af1d 	bne.w	8005bb4 <_scanf_float+0x64>
 8005d7a:	2507      	movs	r5, #7
 8005d7c:	e7b1      	b.n	8005ce2 <_scanf_float+0x192>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	0591      	lsls	r1, r2, #22
 8005d82:	f57f af17 	bpl.w	8005bb4 <_scanf_float+0x64>
 8005d86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d8a:	6022      	str	r2, [r4, #0]
 8005d8c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d90:	e7a7      	b.n	8005ce2 <_scanf_float+0x192>
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d9c:	d006      	beq.n	8005dac <_scanf_float+0x25c>
 8005d9e:	0550      	lsls	r0, r2, #21
 8005da0:	f57f af08 	bpl.w	8005bb4 <_scanf_float+0x64>
 8005da4:	f1b9 0f00 	cmp.w	r9, #0
 8005da8:	f000 80de 	beq.w	8005f68 <_scanf_float+0x418>
 8005dac:	0591      	lsls	r1, r2, #22
 8005dae:	bf58      	it	pl
 8005db0:	9902      	ldrpl	r1, [sp, #8]
 8005db2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005db6:	bf58      	it	pl
 8005db8:	eba9 0101 	subpl.w	r1, r9, r1
 8005dbc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005dc0:	bf58      	it	pl
 8005dc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005dc6:	6022      	str	r2, [r4, #0]
 8005dc8:	f04f 0900 	mov.w	r9, #0
 8005dcc:	e789      	b.n	8005ce2 <_scanf_float+0x192>
 8005dce:	f04f 0a03 	mov.w	sl, #3
 8005dd2:	e786      	b.n	8005ce2 <_scanf_float+0x192>
 8005dd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dd8:	4639      	mov	r1, r7
 8005dda:	4640      	mov	r0, r8
 8005ddc:	4798      	blx	r3
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f43f aedb 	beq.w	8005b9a <_scanf_float+0x4a>
 8005de4:	e6e6      	b.n	8005bb4 <_scanf_float+0x64>
 8005de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dee:	463a      	mov	r2, r7
 8005df0:	4640      	mov	r0, r8
 8005df2:	4798      	blx	r3
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	e6e8      	b.n	8005bce <_scanf_float+0x7e>
 8005dfc:	1e6b      	subs	r3, r5, #1
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d824      	bhi.n	8005e4c <_scanf_float+0x2fc>
 8005e02:	2d02      	cmp	r5, #2
 8005e04:	d836      	bhi.n	8005e74 <_scanf_float+0x324>
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	f67f aee4 	bls.w	8005bd6 <_scanf_float+0x86>
 8005e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e16:	463a      	mov	r2, r7
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4798      	blx	r3
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	e7f0      	b.n	8005e06 <_scanf_float+0x2b6>
 8005e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e2c:	463a      	mov	r2, r7
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4798      	blx	r3
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e40:	f1ba 0f02 	cmp.w	sl, #2
 8005e44:	d1ee      	bne.n	8005e24 <_scanf_float+0x2d4>
 8005e46:	3d03      	subs	r5, #3
 8005e48:	b2ed      	uxtb	r5, r5
 8005e4a:	1b76      	subs	r6, r6, r5
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	05da      	lsls	r2, r3, #23
 8005e50:	d530      	bpl.n	8005eb4 <_scanf_float+0x364>
 8005e52:	055b      	lsls	r3, r3, #21
 8005e54:	d511      	bpl.n	8005e7a <_scanf_float+0x32a>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	429e      	cmp	r6, r3
 8005e5a:	f67f aebc 	bls.w	8005bd6 <_scanf_float+0x86>
 8005e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e66:	463a      	mov	r2, r7
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4798      	blx	r3
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	e7f0      	b.n	8005e56 <_scanf_float+0x306>
 8005e74:	46aa      	mov	sl, r5
 8005e76:	46b3      	mov	fp, r6
 8005e78:	e7de      	b.n	8005e38 <_scanf_float+0x2e8>
 8005e7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	2965      	cmp	r1, #101	@ 0x65
 8005e82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005e86:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	d00c      	beq.n	8005ea8 <_scanf_float+0x358>
 8005e8e:	2945      	cmp	r1, #69	@ 0x45
 8005e90:	d00a      	beq.n	8005ea8 <_scanf_float+0x358>
 8005e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e96:	463a      	mov	r2, r7
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4798      	blx	r3
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	1eb5      	subs	r5, r6, #2
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005eac:	463a      	mov	r2, r7
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4798      	blx	r3
 8005eb2:	462e      	mov	r6, r5
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	f012 0210 	ands.w	r2, r2, #16
 8005eba:	d001      	beq.n	8005ec0 <_scanf_float+0x370>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e68b      	b.n	8005bd8 <_scanf_float+0x88>
 8005ec0:	7032      	strb	r2, [r6, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ecc:	d11c      	bne.n	8005f08 <_scanf_float+0x3b8>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	454b      	cmp	r3, r9
 8005ed2:	eba3 0209 	sub.w	r2, r3, r9
 8005ed6:	d123      	bne.n	8005f20 <_scanf_float+0x3d0>
 8005ed8:	9901      	ldr	r1, [sp, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	4640      	mov	r0, r8
 8005ede:	f000 ff13 	bl	8006d08 <_strtod_r>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f011 0f02 	tst.w	r1, #2
 8005eec:	ec57 6b10 	vmov	r6, r7, d0
 8005ef0:	f103 0204 	add.w	r2, r3, #4
 8005ef4:	d01f      	beq.n	8005f36 <_scanf_float+0x3e6>
 8005ef6:	9903      	ldr	r1, [sp, #12]
 8005ef8:	600a      	str	r2, [r1, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	e9c3 6700 	strd	r6, r7, [r3]
 8005f00:	68e3      	ldr	r3, [r4, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60e3      	str	r3, [r4, #12]
 8005f06:	e7d9      	b.n	8005ebc <_scanf_float+0x36c>
 8005f08:	9b04      	ldr	r3, [sp, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0e4      	beq.n	8005ed8 <_scanf_float+0x388>
 8005f0e:	9905      	ldr	r1, [sp, #20]
 8005f10:	230a      	movs	r3, #10
 8005f12:	3101      	adds	r1, #1
 8005f14:	4640      	mov	r0, r8
 8005f16:	f000 ff77 	bl	8006e08 <_strtol_r>
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	9e05      	ldr	r6, [sp, #20]
 8005f1e:	1ac2      	subs	r2, r0, r3
 8005f20:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f24:	429e      	cmp	r6, r3
 8005f26:	bf28      	it	cs
 8005f28:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f2c:	4910      	ldr	r1, [pc, #64]	@ (8005f70 <_scanf_float+0x420>)
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f822 	bl	8005f78 <siprintf>
 8005f34:	e7d0      	b.n	8005ed8 <_scanf_float+0x388>
 8005f36:	f011 0f04 	tst.w	r1, #4
 8005f3a:	9903      	ldr	r1, [sp, #12]
 8005f3c:	600a      	str	r2, [r1, #0]
 8005f3e:	d1dc      	bne.n	8005efa <_scanf_float+0x3aa>
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	4632      	mov	r2, r6
 8005f44:	463b      	mov	r3, r7
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fdef 	bl	8000b2c <__aeabi_dcmpun>
 8005f4e:	b128      	cbz	r0, 8005f5c <_scanf_float+0x40c>
 8005f50:	4808      	ldr	r0, [pc, #32]	@ (8005f74 <_scanf_float+0x424>)
 8005f52:	f000 ffdd 	bl	8006f10 <nanf>
 8005f56:	ed85 0a00 	vstr	s0, [r5]
 8005f5a:	e7d1      	b.n	8005f00 <_scanf_float+0x3b0>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4639      	mov	r1, r7
 8005f60:	f7fa fe42 	bl	8000be8 <__aeabi_d2f>
 8005f64:	6028      	str	r0, [r5, #0]
 8005f66:	e7cb      	b.n	8005f00 <_scanf_float+0x3b0>
 8005f68:	f04f 0900 	mov.w	r9, #0
 8005f6c:	e629      	b.n	8005bc2 <_scanf_float+0x72>
 8005f6e:	bf00      	nop
 8005f70:	080099e4 	.word	0x080099e4
 8005f74:	08009ddb 	.word	0x08009ddb

08005f78 <siprintf>:
 8005f78:	b40e      	push	{r1, r2, r3}
 8005f7a:	b500      	push	{lr}
 8005f7c:	b09c      	sub	sp, #112	@ 0x70
 8005f7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9006      	str	r0, [sp, #24]
 8005f84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f88:	4809      	ldr	r0, [pc, #36]	@ (8005fb0 <siprintf+0x38>)
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	9104      	str	r1, [sp, #16]
 8005f8e:	4909      	ldr	r1, [pc, #36]	@ (8005fb4 <siprintf+0x3c>)
 8005f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	a902      	add	r1, sp, #8
 8005f9c:	f002 f9a0 	bl	80082e0 <_svfiprintf_r>
 8005fa0:	9b02      	ldr	r3, [sp, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	b01c      	add	sp, #112	@ 0x70
 8005fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fac:	b003      	add	sp, #12
 8005fae:	4770      	bx	lr
 8005fb0:	20000184 	.word	0x20000184
 8005fb4:	ffff0208 	.word	0xffff0208

08005fb8 <std>:
 8005fb8:	2300      	movs	r3, #0
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8005fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fc6:	6083      	str	r3, [r0, #8]
 8005fc8:	8181      	strh	r1, [r0, #12]
 8005fca:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fcc:	81c2      	strh	r2, [r0, #14]
 8005fce:	6183      	str	r3, [r0, #24]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	305c      	adds	r0, #92	@ 0x5c
 8005fd6:	f000 ff49 	bl	8006e6c <memset>
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <std+0x58>)
 8005fdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <std+0x5c>)
 8005fe0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <std+0x60>)
 8005fe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <std+0x64>)
 8005fe8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fea:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <std+0x68>)
 8005fec:	6224      	str	r4, [r4, #32]
 8005fee:	429c      	cmp	r4, r3
 8005ff0:	d006      	beq.n	8006000 <std+0x48>
 8005ff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ff6:	4294      	cmp	r4, r2
 8005ff8:	d002      	beq.n	8006000 <std+0x48>
 8005ffa:	33d0      	adds	r3, #208	@ 0xd0
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	d105      	bne.n	800600c <std+0x54>
 8006000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006008:	f000 bf66 	b.w	8006ed8 <__retarget_lock_init_recursive>
 800600c:	bd10      	pop	{r4, pc}
 800600e:	bf00      	nop
 8006010:	08009125 	.word	0x08009125
 8006014:	08009147 	.word	0x08009147
 8006018:	0800917f 	.word	0x0800917f
 800601c:	080091a3 	.word	0x080091a3
 8006020:	2000035c 	.word	0x2000035c

08006024 <stdio_exit_handler>:
 8006024:	4a02      	ldr	r2, [pc, #8]	@ (8006030 <stdio_exit_handler+0xc>)
 8006026:	4903      	ldr	r1, [pc, #12]	@ (8006034 <stdio_exit_handler+0x10>)
 8006028:	4803      	ldr	r0, [pc, #12]	@ (8006038 <stdio_exit_handler+0x14>)
 800602a:	f000 beef 	b.w	8006e0c <_fwalk_sglue>
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c
 8006034:	08008759 	.word	0x08008759
 8006038:	20000188 	.word	0x20000188

0800603c <cleanup_stdio>:
 800603c:	6841      	ldr	r1, [r0, #4]
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <cleanup_stdio+0x34>)
 8006040:	4299      	cmp	r1, r3
 8006042:	b510      	push	{r4, lr}
 8006044:	4604      	mov	r4, r0
 8006046:	d001      	beq.n	800604c <cleanup_stdio+0x10>
 8006048:	f002 fb86 	bl	8008758 <_fflush_r>
 800604c:	68a1      	ldr	r1, [r4, #8]
 800604e:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <cleanup_stdio+0x38>)
 8006050:	4299      	cmp	r1, r3
 8006052:	d002      	beq.n	800605a <cleanup_stdio+0x1e>
 8006054:	4620      	mov	r0, r4
 8006056:	f002 fb7f 	bl	8008758 <_fflush_r>
 800605a:	68e1      	ldr	r1, [r4, #12]
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <cleanup_stdio+0x3c>)
 800605e:	4299      	cmp	r1, r3
 8006060:	d004      	beq.n	800606c <cleanup_stdio+0x30>
 8006062:	4620      	mov	r0, r4
 8006064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006068:	f002 bb76 	b.w	8008758 <_fflush_r>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	bf00      	nop
 8006070:	2000035c 	.word	0x2000035c
 8006074:	200003c4 	.word	0x200003c4
 8006078:	2000042c 	.word	0x2000042c

0800607c <global_stdio_init.part.0>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4b0b      	ldr	r3, [pc, #44]	@ (80060ac <global_stdio_init.part.0+0x30>)
 8006080:	4c0b      	ldr	r4, [pc, #44]	@ (80060b0 <global_stdio_init.part.0+0x34>)
 8006082:	4a0c      	ldr	r2, [pc, #48]	@ (80060b4 <global_stdio_init.part.0+0x38>)
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	4620      	mov	r0, r4
 8006088:	2200      	movs	r2, #0
 800608a:	2104      	movs	r1, #4
 800608c:	f7ff ff94 	bl	8005fb8 <std>
 8006090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006094:	2201      	movs	r2, #1
 8006096:	2109      	movs	r1, #9
 8006098:	f7ff ff8e 	bl	8005fb8 <std>
 800609c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060a0:	2202      	movs	r2, #2
 80060a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a6:	2112      	movs	r1, #18
 80060a8:	f7ff bf86 	b.w	8005fb8 <std>
 80060ac:	20000494 	.word	0x20000494
 80060b0:	2000035c 	.word	0x2000035c
 80060b4:	08006025 	.word	0x08006025

080060b8 <__sfp_lock_acquire>:
 80060b8:	4801      	ldr	r0, [pc, #4]	@ (80060c0 <__sfp_lock_acquire+0x8>)
 80060ba:	f000 bf0e 	b.w	8006eda <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20000499 	.word	0x20000499

080060c4 <__sfp_lock_release>:
 80060c4:	4801      	ldr	r0, [pc, #4]	@ (80060cc <__sfp_lock_release+0x8>)
 80060c6:	f000 bf09 	b.w	8006edc <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000499 	.word	0x20000499

080060d0 <__sinit>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4604      	mov	r4, r0
 80060d4:	f7ff fff0 	bl	80060b8 <__sfp_lock_acquire>
 80060d8:	6a23      	ldr	r3, [r4, #32]
 80060da:	b11b      	cbz	r3, 80060e4 <__sinit+0x14>
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f7ff bff0 	b.w	80060c4 <__sfp_lock_release>
 80060e4:	4b04      	ldr	r3, [pc, #16]	@ (80060f8 <__sinit+0x28>)
 80060e6:	6223      	str	r3, [r4, #32]
 80060e8:	4b04      	ldr	r3, [pc, #16]	@ (80060fc <__sinit+0x2c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f5      	bne.n	80060dc <__sinit+0xc>
 80060f0:	f7ff ffc4 	bl	800607c <global_stdio_init.part.0>
 80060f4:	e7f2      	b.n	80060dc <__sinit+0xc>
 80060f6:	bf00      	nop
 80060f8:	0800603d 	.word	0x0800603d
 80060fc:	20000494 	.word	0x20000494

08006100 <sulp>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	460d      	mov	r5, r1
 8006106:	ec45 4b10 	vmov	d0, r4, r5
 800610a:	4616      	mov	r6, r2
 800610c:	f002 fecc 	bl	8008ea8 <__ulp>
 8006110:	ec51 0b10 	vmov	r0, r1, d0
 8006114:	b17e      	cbz	r6, 8006136 <sulp+0x36>
 8006116:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800611a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800611e:	2b00      	cmp	r3, #0
 8006120:	dd09      	ble.n	8006136 <sulp+0x36>
 8006122:	051b      	lsls	r3, r3, #20
 8006124:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006128:	2400      	movs	r4, #0
 800612a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	f7fa fa61 	bl	80005f8 <__aeabi_dmul>
 8006136:	ec41 0b10 	vmov	d0, r0, r1
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	0000      	movs	r0, r0
	...

08006140 <_strtod_l>:
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	b09f      	sub	sp, #124	@ 0x7c
 8006146:	460c      	mov	r4, r1
 8006148:	9217      	str	r2, [sp, #92]	@ 0x5c
 800614a:	2200      	movs	r2, #0
 800614c:	921a      	str	r2, [sp, #104]	@ 0x68
 800614e:	9005      	str	r0, [sp, #20]
 8006150:	f04f 0a00 	mov.w	sl, #0
 8006154:	f04f 0b00 	mov.w	fp, #0
 8006158:	460a      	mov	r2, r1
 800615a:	9219      	str	r2, [sp, #100]	@ 0x64
 800615c:	7811      	ldrb	r1, [r2, #0]
 800615e:	292b      	cmp	r1, #43	@ 0x2b
 8006160:	d04a      	beq.n	80061f8 <_strtod_l+0xb8>
 8006162:	d838      	bhi.n	80061d6 <_strtod_l+0x96>
 8006164:	290d      	cmp	r1, #13
 8006166:	d832      	bhi.n	80061ce <_strtod_l+0x8e>
 8006168:	2908      	cmp	r1, #8
 800616a:	d832      	bhi.n	80061d2 <_strtod_l+0x92>
 800616c:	2900      	cmp	r1, #0
 800616e:	d03b      	beq.n	80061e8 <_strtod_l+0xa8>
 8006170:	2200      	movs	r2, #0
 8006172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006174:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006176:	782a      	ldrb	r2, [r5, #0]
 8006178:	2a30      	cmp	r2, #48	@ 0x30
 800617a:	f040 80b3 	bne.w	80062e4 <_strtod_l+0x1a4>
 800617e:	786a      	ldrb	r2, [r5, #1]
 8006180:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006184:	2a58      	cmp	r2, #88	@ 0x58
 8006186:	d16e      	bne.n	8006266 <_strtod_l+0x126>
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4a8e      	ldr	r2, [pc, #568]	@ (80063cc <_strtod_l+0x28c>)
 8006194:	9805      	ldr	r0, [sp, #20]
 8006196:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006198:	a919      	add	r1, sp, #100	@ 0x64
 800619a:	f001 fd75 	bl	8007c88 <__gethex>
 800619e:	f010 060f 	ands.w	r6, r0, #15
 80061a2:	4604      	mov	r4, r0
 80061a4:	d005      	beq.n	80061b2 <_strtod_l+0x72>
 80061a6:	2e06      	cmp	r6, #6
 80061a8:	d128      	bne.n	80061fc <_strtod_l+0xbc>
 80061aa:	3501      	adds	r5, #1
 80061ac:	2300      	movs	r3, #0
 80061ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80061b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 858e 	bne.w	8006cd6 <_strtod_l+0xb96>
 80061ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061bc:	b1cb      	cbz	r3, 80061f2 <_strtod_l+0xb2>
 80061be:	4652      	mov	r2, sl
 80061c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80061c4:	ec43 2b10 	vmov	d0, r2, r3
 80061c8:	b01f      	add	sp, #124	@ 0x7c
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	2920      	cmp	r1, #32
 80061d0:	d1ce      	bne.n	8006170 <_strtod_l+0x30>
 80061d2:	3201      	adds	r2, #1
 80061d4:	e7c1      	b.n	800615a <_strtod_l+0x1a>
 80061d6:	292d      	cmp	r1, #45	@ 0x2d
 80061d8:	d1ca      	bne.n	8006170 <_strtod_l+0x30>
 80061da:	2101      	movs	r1, #1
 80061dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80061de:	1c51      	adds	r1, r2, #1
 80061e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80061e2:	7852      	ldrb	r2, [r2, #1]
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d1c5      	bne.n	8006174 <_strtod_l+0x34>
 80061e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8570 	bne.w	8006cd2 <_strtod_l+0xb92>
 80061f2:	4652      	mov	r2, sl
 80061f4:	465b      	mov	r3, fp
 80061f6:	e7e5      	b.n	80061c4 <_strtod_l+0x84>
 80061f8:	2100      	movs	r1, #0
 80061fa:	e7ef      	b.n	80061dc <_strtod_l+0x9c>
 80061fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80061fe:	b13a      	cbz	r2, 8006210 <_strtod_l+0xd0>
 8006200:	2135      	movs	r1, #53	@ 0x35
 8006202:	a81c      	add	r0, sp, #112	@ 0x70
 8006204:	f002 ff4a 	bl	800909c <__copybits>
 8006208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800620a:	9805      	ldr	r0, [sp, #20]
 800620c:	f002 fb18 	bl	8008840 <_Bfree>
 8006210:	3e01      	subs	r6, #1
 8006212:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006214:	2e04      	cmp	r6, #4
 8006216:	d806      	bhi.n	8006226 <_strtod_l+0xe6>
 8006218:	e8df f006 	tbb	[pc, r6]
 800621c:	201d0314 	.word	0x201d0314
 8006220:	14          	.byte	0x14
 8006221:	00          	.byte	0x00
 8006222:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006226:	05e1      	lsls	r1, r4, #23
 8006228:	bf48      	it	mi
 800622a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800622e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006232:	0d1b      	lsrs	r3, r3, #20
 8006234:	051b      	lsls	r3, r3, #20
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1bb      	bne.n	80061b2 <_strtod_l+0x72>
 800623a:	f000 fe23 	bl	8006e84 <__errno>
 800623e:	2322      	movs	r3, #34	@ 0x22
 8006240:	6003      	str	r3, [r0, #0]
 8006242:	e7b6      	b.n	80061b2 <_strtod_l+0x72>
 8006244:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800624c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006254:	e7e7      	b.n	8006226 <_strtod_l+0xe6>
 8006256:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80063d4 <_strtod_l+0x294>
 800625a:	e7e4      	b.n	8006226 <_strtod_l+0xe6>
 800625c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006260:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006264:	e7df      	b.n	8006226 <_strtod_l+0xe6>
 8006266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	9219      	str	r2, [sp, #100]	@ 0x64
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b30      	cmp	r3, #48	@ 0x30
 8006270:	d0f9      	beq.n	8006266 <_strtod_l+0x126>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d09d      	beq.n	80061b2 <_strtod_l+0x72>
 8006276:	2301      	movs	r3, #1
 8006278:	9309      	str	r3, [sp, #36]	@ 0x24
 800627a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800627c:	930c      	str	r3, [sp, #48]	@ 0x30
 800627e:	2300      	movs	r3, #0
 8006280:	9308      	str	r3, [sp, #32]
 8006282:	930a      	str	r3, [sp, #40]	@ 0x28
 8006284:	461f      	mov	r7, r3
 8006286:	220a      	movs	r2, #10
 8006288:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800628a:	7805      	ldrb	r5, [r0, #0]
 800628c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006290:	b2d9      	uxtb	r1, r3
 8006292:	2909      	cmp	r1, #9
 8006294:	d928      	bls.n	80062e8 <_strtod_l+0x1a8>
 8006296:	494e      	ldr	r1, [pc, #312]	@ (80063d0 <_strtod_l+0x290>)
 8006298:	2201      	movs	r2, #1
 800629a:	f000 fdd5 	bl	8006e48 <strncmp>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d032      	beq.n	8006308 <_strtod_l+0x1c8>
 80062a2:	2000      	movs	r0, #0
 80062a4:	462a      	mov	r2, r5
 80062a6:	4681      	mov	r9, r0
 80062a8:	463d      	mov	r5, r7
 80062aa:	4603      	mov	r3, r0
 80062ac:	2a65      	cmp	r2, #101	@ 0x65
 80062ae:	d001      	beq.n	80062b4 <_strtod_l+0x174>
 80062b0:	2a45      	cmp	r2, #69	@ 0x45
 80062b2:	d114      	bne.n	80062de <_strtod_l+0x19e>
 80062b4:	b91d      	cbnz	r5, 80062be <_strtod_l+0x17e>
 80062b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062b8:	4302      	orrs	r2, r0
 80062ba:	d095      	beq.n	80061e8 <_strtod_l+0xa8>
 80062bc:	2500      	movs	r5, #0
 80062be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80062c0:	1c62      	adds	r2, r4, #1
 80062c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80062c4:	7862      	ldrb	r2, [r4, #1]
 80062c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80062c8:	d077      	beq.n	80063ba <_strtod_l+0x27a>
 80062ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80062cc:	d07b      	beq.n	80063c6 <_strtod_l+0x286>
 80062ce:	f04f 0c00 	mov.w	ip, #0
 80062d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80062d6:	2909      	cmp	r1, #9
 80062d8:	f240 8082 	bls.w	80063e0 <_strtod_l+0x2a0>
 80062dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80062de:	f04f 0800 	mov.w	r8, #0
 80062e2:	e0a2      	b.n	800642a <_strtod_l+0x2ea>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e7c7      	b.n	8006278 <_strtod_l+0x138>
 80062e8:	2f08      	cmp	r7, #8
 80062ea:	bfd5      	itete	le
 80062ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80062ee:	9908      	ldrgt	r1, [sp, #32]
 80062f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80062f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80062f8:	f100 0001 	add.w	r0, r0, #1
 80062fc:	bfd4      	ite	le
 80062fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006300:	9308      	strgt	r3, [sp, #32]
 8006302:	3701      	adds	r7, #1
 8006304:	9019      	str	r0, [sp, #100]	@ 0x64
 8006306:	e7bf      	b.n	8006288 <_strtod_l+0x148>
 8006308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	9219      	str	r2, [sp, #100]	@ 0x64
 800630e:	785a      	ldrb	r2, [r3, #1]
 8006310:	b37f      	cbz	r7, 8006372 <_strtod_l+0x232>
 8006312:	4681      	mov	r9, r0
 8006314:	463d      	mov	r5, r7
 8006316:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800631a:	2b09      	cmp	r3, #9
 800631c:	d912      	bls.n	8006344 <_strtod_l+0x204>
 800631e:	2301      	movs	r3, #1
 8006320:	e7c4      	b.n	80062ac <_strtod_l+0x16c>
 8006322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	9219      	str	r2, [sp, #100]	@ 0x64
 8006328:	785a      	ldrb	r2, [r3, #1]
 800632a:	3001      	adds	r0, #1
 800632c:	2a30      	cmp	r2, #48	@ 0x30
 800632e:	d0f8      	beq.n	8006322 <_strtod_l+0x1e2>
 8006330:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006334:	2b08      	cmp	r3, #8
 8006336:	f200 84d3 	bhi.w	8006ce0 <_strtod_l+0xba0>
 800633a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800633c:	930c      	str	r3, [sp, #48]	@ 0x30
 800633e:	4681      	mov	r9, r0
 8006340:	2000      	movs	r0, #0
 8006342:	4605      	mov	r5, r0
 8006344:	3a30      	subs	r2, #48	@ 0x30
 8006346:	f100 0301 	add.w	r3, r0, #1
 800634a:	d02a      	beq.n	80063a2 <_strtod_l+0x262>
 800634c:	4499      	add	r9, r3
 800634e:	eb00 0c05 	add.w	ip, r0, r5
 8006352:	462b      	mov	r3, r5
 8006354:	210a      	movs	r1, #10
 8006356:	4563      	cmp	r3, ip
 8006358:	d10d      	bne.n	8006376 <_strtod_l+0x236>
 800635a:	1c69      	adds	r1, r5, #1
 800635c:	4401      	add	r1, r0
 800635e:	4428      	add	r0, r5
 8006360:	2808      	cmp	r0, #8
 8006362:	dc16      	bgt.n	8006392 <_strtod_l+0x252>
 8006364:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006366:	230a      	movs	r3, #10
 8006368:	fb03 2300 	mla	r3, r3, r0, r2
 800636c:	930a      	str	r3, [sp, #40]	@ 0x28
 800636e:	2300      	movs	r3, #0
 8006370:	e018      	b.n	80063a4 <_strtod_l+0x264>
 8006372:	4638      	mov	r0, r7
 8006374:	e7da      	b.n	800632c <_strtod_l+0x1ec>
 8006376:	2b08      	cmp	r3, #8
 8006378:	f103 0301 	add.w	r3, r3, #1
 800637c:	dc03      	bgt.n	8006386 <_strtod_l+0x246>
 800637e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006380:	434e      	muls	r6, r1
 8006382:	960a      	str	r6, [sp, #40]	@ 0x28
 8006384:	e7e7      	b.n	8006356 <_strtod_l+0x216>
 8006386:	2b10      	cmp	r3, #16
 8006388:	bfde      	ittt	le
 800638a:	9e08      	ldrle	r6, [sp, #32]
 800638c:	434e      	mulle	r6, r1
 800638e:	9608      	strle	r6, [sp, #32]
 8006390:	e7e1      	b.n	8006356 <_strtod_l+0x216>
 8006392:	280f      	cmp	r0, #15
 8006394:	dceb      	bgt.n	800636e <_strtod_l+0x22e>
 8006396:	9808      	ldr	r0, [sp, #32]
 8006398:	230a      	movs	r3, #10
 800639a:	fb03 2300 	mla	r3, r3, r0, r2
 800639e:	9308      	str	r3, [sp, #32]
 80063a0:	e7e5      	b.n	800636e <_strtod_l+0x22e>
 80063a2:	4629      	mov	r1, r5
 80063a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063a6:	1c50      	adds	r0, r2, #1
 80063a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80063aa:	7852      	ldrb	r2, [r2, #1]
 80063ac:	4618      	mov	r0, r3
 80063ae:	460d      	mov	r5, r1
 80063b0:	e7b1      	b.n	8006316 <_strtod_l+0x1d6>
 80063b2:	f04f 0900 	mov.w	r9, #0
 80063b6:	2301      	movs	r3, #1
 80063b8:	e77d      	b.n	80062b6 <_strtod_l+0x176>
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	1ca2      	adds	r2, r4, #2
 80063c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80063c2:	78a2      	ldrb	r2, [r4, #2]
 80063c4:	e785      	b.n	80062d2 <_strtod_l+0x192>
 80063c6:	f04f 0c01 	mov.w	ip, #1
 80063ca:	e7f8      	b.n	80063be <_strtod_l+0x27e>
 80063cc:	08009a00 	.word	0x08009a00
 80063d0:	080099e9 	.word	0x080099e9
 80063d4:	7ff00000 	.word	0x7ff00000
 80063d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063da:	1c51      	adds	r1, r2, #1
 80063dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80063de:	7852      	ldrb	r2, [r2, #1]
 80063e0:	2a30      	cmp	r2, #48	@ 0x30
 80063e2:	d0f9      	beq.n	80063d8 <_strtod_l+0x298>
 80063e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80063e8:	2908      	cmp	r1, #8
 80063ea:	f63f af78 	bhi.w	80062de <_strtod_l+0x19e>
 80063ee:	3a30      	subs	r2, #48	@ 0x30
 80063f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80063f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80063f6:	f04f 080a 	mov.w	r8, #10
 80063fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063fc:	1c56      	adds	r6, r2, #1
 80063fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006400:	7852      	ldrb	r2, [r2, #1]
 8006402:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006406:	f1be 0f09 	cmp.w	lr, #9
 800640a:	d939      	bls.n	8006480 <_strtod_l+0x340>
 800640c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800640e:	1a76      	subs	r6, r6, r1
 8006410:	2e08      	cmp	r6, #8
 8006412:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006416:	dc03      	bgt.n	8006420 <_strtod_l+0x2e0>
 8006418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800641a:	4588      	cmp	r8, r1
 800641c:	bfa8      	it	ge
 800641e:	4688      	movge	r8, r1
 8006420:	f1bc 0f00 	cmp.w	ip, #0
 8006424:	d001      	beq.n	800642a <_strtod_l+0x2ea>
 8006426:	f1c8 0800 	rsb	r8, r8, #0
 800642a:	2d00      	cmp	r5, #0
 800642c:	d14e      	bne.n	80064cc <_strtod_l+0x38c>
 800642e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006430:	4308      	orrs	r0, r1
 8006432:	f47f aebe 	bne.w	80061b2 <_strtod_l+0x72>
 8006436:	2b00      	cmp	r3, #0
 8006438:	f47f aed6 	bne.w	80061e8 <_strtod_l+0xa8>
 800643c:	2a69      	cmp	r2, #105	@ 0x69
 800643e:	d028      	beq.n	8006492 <_strtod_l+0x352>
 8006440:	dc25      	bgt.n	800648e <_strtod_l+0x34e>
 8006442:	2a49      	cmp	r2, #73	@ 0x49
 8006444:	d025      	beq.n	8006492 <_strtod_l+0x352>
 8006446:	2a4e      	cmp	r2, #78	@ 0x4e
 8006448:	f47f aece 	bne.w	80061e8 <_strtod_l+0xa8>
 800644c:	499b      	ldr	r1, [pc, #620]	@ (80066bc <_strtod_l+0x57c>)
 800644e:	a819      	add	r0, sp, #100	@ 0x64
 8006450:	f001 fe3c 	bl	80080cc <__match>
 8006454:	2800      	cmp	r0, #0
 8006456:	f43f aec7 	beq.w	80061e8 <_strtod_l+0xa8>
 800645a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b28      	cmp	r3, #40	@ 0x28
 8006460:	d12e      	bne.n	80064c0 <_strtod_l+0x380>
 8006462:	4997      	ldr	r1, [pc, #604]	@ (80066c0 <_strtod_l+0x580>)
 8006464:	aa1c      	add	r2, sp, #112	@ 0x70
 8006466:	a819      	add	r0, sp, #100	@ 0x64
 8006468:	f001 fe44 	bl	80080f4 <__hexnan>
 800646c:	2805      	cmp	r0, #5
 800646e:	d127      	bne.n	80064c0 <_strtod_l+0x380>
 8006470:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006472:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006476:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800647a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800647e:	e698      	b.n	80061b2 <_strtod_l+0x72>
 8006480:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006482:	fb08 2101 	mla	r1, r8, r1, r2
 8006486:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800648a:	920e      	str	r2, [sp, #56]	@ 0x38
 800648c:	e7b5      	b.n	80063fa <_strtod_l+0x2ba>
 800648e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006490:	e7da      	b.n	8006448 <_strtod_l+0x308>
 8006492:	498c      	ldr	r1, [pc, #560]	@ (80066c4 <_strtod_l+0x584>)
 8006494:	a819      	add	r0, sp, #100	@ 0x64
 8006496:	f001 fe19 	bl	80080cc <__match>
 800649a:	2800      	cmp	r0, #0
 800649c:	f43f aea4 	beq.w	80061e8 <_strtod_l+0xa8>
 80064a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064a2:	4989      	ldr	r1, [pc, #548]	@ (80066c8 <_strtod_l+0x588>)
 80064a4:	3b01      	subs	r3, #1
 80064a6:	a819      	add	r0, sp, #100	@ 0x64
 80064a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80064aa:	f001 fe0f 	bl	80080cc <__match>
 80064ae:	b910      	cbnz	r0, 80064b6 <_strtod_l+0x376>
 80064b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064b2:	3301      	adds	r3, #1
 80064b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80064b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80066d8 <_strtod_l+0x598>
 80064ba:	f04f 0a00 	mov.w	sl, #0
 80064be:	e678      	b.n	80061b2 <_strtod_l+0x72>
 80064c0:	4882      	ldr	r0, [pc, #520]	@ (80066cc <_strtod_l+0x58c>)
 80064c2:	f000 fd1d 	bl	8006f00 <nan>
 80064c6:	ec5b ab10 	vmov	sl, fp, d0
 80064ca:	e672      	b.n	80061b2 <_strtod_l+0x72>
 80064cc:	eba8 0309 	sub.w	r3, r8, r9
 80064d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	bf08      	it	eq
 80064d8:	462f      	moveq	r7, r5
 80064da:	2d10      	cmp	r5, #16
 80064dc:	462c      	mov	r4, r5
 80064de:	bfa8      	it	ge
 80064e0:	2410      	movge	r4, #16
 80064e2:	f7fa f80f 	bl	8000504 <__aeabi_ui2d>
 80064e6:	2d09      	cmp	r5, #9
 80064e8:	4682      	mov	sl, r0
 80064ea:	468b      	mov	fp, r1
 80064ec:	dc13      	bgt.n	8006516 <_strtod_l+0x3d6>
 80064ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f43f ae5e 	beq.w	80061b2 <_strtod_l+0x72>
 80064f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f8:	dd78      	ble.n	80065ec <_strtod_l+0x4ac>
 80064fa:	2b16      	cmp	r3, #22
 80064fc:	dc5f      	bgt.n	80065be <_strtod_l+0x47e>
 80064fe:	4974      	ldr	r1, [pc, #464]	@ (80066d0 <_strtod_l+0x590>)
 8006500:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	f7fa f874 	bl	80005f8 <__aeabi_dmul>
 8006510:	4682      	mov	sl, r0
 8006512:	468b      	mov	fp, r1
 8006514:	e64d      	b.n	80061b2 <_strtod_l+0x72>
 8006516:	4b6e      	ldr	r3, [pc, #440]	@ (80066d0 <_strtod_l+0x590>)
 8006518:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800651c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006520:	f7fa f86a 	bl	80005f8 <__aeabi_dmul>
 8006524:	4682      	mov	sl, r0
 8006526:	9808      	ldr	r0, [sp, #32]
 8006528:	468b      	mov	fp, r1
 800652a:	f7f9 ffeb 	bl	8000504 <__aeabi_ui2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4650      	mov	r0, sl
 8006534:	4659      	mov	r1, fp
 8006536:	f7f9 fea9 	bl	800028c <__adddf3>
 800653a:	2d0f      	cmp	r5, #15
 800653c:	4682      	mov	sl, r0
 800653e:	468b      	mov	fp, r1
 8006540:	ddd5      	ble.n	80064ee <_strtod_l+0x3ae>
 8006542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006544:	1b2c      	subs	r4, r5, r4
 8006546:	441c      	add	r4, r3
 8006548:	2c00      	cmp	r4, #0
 800654a:	f340 8096 	ble.w	800667a <_strtod_l+0x53a>
 800654e:	f014 030f 	ands.w	r3, r4, #15
 8006552:	d00a      	beq.n	800656a <_strtod_l+0x42a>
 8006554:	495e      	ldr	r1, [pc, #376]	@ (80066d0 <_strtod_l+0x590>)
 8006556:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800655a:	4652      	mov	r2, sl
 800655c:	465b      	mov	r3, fp
 800655e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006562:	f7fa f849 	bl	80005f8 <__aeabi_dmul>
 8006566:	4682      	mov	sl, r0
 8006568:	468b      	mov	fp, r1
 800656a:	f034 040f 	bics.w	r4, r4, #15
 800656e:	d073      	beq.n	8006658 <_strtod_l+0x518>
 8006570:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006574:	dd48      	ble.n	8006608 <_strtod_l+0x4c8>
 8006576:	2400      	movs	r4, #0
 8006578:	46a0      	mov	r8, r4
 800657a:	940a      	str	r4, [sp, #40]	@ 0x28
 800657c:	46a1      	mov	r9, r4
 800657e:	9a05      	ldr	r2, [sp, #20]
 8006580:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80066d8 <_strtod_l+0x598>
 8006584:	2322      	movs	r3, #34	@ 0x22
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	f04f 0a00 	mov.w	sl, #0
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	f43f ae0f 	beq.w	80061b2 <_strtod_l+0x72>
 8006594:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006596:	9805      	ldr	r0, [sp, #20]
 8006598:	f002 f952 	bl	8008840 <_Bfree>
 800659c:	9805      	ldr	r0, [sp, #20]
 800659e:	4649      	mov	r1, r9
 80065a0:	f002 f94e 	bl	8008840 <_Bfree>
 80065a4:	9805      	ldr	r0, [sp, #20]
 80065a6:	4641      	mov	r1, r8
 80065a8:	f002 f94a 	bl	8008840 <_Bfree>
 80065ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065ae:	9805      	ldr	r0, [sp, #20]
 80065b0:	f002 f946 	bl	8008840 <_Bfree>
 80065b4:	9805      	ldr	r0, [sp, #20]
 80065b6:	4621      	mov	r1, r4
 80065b8:	f002 f942 	bl	8008840 <_Bfree>
 80065bc:	e5f9      	b.n	80061b2 <_strtod_l+0x72>
 80065be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80065c4:	4293      	cmp	r3, r2
 80065c6:	dbbc      	blt.n	8006542 <_strtod_l+0x402>
 80065c8:	4c41      	ldr	r4, [pc, #260]	@ (80066d0 <_strtod_l+0x590>)
 80065ca:	f1c5 050f 	rsb	r5, r5, #15
 80065ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80065d2:	4652      	mov	r2, sl
 80065d4:	465b      	mov	r3, fp
 80065d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e0:	1b5d      	subs	r5, r3, r5
 80065e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80065e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80065ea:	e78f      	b.n	800650c <_strtod_l+0x3cc>
 80065ec:	3316      	adds	r3, #22
 80065ee:	dba8      	blt.n	8006542 <_strtod_l+0x402>
 80065f0:	4b37      	ldr	r3, [pc, #220]	@ (80066d0 <_strtod_l+0x590>)
 80065f2:	eba9 0808 	sub.w	r8, r9, r8
 80065f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80065fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80065fe:	4650      	mov	r0, sl
 8006600:	4659      	mov	r1, fp
 8006602:	f7fa f923 	bl	800084c <__aeabi_ddiv>
 8006606:	e783      	b.n	8006510 <_strtod_l+0x3d0>
 8006608:	4b32      	ldr	r3, [pc, #200]	@ (80066d4 <_strtod_l+0x594>)
 800660a:	9308      	str	r3, [sp, #32]
 800660c:	2300      	movs	r3, #0
 800660e:	1124      	asrs	r4, r4, #4
 8006610:	4650      	mov	r0, sl
 8006612:	4659      	mov	r1, fp
 8006614:	461e      	mov	r6, r3
 8006616:	2c01      	cmp	r4, #1
 8006618:	dc21      	bgt.n	800665e <_strtod_l+0x51e>
 800661a:	b10b      	cbz	r3, 8006620 <_strtod_l+0x4e0>
 800661c:	4682      	mov	sl, r0
 800661e:	468b      	mov	fp, r1
 8006620:	492c      	ldr	r1, [pc, #176]	@ (80066d4 <_strtod_l+0x594>)
 8006622:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006626:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800662a:	4652      	mov	r2, sl
 800662c:	465b      	mov	r3, fp
 800662e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006632:	f7f9 ffe1 	bl	80005f8 <__aeabi_dmul>
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <_strtod_l+0x598>)
 8006638:	460a      	mov	r2, r1
 800663a:	400b      	ands	r3, r1
 800663c:	4927      	ldr	r1, [pc, #156]	@ (80066dc <_strtod_l+0x59c>)
 800663e:	428b      	cmp	r3, r1
 8006640:	4682      	mov	sl, r0
 8006642:	d898      	bhi.n	8006576 <_strtod_l+0x436>
 8006644:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006648:	428b      	cmp	r3, r1
 800664a:	bf86      	itte	hi
 800664c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80066e0 <_strtod_l+0x5a0>
 8006650:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006654:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006658:	2300      	movs	r3, #0
 800665a:	9308      	str	r3, [sp, #32]
 800665c:	e07a      	b.n	8006754 <_strtod_l+0x614>
 800665e:	07e2      	lsls	r2, r4, #31
 8006660:	d505      	bpl.n	800666e <_strtod_l+0x52e>
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 ffc6 	bl	80005f8 <__aeabi_dmul>
 800666c:	2301      	movs	r3, #1
 800666e:	9a08      	ldr	r2, [sp, #32]
 8006670:	3208      	adds	r2, #8
 8006672:	3601      	adds	r6, #1
 8006674:	1064      	asrs	r4, r4, #1
 8006676:	9208      	str	r2, [sp, #32]
 8006678:	e7cd      	b.n	8006616 <_strtod_l+0x4d6>
 800667a:	d0ed      	beq.n	8006658 <_strtod_l+0x518>
 800667c:	4264      	negs	r4, r4
 800667e:	f014 020f 	ands.w	r2, r4, #15
 8006682:	d00a      	beq.n	800669a <_strtod_l+0x55a>
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <_strtod_l+0x590>)
 8006686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800668a:	4650      	mov	r0, sl
 800668c:	4659      	mov	r1, fp
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7fa f8db 	bl	800084c <__aeabi_ddiv>
 8006696:	4682      	mov	sl, r0
 8006698:	468b      	mov	fp, r1
 800669a:	1124      	asrs	r4, r4, #4
 800669c:	d0dc      	beq.n	8006658 <_strtod_l+0x518>
 800669e:	2c1f      	cmp	r4, #31
 80066a0:	dd20      	ble.n	80066e4 <_strtod_l+0x5a4>
 80066a2:	2400      	movs	r4, #0
 80066a4:	46a0      	mov	r8, r4
 80066a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80066a8:	46a1      	mov	r9, r4
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	2322      	movs	r3, #34	@ 0x22
 80066ae:	f04f 0a00 	mov.w	sl, #0
 80066b2:	f04f 0b00 	mov.w	fp, #0
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e768      	b.n	800658c <_strtod_l+0x44c>
 80066ba:	bf00      	nop
 80066bc:	080099bd 	.word	0x080099bd
 80066c0:	080099ec 	.word	0x080099ec
 80066c4:	080099b5 	.word	0x080099b5
 80066c8:	08009b4c 	.word	0x08009b4c
 80066cc:	08009ddb 	.word	0x08009ddb
 80066d0:	08009cd8 	.word	0x08009cd8
 80066d4:	08009cb0 	.word	0x08009cb0
 80066d8:	7ff00000 	.word	0x7ff00000
 80066dc:	7ca00000 	.word	0x7ca00000
 80066e0:	7fefffff 	.word	0x7fefffff
 80066e4:	f014 0310 	ands.w	r3, r4, #16
 80066e8:	bf18      	it	ne
 80066ea:	236a      	movne	r3, #106	@ 0x6a
 80066ec:	4ea9      	ldr	r6, [pc, #676]	@ (8006994 <_strtod_l+0x854>)
 80066ee:	9308      	str	r3, [sp, #32]
 80066f0:	4650      	mov	r0, sl
 80066f2:	4659      	mov	r1, fp
 80066f4:	2300      	movs	r3, #0
 80066f6:	07e2      	lsls	r2, r4, #31
 80066f8:	d504      	bpl.n	8006704 <_strtod_l+0x5c4>
 80066fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066fe:	f7f9 ff7b 	bl	80005f8 <__aeabi_dmul>
 8006702:	2301      	movs	r3, #1
 8006704:	1064      	asrs	r4, r4, #1
 8006706:	f106 0608 	add.w	r6, r6, #8
 800670a:	d1f4      	bne.n	80066f6 <_strtod_l+0x5b6>
 800670c:	b10b      	cbz	r3, 8006712 <_strtod_l+0x5d2>
 800670e:	4682      	mov	sl, r0
 8006710:	468b      	mov	fp, r1
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	b1b3      	cbz	r3, 8006744 <_strtod_l+0x604>
 8006716:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800671a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800671e:	2b00      	cmp	r3, #0
 8006720:	4659      	mov	r1, fp
 8006722:	dd0f      	ble.n	8006744 <_strtod_l+0x604>
 8006724:	2b1f      	cmp	r3, #31
 8006726:	dd55      	ble.n	80067d4 <_strtod_l+0x694>
 8006728:	2b34      	cmp	r3, #52	@ 0x34
 800672a:	bfde      	ittt	le
 800672c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006730:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006734:	4093      	lslle	r3, r2
 8006736:	f04f 0a00 	mov.w	sl, #0
 800673a:	bfcc      	ite	gt
 800673c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006740:	ea03 0b01 	andle.w	fp, r3, r1
 8006744:	2200      	movs	r2, #0
 8006746:	2300      	movs	r3, #0
 8006748:	4650      	mov	r0, sl
 800674a:	4659      	mov	r1, fp
 800674c:	f7fa f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006750:	2800      	cmp	r0, #0
 8006752:	d1a6      	bne.n	80066a2 <_strtod_l+0x562>
 8006754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800675a:	9805      	ldr	r0, [sp, #20]
 800675c:	462b      	mov	r3, r5
 800675e:	463a      	mov	r2, r7
 8006760:	f002 f8d6 	bl	8008910 <__s2b>
 8006764:	900a      	str	r0, [sp, #40]	@ 0x28
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f af05 	beq.w	8006576 <_strtod_l+0x436>
 800676c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800676e:	2a00      	cmp	r2, #0
 8006770:	eba9 0308 	sub.w	r3, r9, r8
 8006774:	bfa8      	it	ge
 8006776:	2300      	movge	r3, #0
 8006778:	9312      	str	r3, [sp, #72]	@ 0x48
 800677a:	2400      	movs	r4, #0
 800677c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006780:	9316      	str	r3, [sp, #88]	@ 0x58
 8006782:	46a0      	mov	r8, r4
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	9805      	ldr	r0, [sp, #20]
 8006788:	6859      	ldr	r1, [r3, #4]
 800678a:	f002 f819 	bl	80087c0 <_Balloc>
 800678e:	4681      	mov	r9, r0
 8006790:	2800      	cmp	r0, #0
 8006792:	f43f aef4 	beq.w	800657e <_strtod_l+0x43e>
 8006796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	3202      	adds	r2, #2
 800679c:	f103 010c 	add.w	r1, r3, #12
 80067a0:	0092      	lsls	r2, r2, #2
 80067a2:	300c      	adds	r0, #12
 80067a4:	f000 fb9b 	bl	8006ede <memcpy>
 80067a8:	ec4b ab10 	vmov	d0, sl, fp
 80067ac:	9805      	ldr	r0, [sp, #20]
 80067ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80067b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80067b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80067b6:	f002 fbe7 	bl	8008f88 <__d2b>
 80067ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80067bc:	2800      	cmp	r0, #0
 80067be:	f43f aede 	beq.w	800657e <_strtod_l+0x43e>
 80067c2:	9805      	ldr	r0, [sp, #20]
 80067c4:	2101      	movs	r1, #1
 80067c6:	f002 f939 	bl	8008a3c <__i2b>
 80067ca:	4680      	mov	r8, r0
 80067cc:	b948      	cbnz	r0, 80067e2 <_strtod_l+0x6a2>
 80067ce:	f04f 0800 	mov.w	r8, #0
 80067d2:	e6d4      	b.n	800657e <_strtod_l+0x43e>
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	ea03 0a0a 	and.w	sl, r3, sl
 80067e0:	e7b0      	b.n	8006744 <_strtod_l+0x604>
 80067e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80067e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	bfab      	itete	ge
 80067ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80067ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80067ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80067f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80067f2:	bfac      	ite	ge
 80067f4:	18ef      	addge	r7, r5, r3
 80067f6:	1b5e      	sublt	r6, r3, r5
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	1aed      	subs	r5, r5, r3
 80067fc:	4415      	add	r5, r2
 80067fe:	4b66      	ldr	r3, [pc, #408]	@ (8006998 <_strtod_l+0x858>)
 8006800:	3d01      	subs	r5, #1
 8006802:	429d      	cmp	r5, r3
 8006804:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006808:	da50      	bge.n	80068ac <_strtod_l+0x76c>
 800680a:	1b5b      	subs	r3, r3, r5
 800680c:	2b1f      	cmp	r3, #31
 800680e:	eba2 0203 	sub.w	r2, r2, r3
 8006812:	f04f 0101 	mov.w	r1, #1
 8006816:	dc3d      	bgt.n	8006894 <_strtod_l+0x754>
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681e:	2300      	movs	r3, #0
 8006820:	9310      	str	r3, [sp, #64]	@ 0x40
 8006822:	18bd      	adds	r5, r7, r2
 8006824:	9b08      	ldr	r3, [sp, #32]
 8006826:	42af      	cmp	r7, r5
 8006828:	4416      	add	r6, r2
 800682a:	441e      	add	r6, r3
 800682c:	463b      	mov	r3, r7
 800682e:	bfa8      	it	ge
 8006830:	462b      	movge	r3, r5
 8006832:	42b3      	cmp	r3, r6
 8006834:	bfa8      	it	ge
 8006836:	4633      	movge	r3, r6
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfc2      	ittt	gt
 800683c:	1aed      	subgt	r5, r5, r3
 800683e:	1af6      	subgt	r6, r6, r3
 8006840:	1aff      	subgt	r7, r7, r3
 8006842:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd16      	ble.n	8006876 <_strtod_l+0x736>
 8006848:	4641      	mov	r1, r8
 800684a:	9805      	ldr	r0, [sp, #20]
 800684c:	461a      	mov	r2, r3
 800684e:	f002 f9b5 	bl	8008bbc <__pow5mult>
 8006852:	4680      	mov	r8, r0
 8006854:	2800      	cmp	r0, #0
 8006856:	d0ba      	beq.n	80067ce <_strtod_l+0x68e>
 8006858:	4601      	mov	r1, r0
 800685a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800685c:	9805      	ldr	r0, [sp, #20]
 800685e:	f002 f903 	bl	8008a68 <__multiply>
 8006862:	900e      	str	r0, [sp, #56]	@ 0x38
 8006864:	2800      	cmp	r0, #0
 8006866:	f43f ae8a 	beq.w	800657e <_strtod_l+0x43e>
 800686a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800686c:	9805      	ldr	r0, [sp, #20]
 800686e:	f001 ffe7 	bl	8008840 <_Bfree>
 8006872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006874:	931a      	str	r3, [sp, #104]	@ 0x68
 8006876:	2d00      	cmp	r5, #0
 8006878:	dc1d      	bgt.n	80068b6 <_strtod_l+0x776>
 800687a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	dd23      	ble.n	80068c8 <_strtod_l+0x788>
 8006880:	4649      	mov	r1, r9
 8006882:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006884:	9805      	ldr	r0, [sp, #20]
 8006886:	f002 f999 	bl	8008bbc <__pow5mult>
 800688a:	4681      	mov	r9, r0
 800688c:	b9e0      	cbnz	r0, 80068c8 <_strtod_l+0x788>
 800688e:	f04f 0900 	mov.w	r9, #0
 8006892:	e674      	b.n	800657e <_strtod_l+0x43e>
 8006894:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006898:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800689c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80068a0:	35e2      	adds	r5, #226	@ 0xe2
 80068a2:	fa01 f305 	lsl.w	r3, r1, r5
 80068a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80068a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80068aa:	e7ba      	b.n	8006822 <_strtod_l+0x6e2>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80068b0:	2301      	movs	r3, #1
 80068b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068b4:	e7b5      	b.n	8006822 <_strtod_l+0x6e2>
 80068b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068b8:	9805      	ldr	r0, [sp, #20]
 80068ba:	462a      	mov	r2, r5
 80068bc:	f002 f9d8 	bl	8008c70 <__lshift>
 80068c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d1d9      	bne.n	800687a <_strtod_l+0x73a>
 80068c6:	e65a      	b.n	800657e <_strtod_l+0x43e>
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	dd07      	ble.n	80068dc <_strtod_l+0x79c>
 80068cc:	4649      	mov	r1, r9
 80068ce:	9805      	ldr	r0, [sp, #20]
 80068d0:	4632      	mov	r2, r6
 80068d2:	f002 f9cd 	bl	8008c70 <__lshift>
 80068d6:	4681      	mov	r9, r0
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0d8      	beq.n	800688e <_strtod_l+0x74e>
 80068dc:	2f00      	cmp	r7, #0
 80068de:	dd08      	ble.n	80068f2 <_strtod_l+0x7b2>
 80068e0:	4641      	mov	r1, r8
 80068e2:	9805      	ldr	r0, [sp, #20]
 80068e4:	463a      	mov	r2, r7
 80068e6:	f002 f9c3 	bl	8008c70 <__lshift>
 80068ea:	4680      	mov	r8, r0
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f43f ae46 	beq.w	800657e <_strtod_l+0x43e>
 80068f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068f4:	9805      	ldr	r0, [sp, #20]
 80068f6:	464a      	mov	r2, r9
 80068f8:	f002 fa42 	bl	8008d80 <__mdiff>
 80068fc:	4604      	mov	r4, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	f43f ae3d 	beq.w	800657e <_strtod_l+0x43e>
 8006904:	68c3      	ldr	r3, [r0, #12]
 8006906:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006908:	2300      	movs	r3, #0
 800690a:	60c3      	str	r3, [r0, #12]
 800690c:	4641      	mov	r1, r8
 800690e:	f002 fa1b 	bl	8008d48 <__mcmp>
 8006912:	2800      	cmp	r0, #0
 8006914:	da46      	bge.n	80069a4 <_strtod_l+0x864>
 8006916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006918:	ea53 030a 	orrs.w	r3, r3, sl
 800691c:	d16c      	bne.n	80069f8 <_strtod_l+0x8b8>
 800691e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006922:	2b00      	cmp	r3, #0
 8006924:	d168      	bne.n	80069f8 <_strtod_l+0x8b8>
 8006926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800692a:	0d1b      	lsrs	r3, r3, #20
 800692c:	051b      	lsls	r3, r3, #20
 800692e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006932:	d961      	bls.n	80069f8 <_strtod_l+0x8b8>
 8006934:	6963      	ldr	r3, [r4, #20]
 8006936:	b913      	cbnz	r3, 800693e <_strtod_l+0x7fe>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	2b01      	cmp	r3, #1
 800693c:	dd5c      	ble.n	80069f8 <_strtod_l+0x8b8>
 800693e:	4621      	mov	r1, r4
 8006940:	2201      	movs	r2, #1
 8006942:	9805      	ldr	r0, [sp, #20]
 8006944:	f002 f994 	bl	8008c70 <__lshift>
 8006948:	4641      	mov	r1, r8
 800694a:	4604      	mov	r4, r0
 800694c:	f002 f9fc 	bl	8008d48 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	dd51      	ble.n	80069f8 <_strtod_l+0x8b8>
 8006954:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006958:	9a08      	ldr	r2, [sp, #32]
 800695a:	0d1b      	lsrs	r3, r3, #20
 800695c:	051b      	lsls	r3, r3, #20
 800695e:	2a00      	cmp	r2, #0
 8006960:	d06b      	beq.n	8006a3a <_strtod_l+0x8fa>
 8006962:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006966:	d868      	bhi.n	8006a3a <_strtod_l+0x8fa>
 8006968:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800696c:	f67f ae9d 	bls.w	80066aa <_strtod_l+0x56a>
 8006970:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <_strtod_l+0x85c>)
 8006972:	4650      	mov	r0, sl
 8006974:	4659      	mov	r1, fp
 8006976:	2200      	movs	r2, #0
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	4b08      	ldr	r3, [pc, #32]	@ (80069a0 <_strtod_l+0x860>)
 800697e:	400b      	ands	r3, r1
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	2b00      	cmp	r3, #0
 8006986:	f47f ae05 	bne.w	8006594 <_strtod_l+0x454>
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	2322      	movs	r3, #34	@ 0x22
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e600      	b.n	8006594 <_strtod_l+0x454>
 8006992:	bf00      	nop
 8006994:	08009a18 	.word	0x08009a18
 8006998:	fffffc02 	.word	0xfffffc02
 800699c:	39500000 	.word	0x39500000
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80069a8:	d165      	bne.n	8006a76 <_strtod_l+0x936>
 80069aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80069ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069b0:	b35a      	cbz	r2, 8006a0a <_strtod_l+0x8ca>
 80069b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006c30 <_strtod_l+0xaf0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d12b      	bne.n	8006a10 <_strtod_l+0x8d0>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	4651      	mov	r1, sl
 80069bc:	b303      	cbz	r3, 8006a00 <_strtod_l+0x8c0>
 80069be:	4b9d      	ldr	r3, [pc, #628]	@ (8006c34 <_strtod_l+0xaf4>)
 80069c0:	465a      	mov	r2, fp
 80069c2:	4013      	ands	r3, r2
 80069c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069cc:	d81b      	bhi.n	8006a06 <_strtod_l+0x8c6>
 80069ce:	0d1b      	lsrs	r3, r3, #20
 80069d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	4299      	cmp	r1, r3
 80069da:	d119      	bne.n	8006a10 <_strtod_l+0x8d0>
 80069dc:	4b96      	ldr	r3, [pc, #600]	@ (8006c38 <_strtod_l+0xaf8>)
 80069de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d102      	bne.n	80069ea <_strtod_l+0x8aa>
 80069e4:	3101      	adds	r1, #1
 80069e6:	f43f adca 	beq.w	800657e <_strtod_l+0x43e>
 80069ea:	4b92      	ldr	r3, [pc, #584]	@ (8006c34 <_strtod_l+0xaf4>)
 80069ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ee:	401a      	ands	r2, r3
 80069f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80069f4:	f04f 0a00 	mov.w	sl, #0
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1b8      	bne.n	8006970 <_strtod_l+0x830>
 80069fe:	e5c9      	b.n	8006594 <_strtod_l+0x454>
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a04:	e7e8      	b.n	80069d8 <_strtod_l+0x898>
 8006a06:	4613      	mov	r3, r2
 8006a08:	e7e6      	b.n	80069d8 <_strtod_l+0x898>
 8006a0a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a0e:	d0a1      	beq.n	8006954 <_strtod_l+0x814>
 8006a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a12:	b1db      	cbz	r3, 8006a4c <_strtod_l+0x90c>
 8006a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a16:	4213      	tst	r3, r2
 8006a18:	d0ee      	beq.n	80069f8 <_strtod_l+0x8b8>
 8006a1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a1c:	9a08      	ldr	r2, [sp, #32]
 8006a1e:	4650      	mov	r0, sl
 8006a20:	4659      	mov	r1, fp
 8006a22:	b1bb      	cbz	r3, 8006a54 <_strtod_l+0x914>
 8006a24:	f7ff fb6c 	bl	8006100 <sulp>
 8006a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a2c:	ec53 2b10 	vmov	r2, r3, d0
 8006a30:	f7f9 fc2c 	bl	800028c <__adddf3>
 8006a34:	4682      	mov	sl, r0
 8006a36:	468b      	mov	fp, r1
 8006a38:	e7de      	b.n	80069f8 <_strtod_l+0x8b8>
 8006a3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006a3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006a42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006a46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006a4a:	e7d5      	b.n	80069f8 <_strtod_l+0x8b8>
 8006a4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a4e:	ea13 0f0a 	tst.w	r3, sl
 8006a52:	e7e1      	b.n	8006a18 <_strtod_l+0x8d8>
 8006a54:	f7ff fb54 	bl	8006100 <sulp>
 8006a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a5c:	ec53 2b10 	vmov	r2, r3, d0
 8006a60:	f7f9 fc12 	bl	8000288 <__aeabi_dsub>
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4682      	mov	sl, r0
 8006a6a:	468b      	mov	fp, r1
 8006a6c:	f7fa f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0c1      	beq.n	80069f8 <_strtod_l+0x8b8>
 8006a74:	e619      	b.n	80066aa <_strtod_l+0x56a>
 8006a76:	4641      	mov	r1, r8
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f002 fadd 	bl	8009038 <__ratio>
 8006a7e:	ec57 6b10 	vmov	r6, r7, d0
 8006a82:	2200      	movs	r2, #0
 8006a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7fa f830 	bl	8000af0 <__aeabi_dcmple>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d06f      	beq.n	8006b74 <_strtod_l+0xa34>
 8006a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d17a      	bne.n	8006b90 <_strtod_l+0xa50>
 8006a9a:	f1ba 0f00 	cmp.w	sl, #0
 8006a9e:	d158      	bne.n	8006b52 <_strtod_l+0xa12>
 8006aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d15a      	bne.n	8006b60 <_strtod_l+0xa20>
 8006aaa:	4b64      	ldr	r3, [pc, #400]	@ (8006c3c <_strtod_l+0xafc>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7fa f813 	bl	8000adc <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d159      	bne.n	8006b6e <_strtod_l+0xa2e>
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	4b60      	ldr	r3, [pc, #384]	@ (8006c40 <_strtod_l+0xb00>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f7f9 fd99 	bl	80005f8 <__aeabi_dmul>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460f      	mov	r7, r1
 8006aca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006ace:	9606      	str	r6, [sp, #24]
 8006ad0:	9307      	str	r3, [sp, #28]
 8006ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ad6:	4d57      	ldr	r5, [pc, #348]	@ (8006c34 <_strtod_l+0xaf4>)
 8006ad8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ade:	401d      	ands	r5, r3
 8006ae0:	4b58      	ldr	r3, [pc, #352]	@ (8006c44 <_strtod_l+0xb04>)
 8006ae2:	429d      	cmp	r5, r3
 8006ae4:	f040 80b2 	bne.w	8006c4c <_strtod_l+0xb0c>
 8006ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006aee:	ec4b ab10 	vmov	d0, sl, fp
 8006af2:	f002 f9d9 	bl	8008ea8 <__ulp>
 8006af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006afa:	ec51 0b10 	vmov	r0, r1, d0
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	4652      	mov	r2, sl
 8006b04:	465b      	mov	r3, fp
 8006b06:	f7f9 fbc1 	bl	800028c <__adddf3>
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4949      	ldr	r1, [pc, #292]	@ (8006c34 <_strtod_l+0xaf4>)
 8006b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8006c48 <_strtod_l+0xb08>)
 8006b10:	4019      	ands	r1, r3
 8006b12:	4291      	cmp	r1, r2
 8006b14:	4682      	mov	sl, r0
 8006b16:	d942      	bls.n	8006b9e <_strtod_l+0xa5e>
 8006b18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b1a:	4b47      	ldr	r3, [pc, #284]	@ (8006c38 <_strtod_l+0xaf8>)
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d103      	bne.n	8006b28 <_strtod_l+0x9e8>
 8006b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b22:	3301      	adds	r3, #1
 8006b24:	f43f ad2b 	beq.w	800657e <_strtod_l+0x43e>
 8006b28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006c38 <_strtod_l+0xaf8>
 8006b2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006b30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b32:	9805      	ldr	r0, [sp, #20]
 8006b34:	f001 fe84 	bl	8008840 <_Bfree>
 8006b38:	9805      	ldr	r0, [sp, #20]
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f001 fe80 	bl	8008840 <_Bfree>
 8006b40:	9805      	ldr	r0, [sp, #20]
 8006b42:	4641      	mov	r1, r8
 8006b44:	f001 fe7c 	bl	8008840 <_Bfree>
 8006b48:	9805      	ldr	r0, [sp, #20]
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	f001 fe78 	bl	8008840 <_Bfree>
 8006b50:	e618      	b.n	8006784 <_strtod_l+0x644>
 8006b52:	f1ba 0f01 	cmp.w	sl, #1
 8006b56:	d103      	bne.n	8006b60 <_strtod_l+0xa20>
 8006b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f43f ada5 	beq.w	80066aa <_strtod_l+0x56a>
 8006b60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006c10 <_strtod_l+0xad0>
 8006b64:	4f35      	ldr	r7, [pc, #212]	@ (8006c3c <_strtod_l+0xafc>)
 8006b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	e7b1      	b.n	8006ad2 <_strtod_l+0x992>
 8006b6e:	4f34      	ldr	r7, [pc, #208]	@ (8006c40 <_strtod_l+0xb00>)
 8006b70:	2600      	movs	r6, #0
 8006b72:	e7aa      	b.n	8006aca <_strtod_l+0x98a>
 8006b74:	4b32      	ldr	r3, [pc, #200]	@ (8006c40 <_strtod_l+0xb00>)
 8006b76:	4630      	mov	r0, r6
 8006b78:	4639      	mov	r1, r7
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f7f9 fd3c 	bl	80005f8 <__aeabi_dmul>
 8006b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d09f      	beq.n	8006aca <_strtod_l+0x98a>
 8006b8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006b8e:	e7a0      	b.n	8006ad2 <_strtod_l+0x992>
 8006b90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006c18 <_strtod_l+0xad8>
 8006b94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b98:	ec57 6b17 	vmov	r6, r7, d7
 8006b9c:	e799      	b.n	8006ad2 <_strtod_l+0x992>
 8006b9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1c1      	bne.n	8006b30 <_strtod_l+0x9f0>
 8006bac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	051b      	lsls	r3, r3, #20
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	d1bb      	bne.n	8006b30 <_strtod_l+0x9f0>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7fa f87c 	bl	8000cb8 <__aeabi_d2lz>
 8006bc0:	f7f9 fcec 	bl	800059c <__aeabi_l2d>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4630      	mov	r0, r6
 8006bca:	4639      	mov	r1, r7
 8006bcc:	f7f9 fb5c 	bl	8000288 <__aeabi_dsub>
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006bd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bde:	ea46 060a 	orr.w	r6, r6, sl
 8006be2:	431e      	orrs	r6, r3
 8006be4:	d06f      	beq.n	8006cc6 <_strtod_l+0xb86>
 8006be6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c20 <_strtod_l+0xae0>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 ff76 	bl	8000adc <__aeabi_dcmplt>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f47f accf 	bne.w	8006594 <_strtod_l+0x454>
 8006bf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006c28 <_strtod_l+0xae8>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c00:	f7f9 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d093      	beq.n	8006b30 <_strtod_l+0x9f0>
 8006c08:	e4c4      	b.n	8006594 <_strtod_l+0x454>
 8006c0a:	bf00      	nop
 8006c0c:	f3af 8000 	nop.w
 8006c10:	00000000 	.word	0x00000000
 8006c14:	bff00000 	.word	0xbff00000
 8006c18:	00000000 	.word	0x00000000
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	94a03595 	.word	0x94a03595
 8006c24:	3fdfffff 	.word	0x3fdfffff
 8006c28:	35afe535 	.word	0x35afe535
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	000fffff 	.word	0x000fffff
 8006c34:	7ff00000 	.word	0x7ff00000
 8006c38:	7fefffff 	.word	0x7fefffff
 8006c3c:	3ff00000 	.word	0x3ff00000
 8006c40:	3fe00000 	.word	0x3fe00000
 8006c44:	7fe00000 	.word	0x7fe00000
 8006c48:	7c9fffff 	.word	0x7c9fffff
 8006c4c:	9b08      	ldr	r3, [sp, #32]
 8006c4e:	b323      	cbz	r3, 8006c9a <_strtod_l+0xb5a>
 8006c50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006c54:	d821      	bhi.n	8006c9a <_strtod_l+0xb5a>
 8006c56:	a328      	add	r3, pc, #160	@ (adr r3, 8006cf8 <_strtod_l+0xbb8>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 ff46 	bl	8000af0 <__aeabi_dcmple>
 8006c64:	b1a0      	cbz	r0, 8006c90 <_strtod_l+0xb50>
 8006c66:	4639      	mov	r1, r7
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f7f9 ff9d 	bl	8000ba8 <__aeabi_d2uiz>
 8006c6e:	2801      	cmp	r0, #1
 8006c70:	bf38      	it	cc
 8006c72:	2001      	movcc	r0, #1
 8006c74:	f7f9 fc46 	bl	8000504 <__aeabi_ui2d>
 8006c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	b9fb      	cbnz	r3, 8006cc0 <_strtod_l+0xb80>
 8006c80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c84:	9014      	str	r0, [sp, #80]	@ 0x50
 8006c86:	9315      	str	r3, [sp, #84]	@ 0x54
 8006c88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006c8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006c96:	1b5b      	subs	r3, r3, r5
 8006c98:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ca2:	f002 f901 	bl	8008ea8 <__ulp>
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	ec53 2b10 	vmov	r2, r3, d0
 8006cac:	4659      	mov	r1, fp
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006cb6:	f7f9 fae9 	bl	800028c <__adddf3>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	e770      	b.n	8006ba2 <_strtod_l+0xa62>
 8006cc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006cc4:	e7e0      	b.n	8006c88 <_strtod_l+0xb48>
 8006cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d00 <_strtod_l+0xbc0>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 ff06 	bl	8000adc <__aeabi_dcmplt>
 8006cd0:	e798      	b.n	8006c04 <_strtod_l+0xac4>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	f7ff ba6d 	b.w	80061ba <_strtod_l+0x7a>
 8006ce0:	2a65      	cmp	r2, #101	@ 0x65
 8006ce2:	f43f ab66 	beq.w	80063b2 <_strtod_l+0x272>
 8006ce6:	2a45      	cmp	r2, #69	@ 0x45
 8006ce8:	f43f ab63 	beq.w	80063b2 <_strtod_l+0x272>
 8006cec:	2301      	movs	r3, #1
 8006cee:	f7ff bb9e 	b.w	800642e <_strtod_l+0x2ee>
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	ffc00000 	.word	0xffc00000
 8006cfc:	41dfffff 	.word	0x41dfffff
 8006d00:	94a03595 	.word	0x94a03595
 8006d04:	3fcfffff 	.word	0x3fcfffff

08006d08 <_strtod_r>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	@ (8006d10 <_strtod_r+0x8>)
 8006d0a:	f7ff ba19 	b.w	8006140 <_strtod_l>
 8006d0e:	bf00      	nop
 8006d10:	20000018 	.word	0x20000018

08006d14 <_strtol_l.constprop.0>:
 8006d14:	2b24      	cmp	r3, #36	@ 0x24
 8006d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1a:	4686      	mov	lr, r0
 8006d1c:	4690      	mov	r8, r2
 8006d1e:	d801      	bhi.n	8006d24 <_strtol_l.constprop.0+0x10>
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d106      	bne.n	8006d32 <_strtol_l.constprop.0+0x1e>
 8006d24:	f000 f8ae 	bl	8006e84 <__errno>
 8006d28:	2316      	movs	r3, #22
 8006d2a:	6003      	str	r3, [r0, #0]
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d32:	4834      	ldr	r0, [pc, #208]	@ (8006e04 <_strtol_l.constprop.0+0xf0>)
 8006d34:	460d      	mov	r5, r1
 8006d36:	462a      	mov	r2, r5
 8006d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d3c:	5d06      	ldrb	r6, [r0, r4]
 8006d3e:	f016 0608 	ands.w	r6, r6, #8
 8006d42:	d1f8      	bne.n	8006d36 <_strtol_l.constprop.0+0x22>
 8006d44:	2c2d      	cmp	r4, #45	@ 0x2d
 8006d46:	d12d      	bne.n	8006da4 <_strtol_l.constprop.0+0x90>
 8006d48:	782c      	ldrb	r4, [r5, #0]
 8006d4a:	2601      	movs	r6, #1
 8006d4c:	1c95      	adds	r5, r2, #2
 8006d4e:	f033 0210 	bics.w	r2, r3, #16
 8006d52:	d109      	bne.n	8006d68 <_strtol_l.constprop.0+0x54>
 8006d54:	2c30      	cmp	r4, #48	@ 0x30
 8006d56:	d12a      	bne.n	8006dae <_strtol_l.constprop.0+0x9a>
 8006d58:	782a      	ldrb	r2, [r5, #0]
 8006d5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d5e:	2a58      	cmp	r2, #88	@ 0x58
 8006d60:	d125      	bne.n	8006dae <_strtol_l.constprop.0+0x9a>
 8006d62:	786c      	ldrb	r4, [r5, #1]
 8006d64:	2310      	movs	r3, #16
 8006d66:	3502      	adds	r5, #2
 8006d68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006d6c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006d70:	2200      	movs	r2, #0
 8006d72:	fbbc f9f3 	udiv	r9, ip, r3
 8006d76:	4610      	mov	r0, r2
 8006d78:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006d80:	2f09      	cmp	r7, #9
 8006d82:	d81b      	bhi.n	8006dbc <_strtol_l.constprop.0+0xa8>
 8006d84:	463c      	mov	r4, r7
 8006d86:	42a3      	cmp	r3, r4
 8006d88:	dd27      	ble.n	8006dda <_strtol_l.constprop.0+0xc6>
 8006d8a:	1c57      	adds	r7, r2, #1
 8006d8c:	d007      	beq.n	8006d9e <_strtol_l.constprop.0+0x8a>
 8006d8e:	4581      	cmp	r9, r0
 8006d90:	d320      	bcc.n	8006dd4 <_strtol_l.constprop.0+0xc0>
 8006d92:	d101      	bne.n	8006d98 <_strtol_l.constprop.0+0x84>
 8006d94:	45a2      	cmp	sl, r4
 8006d96:	db1d      	blt.n	8006dd4 <_strtol_l.constprop.0+0xc0>
 8006d98:	fb00 4003 	mla	r0, r0, r3, r4
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006da2:	e7eb      	b.n	8006d7c <_strtol_l.constprop.0+0x68>
 8006da4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006da6:	bf04      	itt	eq
 8006da8:	782c      	ldrbeq	r4, [r5, #0]
 8006daa:	1c95      	addeq	r5, r2, #2
 8006dac:	e7cf      	b.n	8006d4e <_strtol_l.constprop.0+0x3a>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1da      	bne.n	8006d68 <_strtol_l.constprop.0+0x54>
 8006db2:	2c30      	cmp	r4, #48	@ 0x30
 8006db4:	bf0c      	ite	eq
 8006db6:	2308      	moveq	r3, #8
 8006db8:	230a      	movne	r3, #10
 8006dba:	e7d5      	b.n	8006d68 <_strtol_l.constprop.0+0x54>
 8006dbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006dc0:	2f19      	cmp	r7, #25
 8006dc2:	d801      	bhi.n	8006dc8 <_strtol_l.constprop.0+0xb4>
 8006dc4:	3c37      	subs	r4, #55	@ 0x37
 8006dc6:	e7de      	b.n	8006d86 <_strtol_l.constprop.0+0x72>
 8006dc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006dcc:	2f19      	cmp	r7, #25
 8006dce:	d804      	bhi.n	8006dda <_strtol_l.constprop.0+0xc6>
 8006dd0:	3c57      	subs	r4, #87	@ 0x57
 8006dd2:	e7d8      	b.n	8006d86 <_strtol_l.constprop.0+0x72>
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dd8:	e7e1      	b.n	8006d9e <_strtol_l.constprop.0+0x8a>
 8006dda:	1c53      	adds	r3, r2, #1
 8006ddc:	d108      	bne.n	8006df0 <_strtol_l.constprop.0+0xdc>
 8006dde:	2322      	movs	r3, #34	@ 0x22
 8006de0:	f8ce 3000 	str.w	r3, [lr]
 8006de4:	4660      	mov	r0, ip
 8006de6:	f1b8 0f00 	cmp.w	r8, #0
 8006dea:	d0a0      	beq.n	8006d2e <_strtol_l.constprop.0+0x1a>
 8006dec:	1e69      	subs	r1, r5, #1
 8006dee:	e006      	b.n	8006dfe <_strtol_l.constprop.0+0xea>
 8006df0:	b106      	cbz	r6, 8006df4 <_strtol_l.constprop.0+0xe0>
 8006df2:	4240      	negs	r0, r0
 8006df4:	f1b8 0f00 	cmp.w	r8, #0
 8006df8:	d099      	beq.n	8006d2e <_strtol_l.constprop.0+0x1a>
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	d1f6      	bne.n	8006dec <_strtol_l.constprop.0+0xd8>
 8006dfe:	f8c8 1000 	str.w	r1, [r8]
 8006e02:	e794      	b.n	8006d2e <_strtol_l.constprop.0+0x1a>
 8006e04:	08009a49 	.word	0x08009a49

08006e08 <_strtol_r>:
 8006e08:	f7ff bf84 	b.w	8006d14 <_strtol_l.constprop.0>

08006e0c <_fwalk_sglue>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	4607      	mov	r7, r0
 8006e12:	4688      	mov	r8, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	2600      	movs	r6, #0
 8006e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e20:	d505      	bpl.n	8006e2e <_fwalk_sglue+0x22>
 8006e22:	6824      	ldr	r4, [r4, #0]
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	d1f7      	bne.n	8006e18 <_fwalk_sglue+0xc>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d907      	bls.n	8006e44 <_fwalk_sglue+0x38>
 8006e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	d003      	beq.n	8006e44 <_fwalk_sglue+0x38>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4638      	mov	r0, r7
 8006e40:	47c0      	blx	r8
 8006e42:	4306      	orrs	r6, r0
 8006e44:	3568      	adds	r5, #104	@ 0x68
 8006e46:	e7e9      	b.n	8006e1c <_fwalk_sglue+0x10>

08006e48 <strncmp>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	b16a      	cbz	r2, 8006e68 <strncmp+0x20>
 8006e4c:	3901      	subs	r1, #1
 8006e4e:	1884      	adds	r4, r0, r2
 8006e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d103      	bne.n	8006e64 <strncmp+0x1c>
 8006e5c:	42a0      	cmp	r0, r4
 8006e5e:	d001      	beq.n	8006e64 <strncmp+0x1c>
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1f5      	bne.n	8006e50 <strncmp+0x8>
 8006e64:	1ad0      	subs	r0, r2, r3
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	4610      	mov	r0, r2
 8006e6a:	e7fc      	b.n	8006e66 <strncmp+0x1e>

08006e6c <memset>:
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	@ (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000108 	.word	0x20000108

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000184 	.word	0x20000184

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4d0d      	ldr	r5, [pc, #52]	@ (8006ec8 <__libc_init_array+0x38>)
 8006e94:	4c0d      	ldr	r4, [pc, #52]	@ (8006ecc <__libc_init_array+0x3c>)
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	42a6      	cmp	r6, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed0 <__libc_init_array+0x40>)
 8006ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed4 <__libc_init_array+0x44>)
 8006ea4:	f002 fd66 	bl	8009974 <_init>
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	2600      	movs	r6, #0
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb8:	4798      	blx	r3
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec2:	4798      	blx	r3
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	08009de4 	.word	0x08009de4
 8006ecc:	08009de4 	.word	0x08009de4
 8006ed0:	08009de4 	.word	0x08009de4
 8006ed4:	08009de8 	.word	0x08009de8

08006ed8 <__retarget_lock_init_recursive>:
 8006ed8:	4770      	bx	lr

08006eda <__retarget_lock_acquire_recursive>:
 8006eda:	4770      	bx	lr

08006edc <__retarget_lock_release_recursive>:
 8006edc:	4770      	bx	lr

08006ede <memcpy>:
 8006ede:	440a      	add	r2, r1
 8006ee0:	4291      	cmp	r1, r2
 8006ee2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ee6:	d100      	bne.n	8006eea <memcpy+0xc>
 8006ee8:	4770      	bx	lr
 8006eea:	b510      	push	{r4, lr}
 8006eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef4:	4291      	cmp	r1, r2
 8006ef6:	d1f9      	bne.n	8006eec <memcpy+0xe>
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	0000      	movs	r0, r0
 8006efc:	0000      	movs	r0, r0
	...

08006f00 <nan>:
 8006f00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006f08 <nan+0x8>
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	00000000 	.word	0x00000000
 8006f0c:	7ff80000 	.word	0x7ff80000

08006f10 <nanf>:
 8006f10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f18 <nanf+0x8>
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	7fc00000 	.word	0x7fc00000

08006f1c <quorem>:
 8006f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	6903      	ldr	r3, [r0, #16]
 8006f22:	690c      	ldr	r4, [r1, #16]
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	4607      	mov	r7, r0
 8006f28:	db7e      	blt.n	8007028 <quorem+0x10c>
 8006f2a:	3c01      	subs	r4, #1
 8006f2c:	f101 0814 	add.w	r8, r1, #20
 8006f30:	00a3      	lsls	r3, r4, #2
 8006f32:	f100 0514 	add.w	r5, r0, #20
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f46:	3301      	adds	r3, #1
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f52:	d32e      	bcc.n	8006fb2 <quorem+0x96>
 8006f54:	f04f 0a00 	mov.w	sl, #0
 8006f58:	46c4      	mov	ip, r8
 8006f5a:	46ae      	mov	lr, r5
 8006f5c:	46d3      	mov	fp, sl
 8006f5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f62:	b298      	uxth	r0, r3
 8006f64:	fb06 a000 	mla	r0, r6, r0, sl
 8006f68:	0c02      	lsrs	r2, r0, #16
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	fb06 2303 	mla	r3, r6, r3, r2
 8006f70:	f8de 2000 	ldr.w	r2, [lr]
 8006f74:	b280      	uxth	r0, r0
 8006f76:	b292      	uxth	r2, r2
 8006f78:	1a12      	subs	r2, r2, r0
 8006f7a:	445a      	add	r2, fp
 8006f7c:	f8de 0000 	ldr.w	r0, [lr]
 8006f80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f94:	45e1      	cmp	r9, ip
 8006f96:	f84e 2b04 	str.w	r2, [lr], #4
 8006f9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f9e:	d2de      	bcs.n	8006f5e <quorem+0x42>
 8006fa0:	9b00      	ldr	r3, [sp, #0]
 8006fa2:	58eb      	ldr	r3, [r5, r3]
 8006fa4:	b92b      	cbnz	r3, 8006fb2 <quorem+0x96>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	429d      	cmp	r5, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	d32f      	bcc.n	8007010 <quorem+0xf4>
 8006fb0:	613c      	str	r4, [r7, #16]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f001 fec8 	bl	8008d48 <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	db25      	blt.n	8007008 <quorem+0xec>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fc4:	f8d1 c000 	ldr.w	ip, [r1]
 8006fc8:	fa1f fe82 	uxth.w	lr, r2
 8006fcc:	fa1f f38c 	uxth.w	r3, ip
 8006fd0:	eba3 030e 	sub.w	r3, r3, lr
 8006fd4:	4403      	add	r3, r0
 8006fd6:	0c12      	lsrs	r2, r2, #16
 8006fd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fdc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe6:	45c1      	cmp	r9, r8
 8006fe8:	f841 3b04 	str.w	r3, [r1], #4
 8006fec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ff0:	d2e6      	bcs.n	8006fc0 <quorem+0xa4>
 8006ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ffa:	b922      	cbnz	r2, 8007006 <quorem+0xea>
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	429d      	cmp	r5, r3
 8007000:	461a      	mov	r2, r3
 8007002:	d30b      	bcc.n	800701c <quorem+0x100>
 8007004:	613c      	str	r4, [r7, #16]
 8007006:	3601      	adds	r6, #1
 8007008:	4630      	mov	r0, r6
 800700a:	b003      	add	sp, #12
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	3b04      	subs	r3, #4
 8007014:	2a00      	cmp	r2, #0
 8007016:	d1cb      	bne.n	8006fb0 <quorem+0x94>
 8007018:	3c01      	subs	r4, #1
 800701a:	e7c6      	b.n	8006faa <quorem+0x8e>
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	3b04      	subs	r3, #4
 8007020:	2a00      	cmp	r2, #0
 8007022:	d1ef      	bne.n	8007004 <quorem+0xe8>
 8007024:	3c01      	subs	r4, #1
 8007026:	e7ea      	b.n	8006ffe <quorem+0xe2>
 8007028:	2000      	movs	r0, #0
 800702a:	e7ee      	b.n	800700a <quorem+0xee>
 800702c:	0000      	movs	r0, r0
	...

08007030 <_dtoa_r>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	69c7      	ldr	r7, [r0, #28]
 8007036:	b099      	sub	sp, #100	@ 0x64
 8007038:	ed8d 0b02 	vstr	d0, [sp, #8]
 800703c:	ec55 4b10 	vmov	r4, r5, d0
 8007040:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007042:	9109      	str	r1, [sp, #36]	@ 0x24
 8007044:	4683      	mov	fp, r0
 8007046:	920e      	str	r2, [sp, #56]	@ 0x38
 8007048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800704a:	b97f      	cbnz	r7, 800706c <_dtoa_r+0x3c>
 800704c:	2010      	movs	r0, #16
 800704e:	f001 fa43 	bl	80084d8 <malloc>
 8007052:	4602      	mov	r2, r0
 8007054:	f8cb 001c 	str.w	r0, [fp, #28]
 8007058:	b920      	cbnz	r0, 8007064 <_dtoa_r+0x34>
 800705a:	4ba7      	ldr	r3, [pc, #668]	@ (80072f8 <_dtoa_r+0x2c8>)
 800705c:	21ef      	movs	r1, #239	@ 0xef
 800705e:	48a7      	ldr	r0, [pc, #668]	@ (80072fc <_dtoa_r+0x2cc>)
 8007060:	f002 f94e 	bl	8009300 <__assert_func>
 8007064:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007068:	6007      	str	r7, [r0, #0]
 800706a:	60c7      	str	r7, [r0, #12]
 800706c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	b159      	cbz	r1, 800708c <_dtoa_r+0x5c>
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	604a      	str	r2, [r1, #4]
 8007078:	2301      	movs	r3, #1
 800707a:	4093      	lsls	r3, r2
 800707c:	608b      	str	r3, [r1, #8]
 800707e:	4658      	mov	r0, fp
 8007080:	f001 fbde 	bl	8008840 <_Bfree>
 8007084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	1e2b      	subs	r3, r5, #0
 800708e:	bfb9      	ittee	lt
 8007090:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007094:	9303      	strlt	r3, [sp, #12]
 8007096:	2300      	movge	r3, #0
 8007098:	6033      	strge	r3, [r6, #0]
 800709a:	9f03      	ldr	r7, [sp, #12]
 800709c:	4b98      	ldr	r3, [pc, #608]	@ (8007300 <_dtoa_r+0x2d0>)
 800709e:	bfbc      	itt	lt
 80070a0:	2201      	movlt	r2, #1
 80070a2:	6032      	strlt	r2, [r6, #0]
 80070a4:	43bb      	bics	r3, r7
 80070a6:	d112      	bne.n	80070ce <_dtoa_r+0x9e>
 80070a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070b4:	4323      	orrs	r3, r4
 80070b6:	f000 854d 	beq.w	8007b54 <_dtoa_r+0xb24>
 80070ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007314 <_dtoa_r+0x2e4>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 854f 	beq.w	8007b64 <_dtoa_r+0xb34>
 80070c6:	f10a 0303 	add.w	r3, sl, #3
 80070ca:	f000 bd49 	b.w	8007b60 <_dtoa_r+0xb30>
 80070ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	ec51 0b17 	vmov	r0, r1, d7
 80070d8:	2300      	movs	r3, #0
 80070da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80070de:	f7f9 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e2:	4680      	mov	r8, r0
 80070e4:	b158      	cbz	r0, 80070fe <_dtoa_r+0xce>
 80070e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070e8:	2301      	movs	r3, #1
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070ee:	b113      	cbz	r3, 80070f6 <_dtoa_r+0xc6>
 80070f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070f2:	4b84      	ldr	r3, [pc, #528]	@ (8007304 <_dtoa_r+0x2d4>)
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007318 <_dtoa_r+0x2e8>
 80070fa:	f000 bd33 	b.w	8007b64 <_dtoa_r+0xb34>
 80070fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007102:	aa16      	add	r2, sp, #88	@ 0x58
 8007104:	a917      	add	r1, sp, #92	@ 0x5c
 8007106:	4658      	mov	r0, fp
 8007108:	f001 ff3e 	bl	8008f88 <__d2b>
 800710c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007110:	4681      	mov	r9, r0
 8007112:	2e00      	cmp	r6, #0
 8007114:	d077      	beq.n	8007206 <_dtoa_r+0x1d6>
 8007116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007118:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800711c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007124:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007128:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800712c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007130:	4619      	mov	r1, r3
 8007132:	2200      	movs	r2, #0
 8007134:	4b74      	ldr	r3, [pc, #464]	@ (8007308 <_dtoa_r+0x2d8>)
 8007136:	f7f9 f8a7 	bl	8000288 <__aeabi_dsub>
 800713a:	a369      	add	r3, pc, #420	@ (adr r3, 80072e0 <_dtoa_r+0x2b0>)
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f7f9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8007144:	a368      	add	r3, pc, #416	@ (adr r3, 80072e8 <_dtoa_r+0x2b8>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f89f 	bl	800028c <__adddf3>
 800714e:	4604      	mov	r4, r0
 8007150:	4630      	mov	r0, r6
 8007152:	460d      	mov	r5, r1
 8007154:	f7f9 f9e6 	bl	8000524 <__aeabi_i2d>
 8007158:	a365      	add	r3, pc, #404	@ (adr r3, 80072f0 <_dtoa_r+0x2c0>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 fa4b 	bl	80005f8 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	f7f9 f88f 	bl	800028c <__adddf3>
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	f7f9 fcf1 	bl	8000b58 <__aeabi_d2iz>
 8007176:	2200      	movs	r2, #0
 8007178:	4607      	mov	r7, r0
 800717a:	2300      	movs	r3, #0
 800717c:	4620      	mov	r0, r4
 800717e:	4629      	mov	r1, r5
 8007180:	f7f9 fcac 	bl	8000adc <__aeabi_dcmplt>
 8007184:	b140      	cbz	r0, 8007198 <_dtoa_r+0x168>
 8007186:	4638      	mov	r0, r7
 8007188:	f7f9 f9cc 	bl	8000524 <__aeabi_i2d>
 800718c:	4622      	mov	r2, r4
 800718e:	462b      	mov	r3, r5
 8007190:	f7f9 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007194:	b900      	cbnz	r0, 8007198 <_dtoa_r+0x168>
 8007196:	3f01      	subs	r7, #1
 8007198:	2f16      	cmp	r7, #22
 800719a:	d851      	bhi.n	8007240 <_dtoa_r+0x210>
 800719c:	4b5b      	ldr	r3, [pc, #364]	@ (800730c <_dtoa_r+0x2dc>)
 800719e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071aa:	f7f9 fc97 	bl	8000adc <__aeabi_dcmplt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d048      	beq.n	8007244 <_dtoa_r+0x214>
 80071b2:	3f01      	subs	r7, #1
 80071b4:	2300      	movs	r3, #0
 80071b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80071b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071ba:	1b9b      	subs	r3, r3, r6
 80071bc:	1e5a      	subs	r2, r3, #1
 80071be:	bf44      	itt	mi
 80071c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80071c4:	2300      	movmi	r3, #0
 80071c6:	9208      	str	r2, [sp, #32]
 80071c8:	bf54      	ite	pl
 80071ca:	f04f 0800 	movpl.w	r8, #0
 80071ce:	9308      	strmi	r3, [sp, #32]
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	db39      	blt.n	8007248 <_dtoa_r+0x218>
 80071d4:	9b08      	ldr	r3, [sp, #32]
 80071d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80071d8:	443b      	add	r3, r7
 80071da:	9308      	str	r3, [sp, #32]
 80071dc:	2300      	movs	r3, #0
 80071de:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e2:	2b09      	cmp	r3, #9
 80071e4:	d864      	bhi.n	80072b0 <_dtoa_r+0x280>
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	bfc4      	itt	gt
 80071ea:	3b04      	subgt	r3, #4
 80071ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	f1a3 0302 	sub.w	r3, r3, #2
 80071f4:	bfcc      	ite	gt
 80071f6:	2400      	movgt	r4, #0
 80071f8:	2401      	movle	r4, #1
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d863      	bhi.n	80072c6 <_dtoa_r+0x296>
 80071fe:	e8df f003 	tbb	[pc, r3]
 8007202:	372a      	.short	0x372a
 8007204:	5535      	.short	0x5535
 8007206:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800720a:	441e      	add	r6, r3
 800720c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007210:	2b20      	cmp	r3, #32
 8007212:	bfc1      	itttt	gt
 8007214:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007218:	409f      	lslgt	r7, r3
 800721a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800721e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007222:	bfd6      	itet	le
 8007224:	f1c3 0320 	rsble	r3, r3, #32
 8007228:	ea47 0003 	orrgt.w	r0, r7, r3
 800722c:	fa04 f003 	lslle.w	r0, r4, r3
 8007230:	f7f9 f968 	bl	8000504 <__aeabi_ui2d>
 8007234:	2201      	movs	r2, #1
 8007236:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800723a:	3e01      	subs	r6, #1
 800723c:	9214      	str	r2, [sp, #80]	@ 0x50
 800723e:	e777      	b.n	8007130 <_dtoa_r+0x100>
 8007240:	2301      	movs	r3, #1
 8007242:	e7b8      	b.n	80071b6 <_dtoa_r+0x186>
 8007244:	9012      	str	r0, [sp, #72]	@ 0x48
 8007246:	e7b7      	b.n	80071b8 <_dtoa_r+0x188>
 8007248:	427b      	negs	r3, r7
 800724a:	930a      	str	r3, [sp, #40]	@ 0x28
 800724c:	2300      	movs	r3, #0
 800724e:	eba8 0807 	sub.w	r8, r8, r7
 8007252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007254:	e7c4      	b.n	80071e0 <_dtoa_r+0x1b0>
 8007256:	2300      	movs	r3, #0
 8007258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800725a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc35      	bgt.n	80072cc <_dtoa_r+0x29c>
 8007260:	2301      	movs	r3, #1
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	461a      	mov	r2, r3
 8007268:	920e      	str	r2, [sp, #56]	@ 0x38
 800726a:	e00b      	b.n	8007284 <_dtoa_r+0x254>
 800726c:	2301      	movs	r3, #1
 800726e:	e7f3      	b.n	8007258 <_dtoa_r+0x228>
 8007270:	2300      	movs	r3, #0
 8007272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	3301      	adds	r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	9307      	str	r3, [sp, #28]
 8007280:	bfb8      	it	lt
 8007282:	2301      	movlt	r3, #1
 8007284:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007288:	2100      	movs	r1, #0
 800728a:	2204      	movs	r2, #4
 800728c:	f102 0514 	add.w	r5, r2, #20
 8007290:	429d      	cmp	r5, r3
 8007292:	d91f      	bls.n	80072d4 <_dtoa_r+0x2a4>
 8007294:	6041      	str	r1, [r0, #4]
 8007296:	4658      	mov	r0, fp
 8007298:	f001 fa92 	bl	80087c0 <_Balloc>
 800729c:	4682      	mov	sl, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d13c      	bne.n	800731c <_dtoa_r+0x2ec>
 80072a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007310 <_dtoa_r+0x2e0>)
 80072a4:	4602      	mov	r2, r0
 80072a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80072aa:	e6d8      	b.n	800705e <_dtoa_r+0x2e>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e7e0      	b.n	8007272 <_dtoa_r+0x242>
 80072b0:	2401      	movs	r4, #1
 80072b2:	2300      	movs	r3, #0
 80072b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2312      	movs	r3, #18
 80072c4:	e7d0      	b.n	8007268 <_dtoa_r+0x238>
 80072c6:	2301      	movs	r3, #1
 80072c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ca:	e7f5      	b.n	80072b8 <_dtoa_r+0x288>
 80072cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	e7d7      	b.n	8007284 <_dtoa_r+0x254>
 80072d4:	3101      	adds	r1, #1
 80072d6:	0052      	lsls	r2, r2, #1
 80072d8:	e7d8      	b.n	800728c <_dtoa_r+0x25c>
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w
 80072e0:	636f4361 	.word	0x636f4361
 80072e4:	3fd287a7 	.word	0x3fd287a7
 80072e8:	8b60c8b3 	.word	0x8b60c8b3
 80072ec:	3fc68a28 	.word	0x3fc68a28
 80072f0:	509f79fb 	.word	0x509f79fb
 80072f4:	3fd34413 	.word	0x3fd34413
 80072f8:	08009b56 	.word	0x08009b56
 80072fc:	08009b6d 	.word	0x08009b6d
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	080099c1 	.word	0x080099c1
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	08009cd8 	.word	0x08009cd8
 8007310:	08009bc5 	.word	0x08009bc5
 8007314:	08009b52 	.word	0x08009b52
 8007318:	080099c0 	.word	0x080099c0
 800731c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007320:	6018      	str	r0, [r3, #0]
 8007322:	9b07      	ldr	r3, [sp, #28]
 8007324:	2b0e      	cmp	r3, #14
 8007326:	f200 80a4 	bhi.w	8007472 <_dtoa_r+0x442>
 800732a:	2c00      	cmp	r4, #0
 800732c:	f000 80a1 	beq.w	8007472 <_dtoa_r+0x442>
 8007330:	2f00      	cmp	r7, #0
 8007332:	dd33      	ble.n	800739c <_dtoa_r+0x36c>
 8007334:	4bad      	ldr	r3, [pc, #692]	@ (80075ec <_dtoa_r+0x5bc>)
 8007336:	f007 020f 	and.w	r2, r7, #15
 800733a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800733e:	ed93 7b00 	vldr	d7, [r3]
 8007342:	05f8      	lsls	r0, r7, #23
 8007344:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007348:	ea4f 1427 	mov.w	r4, r7, asr #4
 800734c:	d516      	bpl.n	800737c <_dtoa_r+0x34c>
 800734e:	4ba8      	ldr	r3, [pc, #672]	@ (80075f0 <_dtoa_r+0x5c0>)
 8007350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007358:	f7f9 fa78 	bl	800084c <__aeabi_ddiv>
 800735c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007360:	f004 040f 	and.w	r4, r4, #15
 8007364:	2603      	movs	r6, #3
 8007366:	4da2      	ldr	r5, [pc, #648]	@ (80075f0 <_dtoa_r+0x5c0>)
 8007368:	b954      	cbnz	r4, 8007380 <_dtoa_r+0x350>
 800736a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007372:	f7f9 fa6b 	bl	800084c <__aeabi_ddiv>
 8007376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800737a:	e028      	b.n	80073ce <_dtoa_r+0x39e>
 800737c:	2602      	movs	r6, #2
 800737e:	e7f2      	b.n	8007366 <_dtoa_r+0x336>
 8007380:	07e1      	lsls	r1, r4, #31
 8007382:	d508      	bpl.n	8007396 <_dtoa_r+0x366>
 8007384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007394:	3601      	adds	r6, #1
 8007396:	1064      	asrs	r4, r4, #1
 8007398:	3508      	adds	r5, #8
 800739a:	e7e5      	b.n	8007368 <_dtoa_r+0x338>
 800739c:	f000 80d2 	beq.w	8007544 <_dtoa_r+0x514>
 80073a0:	427c      	negs	r4, r7
 80073a2:	4b92      	ldr	r3, [pc, #584]	@ (80075ec <_dtoa_r+0x5bc>)
 80073a4:	4d92      	ldr	r5, [pc, #584]	@ (80075f0 <_dtoa_r+0x5c0>)
 80073a6:	f004 020f 	and.w	r2, r4, #15
 80073aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073b6:	f7f9 f91f 	bl	80005f8 <__aeabi_dmul>
 80073ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073be:	1124      	asrs	r4, r4, #4
 80073c0:	2300      	movs	r3, #0
 80073c2:	2602      	movs	r6, #2
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f040 80b2 	bne.w	800752e <_dtoa_r+0x4fe>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1d3      	bne.n	8007376 <_dtoa_r+0x346>
 80073ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80b7 	beq.w	8007548 <_dtoa_r+0x518>
 80073da:	4b86      	ldr	r3, [pc, #536]	@ (80075f4 <_dtoa_r+0x5c4>)
 80073dc:	2200      	movs	r2, #0
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f9 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f000 80ae 	beq.w	8007548 <_dtoa_r+0x518>
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80aa 	beq.w	8007548 <_dtoa_r+0x518>
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dd37      	ble.n	800746a <_dtoa_r+0x43a>
 80073fa:	1e7b      	subs	r3, r7, #1
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	4620      	mov	r0, r4
 8007400:	4b7d      	ldr	r3, [pc, #500]	@ (80075f8 <_dtoa_r+0x5c8>)
 8007402:	2200      	movs	r2, #0
 8007404:	4629      	mov	r1, r5
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	9c00      	ldr	r4, [sp, #0]
 8007410:	3601      	adds	r6, #1
 8007412:	4630      	mov	r0, r6
 8007414:	f7f9 f886 	bl	8000524 <__aeabi_i2d>
 8007418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800741c:	f7f9 f8ec 	bl	80005f8 <__aeabi_dmul>
 8007420:	4b76      	ldr	r3, [pc, #472]	@ (80075fc <_dtoa_r+0x5cc>)
 8007422:	2200      	movs	r2, #0
 8007424:	f7f8 ff32 	bl	800028c <__adddf3>
 8007428:	4605      	mov	r5, r0
 800742a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800742e:	2c00      	cmp	r4, #0
 8007430:	f040 808d 	bne.w	800754e <_dtoa_r+0x51e>
 8007434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007438:	4b71      	ldr	r3, [pc, #452]	@ (8007600 <_dtoa_r+0x5d0>)
 800743a:	2200      	movs	r2, #0
 800743c:	f7f8 ff24 	bl	8000288 <__aeabi_dsub>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007448:	462a      	mov	r2, r5
 800744a:	4633      	mov	r3, r6
 800744c:	f7f9 fb64 	bl	8000b18 <__aeabi_dcmpgt>
 8007450:	2800      	cmp	r0, #0
 8007452:	f040 828b 	bne.w	800796c <_dtoa_r+0x93c>
 8007456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745a:	462a      	mov	r2, r5
 800745c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007460:	f7f9 fb3c 	bl	8000adc <__aeabi_dcmplt>
 8007464:	2800      	cmp	r0, #0
 8007466:	f040 8128 	bne.w	80076ba <_dtoa_r+0x68a>
 800746a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800746e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007474:	2b00      	cmp	r3, #0
 8007476:	f2c0 815a 	blt.w	800772e <_dtoa_r+0x6fe>
 800747a:	2f0e      	cmp	r7, #14
 800747c:	f300 8157 	bgt.w	800772e <_dtoa_r+0x6fe>
 8007480:	4b5a      	ldr	r3, [pc, #360]	@ (80075ec <_dtoa_r+0x5bc>)
 8007482:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007486:	ed93 7b00 	vldr	d7, [r3]
 800748a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748c:	2b00      	cmp	r3, #0
 800748e:	ed8d 7b00 	vstr	d7, [sp]
 8007492:	da03      	bge.n	800749c <_dtoa_r+0x46c>
 8007494:	9b07      	ldr	r3, [sp, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f340 8101 	ble.w	800769e <_dtoa_r+0x66e>
 800749c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074a0:	4656      	mov	r6, sl
 80074a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 f9cf 	bl	800084c <__aeabi_ddiv>
 80074ae:	f7f9 fb53 	bl	8000b58 <__aeabi_d2iz>
 80074b2:	4680      	mov	r8, r0
 80074b4:	f7f9 f836 	bl	8000524 <__aeabi_i2d>
 80074b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074cc:	f7f8 fedc 	bl	8000288 <__aeabi_dsub>
 80074d0:	f806 4b01 	strb.w	r4, [r6], #1
 80074d4:	9d07      	ldr	r5, [sp, #28]
 80074d6:	eba6 040a 	sub.w	r4, r6, sl
 80074da:	42a5      	cmp	r5, r4
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	f040 8117 	bne.w	8007712 <_dtoa_r+0x6e2>
 80074e4:	f7f8 fed2 	bl	800028c <__adddf3>
 80074e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ec:	4604      	mov	r4, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	f7f9 fb12 	bl	8000b18 <__aeabi_dcmpgt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f040 80f9 	bne.w	80076ec <_dtoa_r+0x6bc>
 80074fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f9 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007506:	b118      	cbz	r0, 8007510 <_dtoa_r+0x4e0>
 8007508:	f018 0f01 	tst.w	r8, #1
 800750c:	f040 80ee 	bne.w	80076ec <_dtoa_r+0x6bc>
 8007510:	4649      	mov	r1, r9
 8007512:	4658      	mov	r0, fp
 8007514:	f001 f994 	bl	8008840 <_Bfree>
 8007518:	2300      	movs	r3, #0
 800751a:	7033      	strb	r3, [r6, #0]
 800751c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800751e:	3701      	adds	r7, #1
 8007520:	601f      	str	r7, [r3, #0]
 8007522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 831d 	beq.w	8007b64 <_dtoa_r+0xb34>
 800752a:	601e      	str	r6, [r3, #0]
 800752c:	e31a      	b.n	8007b64 <_dtoa_r+0xb34>
 800752e:	07e2      	lsls	r2, r4, #31
 8007530:	d505      	bpl.n	800753e <_dtoa_r+0x50e>
 8007532:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007536:	f7f9 f85f 	bl	80005f8 <__aeabi_dmul>
 800753a:	3601      	adds	r6, #1
 800753c:	2301      	movs	r3, #1
 800753e:	1064      	asrs	r4, r4, #1
 8007540:	3508      	adds	r5, #8
 8007542:	e73f      	b.n	80073c4 <_dtoa_r+0x394>
 8007544:	2602      	movs	r6, #2
 8007546:	e742      	b.n	80073ce <_dtoa_r+0x39e>
 8007548:	9c07      	ldr	r4, [sp, #28]
 800754a:	9704      	str	r7, [sp, #16]
 800754c:	e761      	b.n	8007412 <_dtoa_r+0x3e2>
 800754e:	4b27      	ldr	r3, [pc, #156]	@ (80075ec <_dtoa_r+0x5bc>)
 8007550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007556:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800755a:	4454      	add	r4, sl
 800755c:	2900      	cmp	r1, #0
 800755e:	d053      	beq.n	8007608 <_dtoa_r+0x5d8>
 8007560:	4928      	ldr	r1, [pc, #160]	@ (8007604 <_dtoa_r+0x5d4>)
 8007562:	2000      	movs	r0, #0
 8007564:	f7f9 f972 	bl	800084c <__aeabi_ddiv>
 8007568:	4633      	mov	r3, r6
 800756a:	462a      	mov	r2, r5
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007574:	4656      	mov	r6, sl
 8007576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757a:	f7f9 faed 	bl	8000b58 <__aeabi_d2iz>
 800757e:	4605      	mov	r5, r0
 8007580:	f7f8 ffd0 	bl	8000524 <__aeabi_i2d>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f8 fe7c 	bl	8000288 <__aeabi_dsub>
 8007590:	3530      	adds	r5, #48	@ 0x30
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800759a:	f806 5b01 	strb.w	r5, [r6], #1
 800759e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075a2:	f7f9 fa9b 	bl	8000adc <__aeabi_dcmplt>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d171      	bne.n	800768e <_dtoa_r+0x65e>
 80075aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075ae:	4911      	ldr	r1, [pc, #68]	@ (80075f4 <_dtoa_r+0x5c4>)
 80075b0:	2000      	movs	r0, #0
 80075b2:	f7f8 fe69 	bl	8000288 <__aeabi_dsub>
 80075b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075ba:	f7f9 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	f040 8095 	bne.w	80076ee <_dtoa_r+0x6be>
 80075c4:	42a6      	cmp	r6, r4
 80075c6:	f43f af50 	beq.w	800746a <_dtoa_r+0x43a>
 80075ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075ce:	4b0a      	ldr	r3, [pc, #40]	@ (80075f8 <_dtoa_r+0x5c8>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	f7f9 f811 	bl	80005f8 <__aeabi_dmul>
 80075d6:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <_dtoa_r+0x5c8>)
 80075d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075dc:	2200      	movs	r2, #0
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	f7f9 f809 	bl	80005f8 <__aeabi_dmul>
 80075e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ea:	e7c4      	b.n	8007576 <_dtoa_r+0x546>
 80075ec:	08009cd8 	.word	0x08009cd8
 80075f0:	08009cb0 	.word	0x08009cb0
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	401c0000 	.word	0x401c0000
 8007600:	40140000 	.word	0x40140000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	f7f8 fff4 	bl	80005f8 <__aeabi_dmul>
 8007610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007614:	9415      	str	r4, [sp, #84]	@ 0x54
 8007616:	4656      	mov	r6, sl
 8007618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761c:	f7f9 fa9c 	bl	8000b58 <__aeabi_d2iz>
 8007620:	4605      	mov	r5, r0
 8007622:	f7f8 ff7f 	bl	8000524 <__aeabi_i2d>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762e:	f7f8 fe2b 	bl	8000288 <__aeabi_dsub>
 8007632:	3530      	adds	r5, #48	@ 0x30
 8007634:	f806 5b01 	strb.w	r5, [r6], #1
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	42a6      	cmp	r6, r4
 800763e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	d124      	bne.n	8007692 <_dtoa_r+0x662>
 8007648:	4bac      	ldr	r3, [pc, #688]	@ (80078fc <_dtoa_r+0x8cc>)
 800764a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800764e:	f7f8 fe1d 	bl	800028c <__adddf3>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800765a:	f7f9 fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d145      	bne.n	80076ee <_dtoa_r+0x6be>
 8007662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007666:	49a5      	ldr	r1, [pc, #660]	@ (80078fc <_dtoa_r+0x8cc>)
 8007668:	2000      	movs	r0, #0
 800766a:	f7f8 fe0d 	bl	8000288 <__aeabi_dsub>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007676:	f7f9 fa31 	bl	8000adc <__aeabi_dcmplt>
 800767a:	2800      	cmp	r0, #0
 800767c:	f43f aef5 	beq.w	800746a <_dtoa_r+0x43a>
 8007680:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007682:	1e73      	subs	r3, r6, #1
 8007684:	9315      	str	r3, [sp, #84]	@ 0x54
 8007686:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800768a:	2b30      	cmp	r3, #48	@ 0x30
 800768c:	d0f8      	beq.n	8007680 <_dtoa_r+0x650>
 800768e:	9f04      	ldr	r7, [sp, #16]
 8007690:	e73e      	b.n	8007510 <_dtoa_r+0x4e0>
 8007692:	4b9b      	ldr	r3, [pc, #620]	@ (8007900 <_dtoa_r+0x8d0>)
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769c:	e7bc      	b.n	8007618 <_dtoa_r+0x5e8>
 800769e:	d10c      	bne.n	80076ba <_dtoa_r+0x68a>
 80076a0:	4b98      	ldr	r3, [pc, #608]	@ (8007904 <_dtoa_r+0x8d4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b0:	f7f9 fa28 	bl	8000b04 <__aeabi_dcmpge>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f000 8157 	beq.w	8007968 <_dtoa_r+0x938>
 80076ba:	2400      	movs	r4, #0
 80076bc:	4625      	mov	r5, r4
 80076be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076c0:	43db      	mvns	r3, r3
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	4656      	mov	r6, sl
 80076c6:	2700      	movs	r7, #0
 80076c8:	4621      	mov	r1, r4
 80076ca:	4658      	mov	r0, fp
 80076cc:	f001 f8b8 	bl	8008840 <_Bfree>
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d0dc      	beq.n	800768e <_dtoa_r+0x65e>
 80076d4:	b12f      	cbz	r7, 80076e2 <_dtoa_r+0x6b2>
 80076d6:	42af      	cmp	r7, r5
 80076d8:	d003      	beq.n	80076e2 <_dtoa_r+0x6b2>
 80076da:	4639      	mov	r1, r7
 80076dc:	4658      	mov	r0, fp
 80076de:	f001 f8af 	bl	8008840 <_Bfree>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4658      	mov	r0, fp
 80076e6:	f001 f8ab 	bl	8008840 <_Bfree>
 80076ea:	e7d0      	b.n	800768e <_dtoa_r+0x65e>
 80076ec:	9704      	str	r7, [sp, #16]
 80076ee:	4633      	mov	r3, r6
 80076f0:	461e      	mov	r6, r3
 80076f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076f6:	2a39      	cmp	r2, #57	@ 0x39
 80076f8:	d107      	bne.n	800770a <_dtoa_r+0x6da>
 80076fa:	459a      	cmp	sl, r3
 80076fc:	d1f8      	bne.n	80076f0 <_dtoa_r+0x6c0>
 80076fe:	9a04      	ldr	r2, [sp, #16]
 8007700:	3201      	adds	r2, #1
 8007702:	9204      	str	r2, [sp, #16]
 8007704:	2230      	movs	r2, #48	@ 0x30
 8007706:	f88a 2000 	strb.w	r2, [sl]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	3201      	adds	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e7bd      	b.n	800768e <_dtoa_r+0x65e>
 8007712:	4b7b      	ldr	r3, [pc, #492]	@ (8007900 <_dtoa_r+0x8d0>)
 8007714:	2200      	movs	r2, #0
 8007716:	f7f8 ff6f 	bl	80005f8 <__aeabi_dmul>
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	460d      	mov	r5, r1
 8007722:	f7f9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f aebb 	beq.w	80074a2 <_dtoa_r+0x472>
 800772c:	e6f0      	b.n	8007510 <_dtoa_r+0x4e0>
 800772e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007730:	2a00      	cmp	r2, #0
 8007732:	f000 80db 	beq.w	80078ec <_dtoa_r+0x8bc>
 8007736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007738:	2a01      	cmp	r2, #1
 800773a:	f300 80bf 	bgt.w	80078bc <_dtoa_r+0x88c>
 800773e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007740:	2a00      	cmp	r2, #0
 8007742:	f000 80b7 	beq.w	80078b4 <_dtoa_r+0x884>
 8007746:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800774a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800774c:	4646      	mov	r6, r8
 800774e:	9a08      	ldr	r2, [sp, #32]
 8007750:	2101      	movs	r1, #1
 8007752:	441a      	add	r2, r3
 8007754:	4658      	mov	r0, fp
 8007756:	4498      	add	r8, r3
 8007758:	9208      	str	r2, [sp, #32]
 800775a:	f001 f96f 	bl	8008a3c <__i2b>
 800775e:	4605      	mov	r5, r0
 8007760:	b15e      	cbz	r6, 800777a <_dtoa_r+0x74a>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd08      	ble.n	800777a <_dtoa_r+0x74a>
 8007768:	42b3      	cmp	r3, r6
 800776a:	9a08      	ldr	r2, [sp, #32]
 800776c:	bfa8      	it	ge
 800776e:	4633      	movge	r3, r6
 8007770:	eba8 0803 	sub.w	r8, r8, r3
 8007774:	1af6      	subs	r6, r6, r3
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800777c:	b1f3      	cbz	r3, 80077bc <_dtoa_r+0x78c>
 800777e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80b7 	beq.w	80078f4 <_dtoa_r+0x8c4>
 8007786:	b18c      	cbz	r4, 80077ac <_dtoa_r+0x77c>
 8007788:	4629      	mov	r1, r5
 800778a:	4622      	mov	r2, r4
 800778c:	4658      	mov	r0, fp
 800778e:	f001 fa15 	bl	8008bbc <__pow5mult>
 8007792:	464a      	mov	r2, r9
 8007794:	4601      	mov	r1, r0
 8007796:	4605      	mov	r5, r0
 8007798:	4658      	mov	r0, fp
 800779a:	f001 f965 	bl	8008a68 <__multiply>
 800779e:	4649      	mov	r1, r9
 80077a0:	9004      	str	r0, [sp, #16]
 80077a2:	4658      	mov	r0, fp
 80077a4:	f001 f84c 	bl	8008840 <_Bfree>
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	4699      	mov	r9, r3
 80077ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ae:	1b1a      	subs	r2, r3, r4
 80077b0:	d004      	beq.n	80077bc <_dtoa_r+0x78c>
 80077b2:	4649      	mov	r1, r9
 80077b4:	4658      	mov	r0, fp
 80077b6:	f001 fa01 	bl	8008bbc <__pow5mult>
 80077ba:	4681      	mov	r9, r0
 80077bc:	2101      	movs	r1, #1
 80077be:	4658      	mov	r0, fp
 80077c0:	f001 f93c 	bl	8008a3c <__i2b>
 80077c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c6:	4604      	mov	r4, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 81cf 	beq.w	8007b6c <_dtoa_r+0xb3c>
 80077ce:	461a      	mov	r2, r3
 80077d0:	4601      	mov	r1, r0
 80077d2:	4658      	mov	r0, fp
 80077d4:	f001 f9f2 	bl	8008bbc <__pow5mult>
 80077d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077da:	2b01      	cmp	r3, #1
 80077dc:	4604      	mov	r4, r0
 80077de:	f300 8095 	bgt.w	800790c <_dtoa_r+0x8dc>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f040 8087 	bne.w	80078f8 <_dtoa_r+0x8c8>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8089 	bne.w	8007908 <_dtoa_r+0x8d8>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077fc:	0d1b      	lsrs	r3, r3, #20
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	b12b      	cbz	r3, 800780e <_dtoa_r+0x7de>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	3301      	adds	r3, #1
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	f108 0801 	add.w	r8, r8, #1
 800780c:	2301      	movs	r3, #1
 800780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 81b0 	beq.w	8007b78 <_dtoa_r+0xb48>
 8007818:	6923      	ldr	r3, [r4, #16]
 800781a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800781e:	6918      	ldr	r0, [r3, #16]
 8007820:	f001 f8c0 	bl	80089a4 <__hi0bits>
 8007824:	f1c0 0020 	rsb	r0, r0, #32
 8007828:	9b08      	ldr	r3, [sp, #32]
 800782a:	4418      	add	r0, r3
 800782c:	f010 001f 	ands.w	r0, r0, #31
 8007830:	d077      	beq.n	8007922 <_dtoa_r+0x8f2>
 8007832:	f1c0 0320 	rsb	r3, r0, #32
 8007836:	2b04      	cmp	r3, #4
 8007838:	dd6b      	ble.n	8007912 <_dtoa_r+0x8e2>
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	f1c0 001c 	rsb	r0, r0, #28
 8007840:	4403      	add	r3, r0
 8007842:	4480      	add	r8, r0
 8007844:	4406      	add	r6, r0
 8007846:	9308      	str	r3, [sp, #32]
 8007848:	f1b8 0f00 	cmp.w	r8, #0
 800784c:	dd05      	ble.n	800785a <_dtoa_r+0x82a>
 800784e:	4649      	mov	r1, r9
 8007850:	4642      	mov	r2, r8
 8007852:	4658      	mov	r0, fp
 8007854:	f001 fa0c 	bl	8008c70 <__lshift>
 8007858:	4681      	mov	r9, r0
 800785a:	9b08      	ldr	r3, [sp, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd05      	ble.n	800786c <_dtoa_r+0x83c>
 8007860:	4621      	mov	r1, r4
 8007862:	461a      	mov	r2, r3
 8007864:	4658      	mov	r0, fp
 8007866:	f001 fa03 	bl	8008c70 <__lshift>
 800786a:	4604      	mov	r4, r0
 800786c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800786e:	2b00      	cmp	r3, #0
 8007870:	d059      	beq.n	8007926 <_dtoa_r+0x8f6>
 8007872:	4621      	mov	r1, r4
 8007874:	4648      	mov	r0, r9
 8007876:	f001 fa67 	bl	8008d48 <__mcmp>
 800787a:	2800      	cmp	r0, #0
 800787c:	da53      	bge.n	8007926 <_dtoa_r+0x8f6>
 800787e:	1e7b      	subs	r3, r7, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	4649      	mov	r1, r9
 8007884:	2300      	movs	r3, #0
 8007886:	220a      	movs	r2, #10
 8007888:	4658      	mov	r0, fp
 800788a:	f000 fffb 	bl	8008884 <__multadd>
 800788e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007890:	4681      	mov	r9, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8172 	beq.w	8007b7c <_dtoa_r+0xb4c>
 8007898:	2300      	movs	r3, #0
 800789a:	4629      	mov	r1, r5
 800789c:	220a      	movs	r2, #10
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 fff0 	bl	8008884 <__multadd>
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	4605      	mov	r5, r0
 80078aa:	dc67      	bgt.n	800797c <_dtoa_r+0x94c>
 80078ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	dc41      	bgt.n	8007936 <_dtoa_r+0x906>
 80078b2:	e063      	b.n	800797c <_dtoa_r+0x94c>
 80078b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078ba:	e746      	b.n	800774a <_dtoa_r+0x71a>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	1e5c      	subs	r4, r3, #1
 80078c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	bfbf      	itttt	lt
 80078c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80078ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078cc:	1ae3      	sublt	r3, r4, r3
 80078ce:	bfb4      	ite	lt
 80078d0:	18d2      	addlt	r2, r2, r3
 80078d2:	1b1c      	subge	r4, r3, r4
 80078d4:	9b07      	ldr	r3, [sp, #28]
 80078d6:	bfbc      	itt	lt
 80078d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80078da:	2400      	movlt	r4, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bfb5      	itete	lt
 80078e0:	eba8 0603 	sublt.w	r6, r8, r3
 80078e4:	9b07      	ldrge	r3, [sp, #28]
 80078e6:	2300      	movlt	r3, #0
 80078e8:	4646      	movge	r6, r8
 80078ea:	e730      	b.n	800774e <_dtoa_r+0x71e>
 80078ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078f0:	4646      	mov	r6, r8
 80078f2:	e735      	b.n	8007760 <_dtoa_r+0x730>
 80078f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078f6:	e75c      	b.n	80077b2 <_dtoa_r+0x782>
 80078f8:	2300      	movs	r3, #0
 80078fa:	e788      	b.n	800780e <_dtoa_r+0x7de>
 80078fc:	3fe00000 	.word	0x3fe00000
 8007900:	40240000 	.word	0x40240000
 8007904:	40140000 	.word	0x40140000
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	e780      	b.n	800780e <_dtoa_r+0x7de>
 800790c:	2300      	movs	r3, #0
 800790e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007910:	e782      	b.n	8007818 <_dtoa_r+0x7e8>
 8007912:	d099      	beq.n	8007848 <_dtoa_r+0x818>
 8007914:	9a08      	ldr	r2, [sp, #32]
 8007916:	331c      	adds	r3, #28
 8007918:	441a      	add	r2, r3
 800791a:	4498      	add	r8, r3
 800791c:	441e      	add	r6, r3
 800791e:	9208      	str	r2, [sp, #32]
 8007920:	e792      	b.n	8007848 <_dtoa_r+0x818>
 8007922:	4603      	mov	r3, r0
 8007924:	e7f6      	b.n	8007914 <_dtoa_r+0x8e4>
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	9704      	str	r7, [sp, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dc20      	bgt.n	8007970 <_dtoa_r+0x940>
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007932:	2b02      	cmp	r3, #2
 8007934:	dd1e      	ble.n	8007974 <_dtoa_r+0x944>
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f aec0 	bne.w	80076be <_dtoa_r+0x68e>
 800793e:	4621      	mov	r1, r4
 8007940:	2205      	movs	r2, #5
 8007942:	4658      	mov	r0, fp
 8007944:	f000 ff9e 	bl	8008884 <__multadd>
 8007948:	4601      	mov	r1, r0
 800794a:	4604      	mov	r4, r0
 800794c:	4648      	mov	r0, r9
 800794e:	f001 f9fb 	bl	8008d48 <__mcmp>
 8007952:	2800      	cmp	r0, #0
 8007954:	f77f aeb3 	ble.w	80076be <_dtoa_r+0x68e>
 8007958:	4656      	mov	r6, sl
 800795a:	2331      	movs	r3, #49	@ 0x31
 800795c:	f806 3b01 	strb.w	r3, [r6], #1
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	3301      	adds	r3, #1
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	e6ae      	b.n	80076c6 <_dtoa_r+0x696>
 8007968:	9c07      	ldr	r4, [sp, #28]
 800796a:	9704      	str	r7, [sp, #16]
 800796c:	4625      	mov	r5, r4
 800796e:	e7f3      	b.n	8007958 <_dtoa_r+0x928>
 8007970:	9b07      	ldr	r3, [sp, #28]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8104 	beq.w	8007b84 <_dtoa_r+0xb54>
 800797c:	2e00      	cmp	r6, #0
 800797e:	dd05      	ble.n	800798c <_dtoa_r+0x95c>
 8007980:	4629      	mov	r1, r5
 8007982:	4632      	mov	r2, r6
 8007984:	4658      	mov	r0, fp
 8007986:	f001 f973 	bl	8008c70 <__lshift>
 800798a:	4605      	mov	r5, r0
 800798c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d05a      	beq.n	8007a48 <_dtoa_r+0xa18>
 8007992:	6869      	ldr	r1, [r5, #4]
 8007994:	4658      	mov	r0, fp
 8007996:	f000 ff13 	bl	80087c0 <_Balloc>
 800799a:	4606      	mov	r6, r0
 800799c:	b928      	cbnz	r0, 80079aa <_dtoa_r+0x97a>
 800799e:	4b84      	ldr	r3, [pc, #528]	@ (8007bb0 <_dtoa_r+0xb80>)
 80079a0:	4602      	mov	r2, r0
 80079a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079a6:	f7ff bb5a 	b.w	800705e <_dtoa_r+0x2e>
 80079aa:	692a      	ldr	r2, [r5, #16]
 80079ac:	3202      	adds	r2, #2
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	f105 010c 	add.w	r1, r5, #12
 80079b4:	300c      	adds	r0, #12
 80079b6:	f7ff fa92 	bl	8006ede <memcpy>
 80079ba:	2201      	movs	r2, #1
 80079bc:	4631      	mov	r1, r6
 80079be:	4658      	mov	r0, fp
 80079c0:	f001 f956 	bl	8008c70 <__lshift>
 80079c4:	f10a 0301 	add.w	r3, sl, #1
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	4453      	add	r3, sl
 80079ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	462f      	mov	r7, r5
 80079d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80079da:	4605      	mov	r5, r0
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	4621      	mov	r1, r4
 80079e0:	3b01      	subs	r3, #1
 80079e2:	4648      	mov	r0, r9
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	f7ff fa99 	bl	8006f1c <quorem>
 80079ea:	4639      	mov	r1, r7
 80079ec:	9002      	str	r0, [sp, #8]
 80079ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079f2:	4648      	mov	r0, r9
 80079f4:	f001 f9a8 	bl	8008d48 <__mcmp>
 80079f8:	462a      	mov	r2, r5
 80079fa:	9008      	str	r0, [sp, #32]
 80079fc:	4621      	mov	r1, r4
 80079fe:	4658      	mov	r0, fp
 8007a00:	f001 f9be 	bl	8008d80 <__mdiff>
 8007a04:	68c2      	ldr	r2, [r0, #12]
 8007a06:	4606      	mov	r6, r0
 8007a08:	bb02      	cbnz	r2, 8007a4c <_dtoa_r+0xa1c>
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4648      	mov	r0, r9
 8007a0e:	f001 f99b 	bl	8008d48 <__mcmp>
 8007a12:	4602      	mov	r2, r0
 8007a14:	4631      	mov	r1, r6
 8007a16:	4658      	mov	r0, fp
 8007a18:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a1a:	f000 ff11 	bl	8008840 <_Bfree>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a22:	9e07      	ldr	r6, [sp, #28]
 8007a24:	ea43 0102 	orr.w	r1, r3, r2
 8007a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a2a:	4319      	orrs	r1, r3
 8007a2c:	d110      	bne.n	8007a50 <_dtoa_r+0xa20>
 8007a2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a32:	d029      	beq.n	8007a88 <_dtoa_r+0xa58>
 8007a34:	9b08      	ldr	r3, [sp, #32]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd02      	ble.n	8007a40 <_dtoa_r+0xa10>
 8007a3a:	9b02      	ldr	r3, [sp, #8]
 8007a3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	f883 8000 	strb.w	r8, [r3]
 8007a46:	e63f      	b.n	80076c8 <_dtoa_r+0x698>
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e7bb      	b.n	80079c4 <_dtoa_r+0x994>
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	e7e1      	b.n	8007a14 <_dtoa_r+0x9e4>
 8007a50:	9b08      	ldr	r3, [sp, #32]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db04      	blt.n	8007a60 <_dtoa_r+0xa30>
 8007a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	d120      	bne.n	8007aa2 <_dtoa_r+0xa72>
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	dded      	ble.n	8007a40 <_dtoa_r+0xa10>
 8007a64:	4649      	mov	r1, r9
 8007a66:	2201      	movs	r2, #1
 8007a68:	4658      	mov	r0, fp
 8007a6a:	f001 f901 	bl	8008c70 <__lshift>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4681      	mov	r9, r0
 8007a72:	f001 f969 	bl	8008d48 <__mcmp>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	dc03      	bgt.n	8007a82 <_dtoa_r+0xa52>
 8007a7a:	d1e1      	bne.n	8007a40 <_dtoa_r+0xa10>
 8007a7c:	f018 0f01 	tst.w	r8, #1
 8007a80:	d0de      	beq.n	8007a40 <_dtoa_r+0xa10>
 8007a82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a86:	d1d8      	bne.n	8007a3a <_dtoa_r+0xa0a>
 8007a88:	9a00      	ldr	r2, [sp, #0]
 8007a8a:	2339      	movs	r3, #57	@ 0x39
 8007a8c:	7013      	strb	r3, [r2, #0]
 8007a8e:	4633      	mov	r3, r6
 8007a90:	461e      	mov	r6, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a98:	2a39      	cmp	r2, #57	@ 0x39
 8007a9a:	d052      	beq.n	8007b42 <_dtoa_r+0xb12>
 8007a9c:	3201      	adds	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e612      	b.n	80076c8 <_dtoa_r+0x698>
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	dd07      	ble.n	8007ab6 <_dtoa_r+0xa86>
 8007aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007aaa:	d0ed      	beq.n	8007a88 <_dtoa_r+0xa58>
 8007aac:	9a00      	ldr	r2, [sp, #0]
 8007aae:	f108 0301 	add.w	r3, r8, #1
 8007ab2:	7013      	strb	r3, [r2, #0]
 8007ab4:	e608      	b.n	80076c8 <_dtoa_r+0x698>
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	9a07      	ldr	r2, [sp, #28]
 8007aba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d028      	beq.n	8007b16 <_dtoa_r+0xae6>
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 feda 	bl	8008884 <__multadd>
 8007ad0:	42af      	cmp	r7, r5
 8007ad2:	4681      	mov	r9, r0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	f04f 020a 	mov.w	r2, #10
 8007adc:	4639      	mov	r1, r7
 8007ade:	4658      	mov	r0, fp
 8007ae0:	d107      	bne.n	8007af2 <_dtoa_r+0xac2>
 8007ae2:	f000 fecf 	bl	8008884 <__multadd>
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	4605      	mov	r5, r0
 8007aea:	9b07      	ldr	r3, [sp, #28]
 8007aec:	3301      	adds	r3, #1
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	e774      	b.n	80079dc <_dtoa_r+0x9ac>
 8007af2:	f000 fec7 	bl	8008884 <__multadd>
 8007af6:	4629      	mov	r1, r5
 8007af8:	4607      	mov	r7, r0
 8007afa:	2300      	movs	r3, #0
 8007afc:	220a      	movs	r2, #10
 8007afe:	4658      	mov	r0, fp
 8007b00:	f000 fec0 	bl	8008884 <__multadd>
 8007b04:	4605      	mov	r5, r0
 8007b06:	e7f0      	b.n	8007aea <_dtoa_r+0xaba>
 8007b08:	9b00      	ldr	r3, [sp, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfcc      	ite	gt
 8007b0e:	461e      	movgt	r6, r3
 8007b10:	2601      	movle	r6, #1
 8007b12:	4456      	add	r6, sl
 8007b14:	2700      	movs	r7, #0
 8007b16:	4649      	mov	r1, r9
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f001 f8a8 	bl	8008c70 <__lshift>
 8007b20:	4621      	mov	r1, r4
 8007b22:	4681      	mov	r9, r0
 8007b24:	f001 f910 	bl	8008d48 <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	dcb0      	bgt.n	8007a8e <_dtoa_r+0xa5e>
 8007b2c:	d102      	bne.n	8007b34 <_dtoa_r+0xb04>
 8007b2e:	f018 0f01 	tst.w	r8, #1
 8007b32:	d1ac      	bne.n	8007a8e <_dtoa_r+0xa5e>
 8007b34:	4633      	mov	r3, r6
 8007b36:	461e      	mov	r6, r3
 8007b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b3c:	2a30      	cmp	r2, #48	@ 0x30
 8007b3e:	d0fa      	beq.n	8007b36 <_dtoa_r+0xb06>
 8007b40:	e5c2      	b.n	80076c8 <_dtoa_r+0x698>
 8007b42:	459a      	cmp	sl, r3
 8007b44:	d1a4      	bne.n	8007a90 <_dtoa_r+0xa60>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	2331      	movs	r3, #49	@ 0x31
 8007b4e:	f88a 3000 	strb.w	r3, [sl]
 8007b52:	e5b9      	b.n	80076c8 <_dtoa_r+0x698>
 8007b54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007bb4 <_dtoa_r+0xb84>
 8007b5a:	b11b      	cbz	r3, 8007b64 <_dtoa_r+0xb34>
 8007b5c:	f10a 0308 	add.w	r3, sl, #8
 8007b60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	4650      	mov	r0, sl
 8007b66:	b019      	add	sp, #100	@ 0x64
 8007b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	f77f ae37 	ble.w	80077e2 <_dtoa_r+0x7b2>
 8007b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b78:	2001      	movs	r0, #1
 8007b7a:	e655      	b.n	8007828 <_dtoa_r+0x7f8>
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f77f aed6 	ble.w	8007930 <_dtoa_r+0x900>
 8007b84:	4656      	mov	r6, sl
 8007b86:	4621      	mov	r1, r4
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f7ff f9c7 	bl	8006f1c <quorem>
 8007b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b92:	f806 8b01 	strb.w	r8, [r6], #1
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	eba6 020a 	sub.w	r2, r6, sl
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	ddb3      	ble.n	8007b08 <_dtoa_r+0xad8>
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4658      	mov	r0, fp
 8007ba8:	f000 fe6c 	bl	8008884 <__multadd>
 8007bac:	4681      	mov	r9, r0
 8007bae:	e7ea      	b.n	8007b86 <_dtoa_r+0xb56>
 8007bb0:	08009bc5 	.word	0x08009bc5
 8007bb4:	08009b49 	.word	0x08009b49

08007bb8 <rshift>:
 8007bb8:	6903      	ldr	r3, [r0, #16]
 8007bba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bc6:	f100 0414 	add.w	r4, r0, #20
 8007bca:	dd45      	ble.n	8007c58 <rshift+0xa0>
 8007bcc:	f011 011f 	ands.w	r1, r1, #31
 8007bd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007bd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007bd8:	d10c      	bne.n	8007bf4 <rshift+0x3c>
 8007bda:	f100 0710 	add.w	r7, r0, #16
 8007bde:	4629      	mov	r1, r5
 8007be0:	42b1      	cmp	r1, r6
 8007be2:	d334      	bcc.n	8007c4e <rshift+0x96>
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	1eea      	subs	r2, r5, #3
 8007bea:	4296      	cmp	r6, r2
 8007bec:	bf38      	it	cc
 8007bee:	2300      	movcc	r3, #0
 8007bf0:	4423      	add	r3, r4
 8007bf2:	e015      	b.n	8007c20 <rshift+0x68>
 8007bf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bf8:	f1c1 0820 	rsb	r8, r1, #32
 8007bfc:	40cf      	lsrs	r7, r1
 8007bfe:	f105 0e04 	add.w	lr, r5, #4
 8007c02:	46a1      	mov	r9, r4
 8007c04:	4576      	cmp	r6, lr
 8007c06:	46f4      	mov	ip, lr
 8007c08:	d815      	bhi.n	8007c36 <rshift+0x7e>
 8007c0a:	1a9a      	subs	r2, r3, r2
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	3a04      	subs	r2, #4
 8007c10:	3501      	adds	r5, #1
 8007c12:	42ae      	cmp	r6, r5
 8007c14:	bf38      	it	cc
 8007c16:	2200      	movcc	r2, #0
 8007c18:	18a3      	adds	r3, r4, r2
 8007c1a:	50a7      	str	r7, [r4, r2]
 8007c1c:	b107      	cbz	r7, 8007c20 <rshift+0x68>
 8007c1e:	3304      	adds	r3, #4
 8007c20:	1b1a      	subs	r2, r3, r4
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c28:	bf08      	it	eq
 8007c2a:	2300      	moveq	r3, #0
 8007c2c:	6102      	str	r2, [r0, #16]
 8007c2e:	bf08      	it	eq
 8007c30:	6143      	streq	r3, [r0, #20]
 8007c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c36:	f8dc c000 	ldr.w	ip, [ip]
 8007c3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c3e:	ea4c 0707 	orr.w	r7, ip, r7
 8007c42:	f849 7b04 	str.w	r7, [r9], #4
 8007c46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c4a:	40cf      	lsrs	r7, r1
 8007c4c:	e7da      	b.n	8007c04 <rshift+0x4c>
 8007c4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c52:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c56:	e7c3      	b.n	8007be0 <rshift+0x28>
 8007c58:	4623      	mov	r3, r4
 8007c5a:	e7e1      	b.n	8007c20 <rshift+0x68>

08007c5c <__hexdig_fun>:
 8007c5c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d802      	bhi.n	8007c6a <__hexdig_fun+0xe>
 8007c64:	3820      	subs	r0, #32
 8007c66:	b2c0      	uxtb	r0, r0
 8007c68:	4770      	bx	lr
 8007c6a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d801      	bhi.n	8007c76 <__hexdig_fun+0x1a>
 8007c72:	3847      	subs	r0, #71	@ 0x47
 8007c74:	e7f7      	b.n	8007c66 <__hexdig_fun+0xa>
 8007c76:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d801      	bhi.n	8007c82 <__hexdig_fun+0x26>
 8007c7e:	3827      	subs	r0, #39	@ 0x27
 8007c80:	e7f1      	b.n	8007c66 <__hexdig_fun+0xa>
 8007c82:	2000      	movs	r0, #0
 8007c84:	4770      	bx	lr
	...

08007c88 <__gethex>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	468a      	mov	sl, r1
 8007c90:	9302      	str	r3, [sp, #8]
 8007c92:	680b      	ldr	r3, [r1, #0]
 8007c94:	9001      	str	r0, [sp, #4]
 8007c96:	4690      	mov	r8, r2
 8007c98:	1c9c      	adds	r4, r3, #2
 8007c9a:	46a1      	mov	r9, r4
 8007c9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007ca0:	2830      	cmp	r0, #48	@ 0x30
 8007ca2:	d0fa      	beq.n	8007c9a <__gethex+0x12>
 8007ca4:	eba9 0303 	sub.w	r3, r9, r3
 8007ca8:	f1a3 0b02 	sub.w	fp, r3, #2
 8007cac:	f7ff ffd6 	bl	8007c5c <__hexdig_fun>
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d168      	bne.n	8007d88 <__gethex+0x100>
 8007cb6:	49a0      	ldr	r1, [pc, #640]	@ (8007f38 <__gethex+0x2b0>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	4648      	mov	r0, r9
 8007cbc:	f7ff f8c4 	bl	8006e48 <strncmp>
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d167      	bne.n	8007d96 <__gethex+0x10e>
 8007cc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007cca:	4626      	mov	r6, r4
 8007ccc:	f7ff ffc6 	bl	8007c5c <__hexdig_fun>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d062      	beq.n	8007d9a <__gethex+0x112>
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	7818      	ldrb	r0, [r3, #0]
 8007cd8:	2830      	cmp	r0, #48	@ 0x30
 8007cda:	4699      	mov	r9, r3
 8007cdc:	f103 0301 	add.w	r3, r3, #1
 8007ce0:	d0f9      	beq.n	8007cd6 <__gethex+0x4e>
 8007ce2:	f7ff ffbb 	bl	8007c5c <__hexdig_fun>
 8007ce6:	fab0 f580 	clz	r5, r0
 8007cea:	096d      	lsrs	r5, r5, #5
 8007cec:	f04f 0b01 	mov.w	fp, #1
 8007cf0:	464a      	mov	r2, r9
 8007cf2:	4616      	mov	r6, r2
 8007cf4:	3201      	adds	r2, #1
 8007cf6:	7830      	ldrb	r0, [r6, #0]
 8007cf8:	f7ff ffb0 	bl	8007c5c <__hexdig_fun>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1f8      	bne.n	8007cf2 <__gethex+0x6a>
 8007d00:	498d      	ldr	r1, [pc, #564]	@ (8007f38 <__gethex+0x2b0>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff f89f 	bl	8006e48 <strncmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d13f      	bne.n	8007d8e <__gethex+0x106>
 8007d0e:	b944      	cbnz	r4, 8007d22 <__gethex+0x9a>
 8007d10:	1c74      	adds	r4, r6, #1
 8007d12:	4622      	mov	r2, r4
 8007d14:	4616      	mov	r6, r2
 8007d16:	3201      	adds	r2, #1
 8007d18:	7830      	ldrb	r0, [r6, #0]
 8007d1a:	f7ff ff9f 	bl	8007c5c <__hexdig_fun>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d1f8      	bne.n	8007d14 <__gethex+0x8c>
 8007d22:	1ba4      	subs	r4, r4, r6
 8007d24:	00a7      	lsls	r7, r4, #2
 8007d26:	7833      	ldrb	r3, [r6, #0]
 8007d28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007d2c:	2b50      	cmp	r3, #80	@ 0x50
 8007d2e:	d13e      	bne.n	8007dae <__gethex+0x126>
 8007d30:	7873      	ldrb	r3, [r6, #1]
 8007d32:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d34:	d033      	beq.n	8007d9e <__gethex+0x116>
 8007d36:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d38:	d034      	beq.n	8007da4 <__gethex+0x11c>
 8007d3a:	1c71      	adds	r1, r6, #1
 8007d3c:	2400      	movs	r4, #0
 8007d3e:	7808      	ldrb	r0, [r1, #0]
 8007d40:	f7ff ff8c 	bl	8007c5c <__hexdig_fun>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b18      	cmp	r3, #24
 8007d4a:	d830      	bhi.n	8007dae <__gethex+0x126>
 8007d4c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d54:	f7ff ff82 	bl	8007c5c <__hexdig_fun>
 8007d58:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007d5c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d60:	f1bc 0f18 	cmp.w	ip, #24
 8007d64:	f04f 030a 	mov.w	r3, #10
 8007d68:	d91e      	bls.n	8007da8 <__gethex+0x120>
 8007d6a:	b104      	cbz	r4, 8007d6e <__gethex+0xe6>
 8007d6c:	4252      	negs	r2, r2
 8007d6e:	4417      	add	r7, r2
 8007d70:	f8ca 1000 	str.w	r1, [sl]
 8007d74:	b1ed      	cbz	r5, 8007db2 <__gethex+0x12a>
 8007d76:	f1bb 0f00 	cmp.w	fp, #0
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2506      	moveq	r5, #6
 8007d7e:	2500      	movne	r5, #0
 8007d80:	4628      	mov	r0, r5
 8007d82:	b005      	add	sp, #20
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d88:	2500      	movs	r5, #0
 8007d8a:	462c      	mov	r4, r5
 8007d8c:	e7b0      	b.n	8007cf0 <__gethex+0x68>
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	d1c7      	bne.n	8007d22 <__gethex+0x9a>
 8007d92:	4627      	mov	r7, r4
 8007d94:	e7c7      	b.n	8007d26 <__gethex+0x9e>
 8007d96:	464e      	mov	r6, r9
 8007d98:	462f      	mov	r7, r5
 8007d9a:	2501      	movs	r5, #1
 8007d9c:	e7c3      	b.n	8007d26 <__gethex+0x9e>
 8007d9e:	2400      	movs	r4, #0
 8007da0:	1cb1      	adds	r1, r6, #2
 8007da2:	e7cc      	b.n	8007d3e <__gethex+0xb6>
 8007da4:	2401      	movs	r4, #1
 8007da6:	e7fb      	b.n	8007da0 <__gethex+0x118>
 8007da8:	fb03 0002 	mla	r0, r3, r2, r0
 8007dac:	e7ce      	b.n	8007d4c <__gethex+0xc4>
 8007dae:	4631      	mov	r1, r6
 8007db0:	e7de      	b.n	8007d70 <__gethex+0xe8>
 8007db2:	eba6 0309 	sub.w	r3, r6, r9
 8007db6:	3b01      	subs	r3, #1
 8007db8:	4629      	mov	r1, r5
 8007dba:	2b07      	cmp	r3, #7
 8007dbc:	dc0a      	bgt.n	8007dd4 <__gethex+0x14c>
 8007dbe:	9801      	ldr	r0, [sp, #4]
 8007dc0:	f000 fcfe 	bl	80087c0 <_Balloc>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	b940      	cbnz	r0, 8007dda <__gethex+0x152>
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8007f3c <__gethex+0x2b4>)
 8007dca:	4602      	mov	r2, r0
 8007dcc:	21e4      	movs	r1, #228	@ 0xe4
 8007dce:	485c      	ldr	r0, [pc, #368]	@ (8007f40 <__gethex+0x2b8>)
 8007dd0:	f001 fa96 	bl	8009300 <__assert_func>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	105b      	asrs	r3, r3, #1
 8007dd8:	e7ef      	b.n	8007dba <__gethex+0x132>
 8007dda:	f100 0a14 	add.w	sl, r0, #20
 8007dde:	2300      	movs	r3, #0
 8007de0:	4655      	mov	r5, sl
 8007de2:	469b      	mov	fp, r3
 8007de4:	45b1      	cmp	r9, r6
 8007de6:	d337      	bcc.n	8007e58 <__gethex+0x1d0>
 8007de8:	f845 bb04 	str.w	fp, [r5], #4
 8007dec:	eba5 050a 	sub.w	r5, r5, sl
 8007df0:	10ad      	asrs	r5, r5, #2
 8007df2:	6125      	str	r5, [r4, #16]
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fdd5 	bl	80089a4 <__hi0bits>
 8007dfa:	016d      	lsls	r5, r5, #5
 8007dfc:	f8d8 6000 	ldr.w	r6, [r8]
 8007e00:	1a2d      	subs	r5, r5, r0
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	dd54      	ble.n	8007eb0 <__gethex+0x228>
 8007e06:	1bad      	subs	r5, r5, r6
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f001 f969 	bl	80090e2 <__any_on>
 8007e10:	4681      	mov	r9, r0
 8007e12:	b178      	cbz	r0, 8007e34 <__gethex+0x1ac>
 8007e14:	1e6b      	subs	r3, r5, #1
 8007e16:	1159      	asrs	r1, r3, #5
 8007e18:	f003 021f 	and.w	r2, r3, #31
 8007e1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e20:	f04f 0901 	mov.w	r9, #1
 8007e24:	fa09 f202 	lsl.w	r2, r9, r2
 8007e28:	420a      	tst	r2, r1
 8007e2a:	d003      	beq.n	8007e34 <__gethex+0x1ac>
 8007e2c:	454b      	cmp	r3, r9
 8007e2e:	dc36      	bgt.n	8007e9e <__gethex+0x216>
 8007e30:	f04f 0902 	mov.w	r9, #2
 8007e34:	4629      	mov	r1, r5
 8007e36:	4620      	mov	r0, r4
 8007e38:	f7ff febe 	bl	8007bb8 <rshift>
 8007e3c:	442f      	add	r7, r5
 8007e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e42:	42bb      	cmp	r3, r7
 8007e44:	da42      	bge.n	8007ecc <__gethex+0x244>
 8007e46:	9801      	ldr	r0, [sp, #4]
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f000 fcf9 	bl	8008840 <_Bfree>
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e50:	2300      	movs	r3, #0
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	25a3      	movs	r5, #163	@ 0xa3
 8007e56:	e793      	b.n	8007d80 <__gethex+0xf8>
 8007e58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e5c:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e5e:	d012      	beq.n	8007e86 <__gethex+0x1fe>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d104      	bne.n	8007e6e <__gethex+0x1e6>
 8007e64:	f845 bb04 	str.w	fp, [r5], #4
 8007e68:	f04f 0b00 	mov.w	fp, #0
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	7830      	ldrb	r0, [r6, #0]
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	f7ff fef3 	bl	8007c5c <__hexdig_fun>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	f000 000f 	and.w	r0, r0, #15
 8007e7c:	4098      	lsls	r0, r3
 8007e7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e82:	3304      	adds	r3, #4
 8007e84:	e7ae      	b.n	8007de4 <__gethex+0x15c>
 8007e86:	45b1      	cmp	r9, r6
 8007e88:	d8ea      	bhi.n	8007e60 <__gethex+0x1d8>
 8007e8a:	492b      	ldr	r1, [pc, #172]	@ (8007f38 <__gethex+0x2b0>)
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7fe ffd9 	bl	8006e48 <strncmp>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d1e1      	bne.n	8007e60 <__gethex+0x1d8>
 8007e9c:	e7a2      	b.n	8007de4 <__gethex+0x15c>
 8007e9e:	1ea9      	subs	r1, r5, #2
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f001 f91e 	bl	80090e2 <__any_on>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0c2      	beq.n	8007e30 <__gethex+0x1a8>
 8007eaa:	f04f 0903 	mov.w	r9, #3
 8007eae:	e7c1      	b.n	8007e34 <__gethex+0x1ac>
 8007eb0:	da09      	bge.n	8007ec6 <__gethex+0x23e>
 8007eb2:	1b75      	subs	r5, r6, r5
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	9801      	ldr	r0, [sp, #4]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	f000 fed9 	bl	8008c70 <__lshift>
 8007ebe:	1b7f      	subs	r7, r7, r5
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	f100 0a14 	add.w	sl, r0, #20
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	e7b8      	b.n	8007e3e <__gethex+0x1b6>
 8007ecc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ed0:	42bd      	cmp	r5, r7
 8007ed2:	dd6f      	ble.n	8007fb4 <__gethex+0x32c>
 8007ed4:	1bed      	subs	r5, r5, r7
 8007ed6:	42ae      	cmp	r6, r5
 8007ed8:	dc34      	bgt.n	8007f44 <__gethex+0x2bc>
 8007eda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d022      	beq.n	8007f28 <__gethex+0x2a0>
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d024      	beq.n	8007f30 <__gethex+0x2a8>
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d115      	bne.n	8007f16 <__gethex+0x28e>
 8007eea:	42ae      	cmp	r6, r5
 8007eec:	d113      	bne.n	8007f16 <__gethex+0x28e>
 8007eee:	2e01      	cmp	r6, #1
 8007ef0:	d10b      	bne.n	8007f0a <__gethex+0x282>
 8007ef2:	9a02      	ldr	r2, [sp, #8]
 8007ef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	2301      	movs	r3, #1
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	f8ca 3000 	str.w	r3, [sl]
 8007f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f04:	2562      	movs	r5, #98	@ 0x62
 8007f06:	601c      	str	r4, [r3, #0]
 8007f08:	e73a      	b.n	8007d80 <__gethex+0xf8>
 8007f0a:	1e71      	subs	r1, r6, #1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f001 f8e8 	bl	80090e2 <__any_on>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d1ed      	bne.n	8007ef2 <__gethex+0x26a>
 8007f16:	9801      	ldr	r0, [sp, #4]
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f000 fc91 	bl	8008840 <_Bfree>
 8007f1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f20:	2300      	movs	r3, #0
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	2550      	movs	r5, #80	@ 0x50
 8007f26:	e72b      	b.n	8007d80 <__gethex+0xf8>
 8007f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1f3      	bne.n	8007f16 <__gethex+0x28e>
 8007f2e:	e7e0      	b.n	8007ef2 <__gethex+0x26a>
 8007f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1dd      	bne.n	8007ef2 <__gethex+0x26a>
 8007f36:	e7ee      	b.n	8007f16 <__gethex+0x28e>
 8007f38:	080099e9 	.word	0x080099e9
 8007f3c:	08009bc5 	.word	0x08009bc5
 8007f40:	08009bd6 	.word	0x08009bd6
 8007f44:	1e6f      	subs	r7, r5, #1
 8007f46:	f1b9 0f00 	cmp.w	r9, #0
 8007f4a:	d130      	bne.n	8007fae <__gethex+0x326>
 8007f4c:	b127      	cbz	r7, 8007f58 <__gethex+0x2d0>
 8007f4e:	4639      	mov	r1, r7
 8007f50:	4620      	mov	r0, r4
 8007f52:	f001 f8c6 	bl	80090e2 <__any_on>
 8007f56:	4681      	mov	r9, r0
 8007f58:	117a      	asrs	r2, r7, #5
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f60:	f007 071f 	and.w	r7, r7, #31
 8007f64:	40bb      	lsls	r3, r7
 8007f66:	4213      	tst	r3, r2
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	bf18      	it	ne
 8007f6e:	f049 0902 	orrne.w	r9, r9, #2
 8007f72:	f7ff fe21 	bl	8007bb8 <rshift>
 8007f76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f7a:	1b76      	subs	r6, r6, r5
 8007f7c:	2502      	movs	r5, #2
 8007f7e:	f1b9 0f00 	cmp.w	r9, #0
 8007f82:	d047      	beq.n	8008014 <__gethex+0x38c>
 8007f84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d015      	beq.n	8007fb8 <__gethex+0x330>
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d017      	beq.n	8007fc0 <__gethex+0x338>
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d109      	bne.n	8007fa8 <__gethex+0x320>
 8007f94:	f019 0f02 	tst.w	r9, #2
 8007f98:	d006      	beq.n	8007fa8 <__gethex+0x320>
 8007f9a:	f8da 3000 	ldr.w	r3, [sl]
 8007f9e:	ea49 0903 	orr.w	r9, r9, r3
 8007fa2:	f019 0f01 	tst.w	r9, #1
 8007fa6:	d10e      	bne.n	8007fc6 <__gethex+0x33e>
 8007fa8:	f045 0510 	orr.w	r5, r5, #16
 8007fac:	e032      	b.n	8008014 <__gethex+0x38c>
 8007fae:	f04f 0901 	mov.w	r9, #1
 8007fb2:	e7d1      	b.n	8007f58 <__gethex+0x2d0>
 8007fb4:	2501      	movs	r5, #1
 8007fb6:	e7e2      	b.n	8007f7e <__gethex+0x2f6>
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	f1c3 0301 	rsb	r3, r3, #1
 8007fbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f0      	beq.n	8007fa8 <__gethex+0x320>
 8007fc6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fca:	f104 0314 	add.w	r3, r4, #20
 8007fce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007fd2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007fd6:	f04f 0c00 	mov.w	ip, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007fe4:	d01b      	beq.n	800801e <__gethex+0x396>
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	6002      	str	r2, [r0, #0]
 8007fea:	2d02      	cmp	r5, #2
 8007fec:	f104 0314 	add.w	r3, r4, #20
 8007ff0:	d13c      	bne.n	800806c <__gethex+0x3e4>
 8007ff2:	f8d8 2000 	ldr.w	r2, [r8]
 8007ff6:	3a01      	subs	r2, #1
 8007ff8:	42b2      	cmp	r2, r6
 8007ffa:	d109      	bne.n	8008010 <__gethex+0x388>
 8007ffc:	1171      	asrs	r1, r6, #5
 8007ffe:	2201      	movs	r2, #1
 8008000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008004:	f006 061f 	and.w	r6, r6, #31
 8008008:	fa02 f606 	lsl.w	r6, r2, r6
 800800c:	421e      	tst	r6, r3
 800800e:	d13a      	bne.n	8008086 <__gethex+0x3fe>
 8008010:	f045 0520 	orr.w	r5, r5, #32
 8008014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008016:	601c      	str	r4, [r3, #0]
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	601f      	str	r7, [r3, #0]
 800801c:	e6b0      	b.n	8007d80 <__gethex+0xf8>
 800801e:	4299      	cmp	r1, r3
 8008020:	f843 cc04 	str.w	ip, [r3, #-4]
 8008024:	d8d9      	bhi.n	8007fda <__gethex+0x352>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	459b      	cmp	fp, r3
 800802a:	db17      	blt.n	800805c <__gethex+0x3d4>
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	9801      	ldr	r0, [sp, #4]
 8008030:	3101      	adds	r1, #1
 8008032:	f000 fbc5 	bl	80087c0 <_Balloc>
 8008036:	4681      	mov	r9, r0
 8008038:	b918      	cbnz	r0, 8008042 <__gethex+0x3ba>
 800803a:	4b1a      	ldr	r3, [pc, #104]	@ (80080a4 <__gethex+0x41c>)
 800803c:	4602      	mov	r2, r0
 800803e:	2184      	movs	r1, #132	@ 0x84
 8008040:	e6c5      	b.n	8007dce <__gethex+0x146>
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	3202      	adds	r2, #2
 8008046:	f104 010c 	add.w	r1, r4, #12
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	300c      	adds	r0, #12
 800804e:	f7fe ff46 	bl	8006ede <memcpy>
 8008052:	4621      	mov	r1, r4
 8008054:	9801      	ldr	r0, [sp, #4]
 8008056:	f000 fbf3 	bl	8008840 <_Bfree>
 800805a:	464c      	mov	r4, r9
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008064:	6122      	str	r2, [r4, #16]
 8008066:	2201      	movs	r2, #1
 8008068:	615a      	str	r2, [r3, #20]
 800806a:	e7be      	b.n	8007fea <__gethex+0x362>
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	455a      	cmp	r2, fp
 8008070:	dd0b      	ble.n	800808a <__gethex+0x402>
 8008072:	2101      	movs	r1, #1
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fd9f 	bl	8007bb8 <rshift>
 800807a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800807e:	3701      	adds	r7, #1
 8008080:	42bb      	cmp	r3, r7
 8008082:	f6ff aee0 	blt.w	8007e46 <__gethex+0x1be>
 8008086:	2501      	movs	r5, #1
 8008088:	e7c2      	b.n	8008010 <__gethex+0x388>
 800808a:	f016 061f 	ands.w	r6, r6, #31
 800808e:	d0fa      	beq.n	8008086 <__gethex+0x3fe>
 8008090:	4453      	add	r3, sl
 8008092:	f1c6 0620 	rsb	r6, r6, #32
 8008096:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800809a:	f000 fc83 	bl	80089a4 <__hi0bits>
 800809e:	42b0      	cmp	r0, r6
 80080a0:	dbe7      	blt.n	8008072 <__gethex+0x3ea>
 80080a2:	e7f0      	b.n	8008086 <__gethex+0x3fe>
 80080a4:	08009bc5 	.word	0x08009bc5

080080a8 <L_shift>:
 80080a8:	f1c2 0208 	rsb	r2, r2, #8
 80080ac:	0092      	lsls	r2, r2, #2
 80080ae:	b570      	push	{r4, r5, r6, lr}
 80080b0:	f1c2 0620 	rsb	r6, r2, #32
 80080b4:	6843      	ldr	r3, [r0, #4]
 80080b6:	6804      	ldr	r4, [r0, #0]
 80080b8:	fa03 f506 	lsl.w	r5, r3, r6
 80080bc:	432c      	orrs	r4, r5
 80080be:	40d3      	lsrs	r3, r2
 80080c0:	6004      	str	r4, [r0, #0]
 80080c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80080c6:	4288      	cmp	r0, r1
 80080c8:	d3f4      	bcc.n	80080b4 <L_shift+0xc>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}

080080cc <__match>:
 80080cc:	b530      	push	{r4, r5, lr}
 80080ce:	6803      	ldr	r3, [r0, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d6:	b914      	cbnz	r4, 80080de <__match+0x12>
 80080d8:	6003      	str	r3, [r0, #0]
 80080da:	2001      	movs	r0, #1
 80080dc:	bd30      	pop	{r4, r5, pc}
 80080de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80080e6:	2d19      	cmp	r5, #25
 80080e8:	bf98      	it	ls
 80080ea:	3220      	addls	r2, #32
 80080ec:	42a2      	cmp	r2, r4
 80080ee:	d0f0      	beq.n	80080d2 <__match+0x6>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7f3      	b.n	80080dc <__match+0x10>

080080f4 <__hexnan>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	680b      	ldr	r3, [r1, #0]
 80080fa:	6801      	ldr	r1, [r0, #0]
 80080fc:	115e      	asrs	r6, r3, #5
 80080fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008102:	f013 031f 	ands.w	r3, r3, #31
 8008106:	b087      	sub	sp, #28
 8008108:	bf18      	it	ne
 800810a:	3604      	addne	r6, #4
 800810c:	2500      	movs	r5, #0
 800810e:	1f37      	subs	r7, r6, #4
 8008110:	4682      	mov	sl, r0
 8008112:	4690      	mov	r8, r2
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f846 5c04 	str.w	r5, [r6, #-4]
 800811a:	46b9      	mov	r9, r7
 800811c:	463c      	mov	r4, r7
 800811e:	9502      	str	r5, [sp, #8]
 8008120:	46ab      	mov	fp, r5
 8008122:	784a      	ldrb	r2, [r1, #1]
 8008124:	1c4b      	adds	r3, r1, #1
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	b342      	cbz	r2, 800817c <__hexnan+0x88>
 800812a:	4610      	mov	r0, r2
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	9204      	str	r2, [sp, #16]
 8008130:	f7ff fd94 	bl	8007c5c <__hexdig_fun>
 8008134:	2800      	cmp	r0, #0
 8008136:	d151      	bne.n	80081dc <__hexnan+0xe8>
 8008138:	9a04      	ldr	r2, [sp, #16]
 800813a:	9905      	ldr	r1, [sp, #20]
 800813c:	2a20      	cmp	r2, #32
 800813e:	d818      	bhi.n	8008172 <__hexnan+0x7e>
 8008140:	9b02      	ldr	r3, [sp, #8]
 8008142:	459b      	cmp	fp, r3
 8008144:	dd13      	ble.n	800816e <__hexnan+0x7a>
 8008146:	454c      	cmp	r4, r9
 8008148:	d206      	bcs.n	8008158 <__hexnan+0x64>
 800814a:	2d07      	cmp	r5, #7
 800814c:	dc04      	bgt.n	8008158 <__hexnan+0x64>
 800814e:	462a      	mov	r2, r5
 8008150:	4649      	mov	r1, r9
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff ffa8 	bl	80080a8 <L_shift>
 8008158:	4544      	cmp	r4, r8
 800815a:	d952      	bls.n	8008202 <__hexnan+0x10e>
 800815c:	2300      	movs	r3, #0
 800815e:	f1a4 0904 	sub.w	r9, r4, #4
 8008162:	f844 3c04 	str.w	r3, [r4, #-4]
 8008166:	f8cd b008 	str.w	fp, [sp, #8]
 800816a:	464c      	mov	r4, r9
 800816c:	461d      	mov	r5, r3
 800816e:	9903      	ldr	r1, [sp, #12]
 8008170:	e7d7      	b.n	8008122 <__hexnan+0x2e>
 8008172:	2a29      	cmp	r2, #41	@ 0x29
 8008174:	d157      	bne.n	8008226 <__hexnan+0x132>
 8008176:	3102      	adds	r1, #2
 8008178:	f8ca 1000 	str.w	r1, [sl]
 800817c:	f1bb 0f00 	cmp.w	fp, #0
 8008180:	d051      	beq.n	8008226 <__hexnan+0x132>
 8008182:	454c      	cmp	r4, r9
 8008184:	d206      	bcs.n	8008194 <__hexnan+0xa0>
 8008186:	2d07      	cmp	r5, #7
 8008188:	dc04      	bgt.n	8008194 <__hexnan+0xa0>
 800818a:	462a      	mov	r2, r5
 800818c:	4649      	mov	r1, r9
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ff8a 	bl	80080a8 <L_shift>
 8008194:	4544      	cmp	r4, r8
 8008196:	d936      	bls.n	8008206 <__hexnan+0x112>
 8008198:	f1a8 0204 	sub.w	r2, r8, #4
 800819c:	4623      	mov	r3, r4
 800819e:	f853 1b04 	ldr.w	r1, [r3], #4
 80081a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80081a6:	429f      	cmp	r7, r3
 80081a8:	d2f9      	bcs.n	800819e <__hexnan+0xaa>
 80081aa:	1b3b      	subs	r3, r7, r4
 80081ac:	f023 0303 	bic.w	r3, r3, #3
 80081b0:	3304      	adds	r3, #4
 80081b2:	3401      	adds	r4, #1
 80081b4:	3e03      	subs	r6, #3
 80081b6:	42b4      	cmp	r4, r6
 80081b8:	bf88      	it	hi
 80081ba:	2304      	movhi	r3, #4
 80081bc:	4443      	add	r3, r8
 80081be:	2200      	movs	r2, #0
 80081c0:	f843 2b04 	str.w	r2, [r3], #4
 80081c4:	429f      	cmp	r7, r3
 80081c6:	d2fb      	bcs.n	80081c0 <__hexnan+0xcc>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	b91b      	cbnz	r3, 80081d4 <__hexnan+0xe0>
 80081cc:	4547      	cmp	r7, r8
 80081ce:	d128      	bne.n	8008222 <__hexnan+0x12e>
 80081d0:	2301      	movs	r3, #1
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	2005      	movs	r0, #5
 80081d6:	b007      	add	sp, #28
 80081d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	3501      	adds	r5, #1
 80081de:	2d08      	cmp	r5, #8
 80081e0:	f10b 0b01 	add.w	fp, fp, #1
 80081e4:	dd06      	ble.n	80081f4 <__hexnan+0x100>
 80081e6:	4544      	cmp	r4, r8
 80081e8:	d9c1      	bls.n	800816e <__hexnan+0x7a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80081f0:	2501      	movs	r5, #1
 80081f2:	3c04      	subs	r4, #4
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	f000 000f 	and.w	r0, r0, #15
 80081fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	e7b5      	b.n	800816e <__hexnan+0x7a>
 8008202:	2508      	movs	r5, #8
 8008204:	e7b3      	b.n	800816e <__hexnan+0x7a>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0dd      	beq.n	80081c8 <__hexnan+0xd4>
 800820c:	f1c3 0320 	rsb	r3, r3, #32
 8008210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008214:	40da      	lsrs	r2, r3
 8008216:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800821a:	4013      	ands	r3, r2
 800821c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008220:	e7d2      	b.n	80081c8 <__hexnan+0xd4>
 8008222:	3f04      	subs	r7, #4
 8008224:	e7d0      	b.n	80081c8 <__hexnan+0xd4>
 8008226:	2004      	movs	r0, #4
 8008228:	e7d5      	b.n	80081d6 <__hexnan+0xe2>

0800822a <__ssputs_r>:
 800822a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822e:	688e      	ldr	r6, [r1, #8]
 8008230:	461f      	mov	r7, r3
 8008232:	42be      	cmp	r6, r7
 8008234:	680b      	ldr	r3, [r1, #0]
 8008236:	4682      	mov	sl, r0
 8008238:	460c      	mov	r4, r1
 800823a:	4690      	mov	r8, r2
 800823c:	d82d      	bhi.n	800829a <__ssputs_r+0x70>
 800823e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008242:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008246:	d026      	beq.n	8008296 <__ssputs_r+0x6c>
 8008248:	6965      	ldr	r5, [r4, #20]
 800824a:	6909      	ldr	r1, [r1, #16]
 800824c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008250:	eba3 0901 	sub.w	r9, r3, r1
 8008254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008258:	1c7b      	adds	r3, r7, #1
 800825a:	444b      	add	r3, r9
 800825c:	106d      	asrs	r5, r5, #1
 800825e:	429d      	cmp	r5, r3
 8008260:	bf38      	it	cc
 8008262:	461d      	movcc	r5, r3
 8008264:	0553      	lsls	r3, r2, #21
 8008266:	d527      	bpl.n	80082b8 <__ssputs_r+0x8e>
 8008268:	4629      	mov	r1, r5
 800826a:	f000 f95f 	bl	800852c <_malloc_r>
 800826e:	4606      	mov	r6, r0
 8008270:	b360      	cbz	r0, 80082cc <__ssputs_r+0xa2>
 8008272:	6921      	ldr	r1, [r4, #16]
 8008274:	464a      	mov	r2, r9
 8008276:	f7fe fe32 	bl	8006ede <memcpy>
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	6126      	str	r6, [r4, #16]
 8008288:	6165      	str	r5, [r4, #20]
 800828a:	444e      	add	r6, r9
 800828c:	eba5 0509 	sub.w	r5, r5, r9
 8008290:	6026      	str	r6, [r4, #0]
 8008292:	60a5      	str	r5, [r4, #8]
 8008294:	463e      	mov	r6, r7
 8008296:	42be      	cmp	r6, r7
 8008298:	d900      	bls.n	800829c <__ssputs_r+0x72>
 800829a:	463e      	mov	r6, r7
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	4632      	mov	r2, r6
 80082a0:	4641      	mov	r1, r8
 80082a2:	f000 ffbd 	bl	8009220 <memmove>
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	1b9b      	subs	r3, r3, r6
 80082aa:	60a3      	str	r3, [r4, #8]
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	4433      	add	r3, r6
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	2000      	movs	r0, #0
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	462a      	mov	r2, r5
 80082ba:	f000 ff76 	bl	80091aa <_realloc_r>
 80082be:	4606      	mov	r6, r0
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1e0      	bne.n	8008286 <__ssputs_r+0x5c>
 80082c4:	6921      	ldr	r1, [r4, #16]
 80082c6:	4650      	mov	r0, sl
 80082c8:	f001 f84c 	bl	8009364 <_free_r>
 80082cc:	230c      	movs	r3, #12
 80082ce:	f8ca 3000 	str.w	r3, [sl]
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082de:	e7e9      	b.n	80082b4 <__ssputs_r+0x8a>

080082e0 <_svfiprintf_r>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	4698      	mov	r8, r3
 80082e6:	898b      	ldrh	r3, [r1, #12]
 80082e8:	061b      	lsls	r3, r3, #24
 80082ea:	b09d      	sub	sp, #116	@ 0x74
 80082ec:	4607      	mov	r7, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	4614      	mov	r4, r2
 80082f2:	d510      	bpl.n	8008316 <_svfiprintf_r+0x36>
 80082f4:	690b      	ldr	r3, [r1, #16]
 80082f6:	b973      	cbnz	r3, 8008316 <_svfiprintf_r+0x36>
 80082f8:	2140      	movs	r1, #64	@ 0x40
 80082fa:	f000 f917 	bl	800852c <_malloc_r>
 80082fe:	6028      	str	r0, [r5, #0]
 8008300:	6128      	str	r0, [r5, #16]
 8008302:	b930      	cbnz	r0, 8008312 <_svfiprintf_r+0x32>
 8008304:	230c      	movs	r3, #12
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800830c:	b01d      	add	sp, #116	@ 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	2340      	movs	r3, #64	@ 0x40
 8008314:	616b      	str	r3, [r5, #20]
 8008316:	2300      	movs	r3, #0
 8008318:	9309      	str	r3, [sp, #36]	@ 0x24
 800831a:	2320      	movs	r3, #32
 800831c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008320:	f8cd 800c 	str.w	r8, [sp, #12]
 8008324:	2330      	movs	r3, #48	@ 0x30
 8008326:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084c4 <_svfiprintf_r+0x1e4>
 800832a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800832e:	f04f 0901 	mov.w	r9, #1
 8008332:	4623      	mov	r3, r4
 8008334:	469a      	mov	sl, r3
 8008336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833a:	b10a      	cbz	r2, 8008340 <_svfiprintf_r+0x60>
 800833c:	2a25      	cmp	r2, #37	@ 0x25
 800833e:	d1f9      	bne.n	8008334 <_svfiprintf_r+0x54>
 8008340:	ebba 0b04 	subs.w	fp, sl, r4
 8008344:	d00b      	beq.n	800835e <_svfiprintf_r+0x7e>
 8008346:	465b      	mov	r3, fp
 8008348:	4622      	mov	r2, r4
 800834a:	4629      	mov	r1, r5
 800834c:	4638      	mov	r0, r7
 800834e:	f7ff ff6c 	bl	800822a <__ssputs_r>
 8008352:	3001      	adds	r0, #1
 8008354:	f000 80a7 	beq.w	80084a6 <_svfiprintf_r+0x1c6>
 8008358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800835a:	445a      	add	r2, fp
 800835c:	9209      	str	r2, [sp, #36]	@ 0x24
 800835e:	f89a 3000 	ldrb.w	r3, [sl]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 809f 	beq.w	80084a6 <_svfiprintf_r+0x1c6>
 8008368:	2300      	movs	r3, #0
 800836a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800836e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008372:	f10a 0a01 	add.w	sl, sl, #1
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	9307      	str	r3, [sp, #28]
 800837a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800837e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008380:	4654      	mov	r4, sl
 8008382:	2205      	movs	r2, #5
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	484e      	ldr	r0, [pc, #312]	@ (80084c4 <_svfiprintf_r+0x1e4>)
 800838a:	f7f7 ff21 	bl	80001d0 <memchr>
 800838e:	9a04      	ldr	r2, [sp, #16]
 8008390:	b9d8      	cbnz	r0, 80083ca <_svfiprintf_r+0xea>
 8008392:	06d0      	lsls	r0, r2, #27
 8008394:	bf44      	itt	mi
 8008396:	2320      	movmi	r3, #32
 8008398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839c:	0711      	lsls	r1, r2, #28
 800839e:	bf44      	itt	mi
 80083a0:	232b      	movmi	r3, #43	@ 0x2b
 80083a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a6:	f89a 3000 	ldrb.w	r3, [sl]
 80083aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ac:	d015      	beq.n	80083da <_svfiprintf_r+0xfa>
 80083ae:	9a07      	ldr	r2, [sp, #28]
 80083b0:	4654      	mov	r4, sl
 80083b2:	2000      	movs	r0, #0
 80083b4:	f04f 0c0a 	mov.w	ip, #10
 80083b8:	4621      	mov	r1, r4
 80083ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083be:	3b30      	subs	r3, #48	@ 0x30
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	d94b      	bls.n	800845c <_svfiprintf_r+0x17c>
 80083c4:	b1b0      	cbz	r0, 80083f4 <_svfiprintf_r+0x114>
 80083c6:	9207      	str	r2, [sp, #28]
 80083c8:	e014      	b.n	80083f4 <_svfiprintf_r+0x114>
 80083ca:	eba0 0308 	sub.w	r3, r0, r8
 80083ce:	fa09 f303 	lsl.w	r3, r9, r3
 80083d2:	4313      	orrs	r3, r2
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	46a2      	mov	sl, r4
 80083d8:	e7d2      	b.n	8008380 <_svfiprintf_r+0xa0>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	1d19      	adds	r1, r3, #4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	9103      	str	r1, [sp, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bfbb      	ittet	lt
 80083e6:	425b      	neglt	r3, r3
 80083e8:	f042 0202 	orrlt.w	r2, r2, #2
 80083ec:	9307      	strge	r3, [sp, #28]
 80083ee:	9307      	strlt	r3, [sp, #28]
 80083f0:	bfb8      	it	lt
 80083f2:	9204      	strlt	r2, [sp, #16]
 80083f4:	7823      	ldrb	r3, [r4, #0]
 80083f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80083f8:	d10a      	bne.n	8008410 <_svfiprintf_r+0x130>
 80083fa:	7863      	ldrb	r3, [r4, #1]
 80083fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fe:	d132      	bne.n	8008466 <_svfiprintf_r+0x186>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	1d1a      	adds	r2, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	9203      	str	r2, [sp, #12]
 8008408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800840c:	3402      	adds	r4, #2
 800840e:	9305      	str	r3, [sp, #20]
 8008410:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084d4 <_svfiprintf_r+0x1f4>
 8008414:	7821      	ldrb	r1, [r4, #0]
 8008416:	2203      	movs	r2, #3
 8008418:	4650      	mov	r0, sl
 800841a:	f7f7 fed9 	bl	80001d0 <memchr>
 800841e:	b138      	cbz	r0, 8008430 <_svfiprintf_r+0x150>
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	eba0 000a 	sub.w	r0, r0, sl
 8008426:	2240      	movs	r2, #64	@ 0x40
 8008428:	4082      	lsls	r2, r0
 800842a:	4313      	orrs	r3, r2
 800842c:	3401      	adds	r4, #1
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008434:	4824      	ldr	r0, [pc, #144]	@ (80084c8 <_svfiprintf_r+0x1e8>)
 8008436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800843a:	2206      	movs	r2, #6
 800843c:	f7f7 fec8 	bl	80001d0 <memchr>
 8008440:	2800      	cmp	r0, #0
 8008442:	d036      	beq.n	80084b2 <_svfiprintf_r+0x1d2>
 8008444:	4b21      	ldr	r3, [pc, #132]	@ (80084cc <_svfiprintf_r+0x1ec>)
 8008446:	bb1b      	cbnz	r3, 8008490 <_svfiprintf_r+0x1b0>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	3307      	adds	r3, #7
 800844c:	f023 0307 	bic.w	r3, r3, #7
 8008450:	3308      	adds	r3, #8
 8008452:	9303      	str	r3, [sp, #12]
 8008454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008456:	4433      	add	r3, r6
 8008458:	9309      	str	r3, [sp, #36]	@ 0x24
 800845a:	e76a      	b.n	8008332 <_svfiprintf_r+0x52>
 800845c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008460:	460c      	mov	r4, r1
 8008462:	2001      	movs	r0, #1
 8008464:	e7a8      	b.n	80083b8 <_svfiprintf_r+0xd8>
 8008466:	2300      	movs	r3, #0
 8008468:	3401      	adds	r4, #1
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	4619      	mov	r1, r3
 800846e:	f04f 0c0a 	mov.w	ip, #10
 8008472:	4620      	mov	r0, r4
 8008474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008478:	3a30      	subs	r2, #48	@ 0x30
 800847a:	2a09      	cmp	r2, #9
 800847c:	d903      	bls.n	8008486 <_svfiprintf_r+0x1a6>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c6      	beq.n	8008410 <_svfiprintf_r+0x130>
 8008482:	9105      	str	r1, [sp, #20]
 8008484:	e7c4      	b.n	8008410 <_svfiprintf_r+0x130>
 8008486:	fb0c 2101 	mla	r1, ip, r1, r2
 800848a:	4604      	mov	r4, r0
 800848c:	2301      	movs	r3, #1
 800848e:	e7f0      	b.n	8008472 <_svfiprintf_r+0x192>
 8008490:	ab03      	add	r3, sp, #12
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	462a      	mov	r2, r5
 8008496:	4b0e      	ldr	r3, [pc, #56]	@ (80084d0 <_svfiprintf_r+0x1f0>)
 8008498:	a904      	add	r1, sp, #16
 800849a:	4638      	mov	r0, r7
 800849c:	f7fc ffa0 	bl	80053e0 <_printf_float>
 80084a0:	1c42      	adds	r2, r0, #1
 80084a2:	4606      	mov	r6, r0
 80084a4:	d1d6      	bne.n	8008454 <_svfiprintf_r+0x174>
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	065b      	lsls	r3, r3, #25
 80084aa:	f53f af2d 	bmi.w	8008308 <_svfiprintf_r+0x28>
 80084ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084b0:	e72c      	b.n	800830c <_svfiprintf_r+0x2c>
 80084b2:	ab03      	add	r3, sp, #12
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	462a      	mov	r2, r5
 80084b8:	4b05      	ldr	r3, [pc, #20]	@ (80084d0 <_svfiprintf_r+0x1f0>)
 80084ba:	a904      	add	r1, sp, #16
 80084bc:	4638      	mov	r0, r7
 80084be:	f7fd fa27 	bl	8005910 <_printf_i>
 80084c2:	e7ed      	b.n	80084a0 <_svfiprintf_r+0x1c0>
 80084c4:	08009c36 	.word	0x08009c36
 80084c8:	08009c40 	.word	0x08009c40
 80084cc:	080053e1 	.word	0x080053e1
 80084d0:	0800822b 	.word	0x0800822b
 80084d4:	08009c3c 	.word	0x08009c3c

080084d8 <malloc>:
 80084d8:	4b02      	ldr	r3, [pc, #8]	@ (80084e4 <malloc+0xc>)
 80084da:	4601      	mov	r1, r0
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f000 b825 	b.w	800852c <_malloc_r>
 80084e2:	bf00      	nop
 80084e4:	20000184 	.word	0x20000184

080084e8 <sbrk_aligned>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008528 <sbrk_aligned+0x40>)
 80084ec:	460c      	mov	r4, r1
 80084ee:	6831      	ldr	r1, [r6, #0]
 80084f0:	4605      	mov	r5, r0
 80084f2:	b911      	cbnz	r1, 80084fa <sbrk_aligned+0x12>
 80084f4:	f000 fee2 	bl	80092bc <_sbrk_r>
 80084f8:	6030      	str	r0, [r6, #0]
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 fedd 	bl	80092bc <_sbrk_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d103      	bne.n	800850e <sbrk_aligned+0x26>
 8008506:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800850a:	4620      	mov	r0, r4
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	1cc4      	adds	r4, r0, #3
 8008510:	f024 0403 	bic.w	r4, r4, #3
 8008514:	42a0      	cmp	r0, r4
 8008516:	d0f8      	beq.n	800850a <sbrk_aligned+0x22>
 8008518:	1a21      	subs	r1, r4, r0
 800851a:	4628      	mov	r0, r5
 800851c:	f000 fece 	bl	80092bc <_sbrk_r>
 8008520:	3001      	adds	r0, #1
 8008522:	d1f2      	bne.n	800850a <sbrk_aligned+0x22>
 8008524:	e7ef      	b.n	8008506 <sbrk_aligned+0x1e>
 8008526:	bf00      	nop
 8008528:	2000049c 	.word	0x2000049c

0800852c <_malloc_r>:
 800852c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008530:	1ccd      	adds	r5, r1, #3
 8008532:	f025 0503 	bic.w	r5, r5, #3
 8008536:	3508      	adds	r5, #8
 8008538:	2d0c      	cmp	r5, #12
 800853a:	bf38      	it	cc
 800853c:	250c      	movcc	r5, #12
 800853e:	2d00      	cmp	r5, #0
 8008540:	4606      	mov	r6, r0
 8008542:	db01      	blt.n	8008548 <_malloc_r+0x1c>
 8008544:	42a9      	cmp	r1, r5
 8008546:	d904      	bls.n	8008552 <_malloc_r+0x26>
 8008548:	230c      	movs	r3, #12
 800854a:	6033      	str	r3, [r6, #0]
 800854c:	2000      	movs	r0, #0
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008628 <_malloc_r+0xfc>
 8008556:	f000 f927 	bl	80087a8 <__malloc_lock>
 800855a:	f8d8 3000 	ldr.w	r3, [r8]
 800855e:	461c      	mov	r4, r3
 8008560:	bb44      	cbnz	r4, 80085b4 <_malloc_r+0x88>
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ffbf 	bl	80084e8 <sbrk_aligned>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	4604      	mov	r4, r0
 800856e:	d158      	bne.n	8008622 <_malloc_r+0xf6>
 8008570:	f8d8 4000 	ldr.w	r4, [r8]
 8008574:	4627      	mov	r7, r4
 8008576:	2f00      	cmp	r7, #0
 8008578:	d143      	bne.n	8008602 <_malloc_r+0xd6>
 800857a:	2c00      	cmp	r4, #0
 800857c:	d04b      	beq.n	8008616 <_malloc_r+0xea>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4639      	mov	r1, r7
 8008582:	4630      	mov	r0, r6
 8008584:	eb04 0903 	add.w	r9, r4, r3
 8008588:	f000 fe98 	bl	80092bc <_sbrk_r>
 800858c:	4581      	cmp	r9, r0
 800858e:	d142      	bne.n	8008616 <_malloc_r+0xea>
 8008590:	6821      	ldr	r1, [r4, #0]
 8008592:	1a6d      	subs	r5, r5, r1
 8008594:	4629      	mov	r1, r5
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ffa6 	bl	80084e8 <sbrk_aligned>
 800859c:	3001      	adds	r0, #1
 800859e:	d03a      	beq.n	8008616 <_malloc_r+0xea>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	442b      	add	r3, r5
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	f8d8 3000 	ldr.w	r3, [r8]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	bb62      	cbnz	r2, 8008608 <_malloc_r+0xdc>
 80085ae:	f8c8 7000 	str.w	r7, [r8]
 80085b2:	e00f      	b.n	80085d4 <_malloc_r+0xa8>
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	1b52      	subs	r2, r2, r5
 80085b8:	d420      	bmi.n	80085fc <_malloc_r+0xd0>
 80085ba:	2a0b      	cmp	r2, #11
 80085bc:	d917      	bls.n	80085ee <_malloc_r+0xc2>
 80085be:	1961      	adds	r1, r4, r5
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	6025      	str	r5, [r4, #0]
 80085c4:	bf18      	it	ne
 80085c6:	6059      	strne	r1, [r3, #4]
 80085c8:	6863      	ldr	r3, [r4, #4]
 80085ca:	bf08      	it	eq
 80085cc:	f8c8 1000 	streq.w	r1, [r8]
 80085d0:	5162      	str	r2, [r4, r5]
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	4630      	mov	r0, r6
 80085d6:	f000 f8ed 	bl	80087b4 <__malloc_unlock>
 80085da:	f104 000b 	add.w	r0, r4, #11
 80085de:	1d23      	adds	r3, r4, #4
 80085e0:	f020 0007 	bic.w	r0, r0, #7
 80085e4:	1ac2      	subs	r2, r0, r3
 80085e6:	bf1c      	itt	ne
 80085e8:	1a1b      	subne	r3, r3, r0
 80085ea:	50a3      	strne	r3, [r4, r2]
 80085ec:	e7af      	b.n	800854e <_malloc_r+0x22>
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	bf0c      	ite	eq
 80085f4:	f8c8 2000 	streq.w	r2, [r8]
 80085f8:	605a      	strne	r2, [r3, #4]
 80085fa:	e7eb      	b.n	80085d4 <_malloc_r+0xa8>
 80085fc:	4623      	mov	r3, r4
 80085fe:	6864      	ldr	r4, [r4, #4]
 8008600:	e7ae      	b.n	8008560 <_malloc_r+0x34>
 8008602:	463c      	mov	r4, r7
 8008604:	687f      	ldr	r7, [r7, #4]
 8008606:	e7b6      	b.n	8008576 <_malloc_r+0x4a>
 8008608:	461a      	mov	r2, r3
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	42a3      	cmp	r3, r4
 800860e:	d1fb      	bne.n	8008608 <_malloc_r+0xdc>
 8008610:	2300      	movs	r3, #0
 8008612:	6053      	str	r3, [r2, #4]
 8008614:	e7de      	b.n	80085d4 <_malloc_r+0xa8>
 8008616:	230c      	movs	r3, #12
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	4630      	mov	r0, r6
 800861c:	f000 f8ca 	bl	80087b4 <__malloc_unlock>
 8008620:	e794      	b.n	800854c <_malloc_r+0x20>
 8008622:	6005      	str	r5, [r0, #0]
 8008624:	e7d6      	b.n	80085d4 <_malloc_r+0xa8>
 8008626:	bf00      	nop
 8008628:	200004a0 	.word	0x200004a0

0800862c <__ascii_mbtowc>:
 800862c:	b082      	sub	sp, #8
 800862e:	b901      	cbnz	r1, 8008632 <__ascii_mbtowc+0x6>
 8008630:	a901      	add	r1, sp, #4
 8008632:	b142      	cbz	r2, 8008646 <__ascii_mbtowc+0x1a>
 8008634:	b14b      	cbz	r3, 800864a <__ascii_mbtowc+0x1e>
 8008636:	7813      	ldrb	r3, [r2, #0]
 8008638:	600b      	str	r3, [r1, #0]
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	1e10      	subs	r0, r2, #0
 800863e:	bf18      	it	ne
 8008640:	2001      	movne	r0, #1
 8008642:	b002      	add	sp, #8
 8008644:	4770      	bx	lr
 8008646:	4610      	mov	r0, r2
 8008648:	e7fb      	b.n	8008642 <__ascii_mbtowc+0x16>
 800864a:	f06f 0001 	mvn.w	r0, #1
 800864e:	e7f8      	b.n	8008642 <__ascii_mbtowc+0x16>

08008650 <__sflush_r>:
 8008650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	0716      	lsls	r6, r2, #28
 800865a:	4605      	mov	r5, r0
 800865c:	460c      	mov	r4, r1
 800865e:	d454      	bmi.n	800870a <__sflush_r+0xba>
 8008660:	684b      	ldr	r3, [r1, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dc02      	bgt.n	800866c <__sflush_r+0x1c>
 8008666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd48      	ble.n	80086fe <__sflush_r+0xae>
 800866c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800866e:	2e00      	cmp	r6, #0
 8008670:	d045      	beq.n	80086fe <__sflush_r+0xae>
 8008672:	2300      	movs	r3, #0
 8008674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008678:	682f      	ldr	r7, [r5, #0]
 800867a:	6a21      	ldr	r1, [r4, #32]
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	d030      	beq.n	80086e2 <__sflush_r+0x92>
 8008680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	0759      	lsls	r1, r3, #29
 8008686:	d505      	bpl.n	8008694 <__sflush_r+0x44>
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800868e:	b10b      	cbz	r3, 8008694 <__sflush_r+0x44>
 8008690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	2300      	movs	r3, #0
 8008696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008698:	6a21      	ldr	r1, [r4, #32]
 800869a:	4628      	mov	r0, r5
 800869c:	47b0      	blx	r6
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	d106      	bne.n	80086b2 <__sflush_r+0x62>
 80086a4:	6829      	ldr	r1, [r5, #0]
 80086a6:	291d      	cmp	r1, #29
 80086a8:	d82b      	bhi.n	8008702 <__sflush_r+0xb2>
 80086aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008754 <__sflush_r+0x104>)
 80086ac:	410a      	asrs	r2, r1
 80086ae:	07d6      	lsls	r6, r2, #31
 80086b0:	d427      	bmi.n	8008702 <__sflush_r+0xb2>
 80086b2:	2200      	movs	r2, #0
 80086b4:	6062      	str	r2, [r4, #4]
 80086b6:	04d9      	lsls	r1, r3, #19
 80086b8:	6922      	ldr	r2, [r4, #16]
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	d504      	bpl.n	80086c8 <__sflush_r+0x78>
 80086be:	1c42      	adds	r2, r0, #1
 80086c0:	d101      	bne.n	80086c6 <__sflush_r+0x76>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	b903      	cbnz	r3, 80086c8 <__sflush_r+0x78>
 80086c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ca:	602f      	str	r7, [r5, #0]
 80086cc:	b1b9      	cbz	r1, 80086fe <__sflush_r+0xae>
 80086ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d2:	4299      	cmp	r1, r3
 80086d4:	d002      	beq.n	80086dc <__sflush_r+0x8c>
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 fe44 	bl	8009364 <_free_r>
 80086dc:	2300      	movs	r3, #0
 80086de:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e0:	e00d      	b.n	80086fe <__sflush_r+0xae>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b0      	blx	r6
 80086e8:	4602      	mov	r2, r0
 80086ea:	1c50      	adds	r0, r2, #1
 80086ec:	d1c9      	bne.n	8008682 <__sflush_r+0x32>
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0c6      	beq.n	8008682 <__sflush_r+0x32>
 80086f4:	2b1d      	cmp	r3, #29
 80086f6:	d001      	beq.n	80086fc <__sflush_r+0xac>
 80086f8:	2b16      	cmp	r3, #22
 80086fa:	d11e      	bne.n	800873a <__sflush_r+0xea>
 80086fc:	602f      	str	r7, [r5, #0]
 80086fe:	2000      	movs	r0, #0
 8008700:	e022      	b.n	8008748 <__sflush_r+0xf8>
 8008702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008706:	b21b      	sxth	r3, r3
 8008708:	e01b      	b.n	8008742 <__sflush_r+0xf2>
 800870a:	690f      	ldr	r7, [r1, #16]
 800870c:	2f00      	cmp	r7, #0
 800870e:	d0f6      	beq.n	80086fe <__sflush_r+0xae>
 8008710:	0793      	lsls	r3, r2, #30
 8008712:	680e      	ldr	r6, [r1, #0]
 8008714:	bf08      	it	eq
 8008716:	694b      	ldreq	r3, [r1, #20]
 8008718:	600f      	str	r7, [r1, #0]
 800871a:	bf18      	it	ne
 800871c:	2300      	movne	r3, #0
 800871e:	eba6 0807 	sub.w	r8, r6, r7
 8008722:	608b      	str	r3, [r1, #8]
 8008724:	f1b8 0f00 	cmp.w	r8, #0
 8008728:	dde9      	ble.n	80086fe <__sflush_r+0xae>
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800872e:	4643      	mov	r3, r8
 8008730:	463a      	mov	r2, r7
 8008732:	4628      	mov	r0, r5
 8008734:	47b0      	blx	r6
 8008736:	2800      	cmp	r0, #0
 8008738:	dc08      	bgt.n	800874c <__sflush_r+0xfc>
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	4407      	add	r7, r0
 800874e:	eba8 0800 	sub.w	r8, r8, r0
 8008752:	e7e7      	b.n	8008724 <__sflush_r+0xd4>
 8008754:	dfbffffe 	.word	0xdfbffffe

08008758 <_fflush_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	4605      	mov	r5, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b913      	cbnz	r3, 8008768 <_fflush_r+0x10>
 8008762:	2500      	movs	r5, #0
 8008764:	4628      	mov	r0, r5
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	b118      	cbz	r0, 8008772 <_fflush_r+0x1a>
 800876a:	6a03      	ldr	r3, [r0, #32]
 800876c:	b90b      	cbnz	r3, 8008772 <_fflush_r+0x1a>
 800876e:	f7fd fcaf 	bl	80060d0 <__sinit>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f3      	beq.n	8008762 <_fflush_r+0xa>
 800877a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800877c:	07d0      	lsls	r0, r2, #31
 800877e:	d404      	bmi.n	800878a <_fflush_r+0x32>
 8008780:	0599      	lsls	r1, r3, #22
 8008782:	d402      	bmi.n	800878a <_fflush_r+0x32>
 8008784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008786:	f7fe fba8 	bl	8006eda <__retarget_lock_acquire_recursive>
 800878a:	4628      	mov	r0, r5
 800878c:	4621      	mov	r1, r4
 800878e:	f7ff ff5f 	bl	8008650 <__sflush_r>
 8008792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008794:	07da      	lsls	r2, r3, #31
 8008796:	4605      	mov	r5, r0
 8008798:	d4e4      	bmi.n	8008764 <_fflush_r+0xc>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	059b      	lsls	r3, r3, #22
 800879e:	d4e1      	bmi.n	8008764 <_fflush_r+0xc>
 80087a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a2:	f7fe fb9b 	bl	8006edc <__retarget_lock_release_recursive>
 80087a6:	e7dd      	b.n	8008764 <_fflush_r+0xc>

080087a8 <__malloc_lock>:
 80087a8:	4801      	ldr	r0, [pc, #4]	@ (80087b0 <__malloc_lock+0x8>)
 80087aa:	f7fe bb96 	b.w	8006eda <__retarget_lock_acquire_recursive>
 80087ae:	bf00      	nop
 80087b0:	20000498 	.word	0x20000498

080087b4 <__malloc_unlock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	@ (80087bc <__malloc_unlock+0x8>)
 80087b6:	f7fe bb91 	b.w	8006edc <__retarget_lock_release_recursive>
 80087ba:	bf00      	nop
 80087bc:	20000498 	.word	0x20000498

080087c0 <_Balloc>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	69c6      	ldr	r6, [r0, #28]
 80087c4:	4604      	mov	r4, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	b976      	cbnz	r6, 80087e8 <_Balloc+0x28>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f7ff fe84 	bl	80084d8 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	61e0      	str	r0, [r4, #28]
 80087d4:	b920      	cbnz	r0, 80087e0 <_Balloc+0x20>
 80087d6:	4b18      	ldr	r3, [pc, #96]	@ (8008838 <_Balloc+0x78>)
 80087d8:	4818      	ldr	r0, [pc, #96]	@ (800883c <_Balloc+0x7c>)
 80087da:	216b      	movs	r1, #107	@ 0x6b
 80087dc:	f000 fd90 	bl	8009300 <__assert_func>
 80087e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e4:	6006      	str	r6, [r0, #0]
 80087e6:	60c6      	str	r6, [r0, #12]
 80087e8:	69e6      	ldr	r6, [r4, #28]
 80087ea:	68f3      	ldr	r3, [r6, #12]
 80087ec:	b183      	cbz	r3, 8008810 <_Balloc+0x50>
 80087ee:	69e3      	ldr	r3, [r4, #28]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087f6:	b9b8      	cbnz	r0, 8008828 <_Balloc+0x68>
 80087f8:	2101      	movs	r1, #1
 80087fa:	fa01 f605 	lsl.w	r6, r1, r5
 80087fe:	1d72      	adds	r2, r6, #5
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fd9a 	bl	800933c <_calloc_r>
 8008808:	b160      	cbz	r0, 8008824 <_Balloc+0x64>
 800880a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800880e:	e00e      	b.n	800882e <_Balloc+0x6e>
 8008810:	2221      	movs	r2, #33	@ 0x21
 8008812:	2104      	movs	r1, #4
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fd91 	bl	800933c <_calloc_r>
 800881a:	69e3      	ldr	r3, [r4, #28]
 800881c:	60f0      	str	r0, [r6, #12]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e4      	bne.n	80087ee <_Balloc+0x2e>
 8008824:	2000      	movs	r0, #0
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	6802      	ldr	r2, [r0, #0]
 800882a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800882e:	2300      	movs	r3, #0
 8008830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008834:	e7f7      	b.n	8008826 <_Balloc+0x66>
 8008836:	bf00      	nop
 8008838:	08009b56 	.word	0x08009b56
 800883c:	08009c47 	.word	0x08009c47

08008840 <_Bfree>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	69c6      	ldr	r6, [r0, #28]
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b976      	cbnz	r6, 8008868 <_Bfree+0x28>
 800884a:	2010      	movs	r0, #16
 800884c:	f7ff fe44 	bl	80084d8 <malloc>
 8008850:	4602      	mov	r2, r0
 8008852:	61e8      	str	r0, [r5, #28]
 8008854:	b920      	cbnz	r0, 8008860 <_Bfree+0x20>
 8008856:	4b09      	ldr	r3, [pc, #36]	@ (800887c <_Bfree+0x3c>)
 8008858:	4809      	ldr	r0, [pc, #36]	@ (8008880 <_Bfree+0x40>)
 800885a:	218f      	movs	r1, #143	@ 0x8f
 800885c:	f000 fd50 	bl	8009300 <__assert_func>
 8008860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008864:	6006      	str	r6, [r0, #0]
 8008866:	60c6      	str	r6, [r0, #12]
 8008868:	b13c      	cbz	r4, 800887a <_Bfree+0x3a>
 800886a:	69eb      	ldr	r3, [r5, #28]
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008874:	6021      	str	r1, [r4, #0]
 8008876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	08009b56 	.word	0x08009b56
 8008880:	08009c47 	.word	0x08009c47

08008884 <__multadd>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	690d      	ldr	r5, [r1, #16]
 800888a:	4607      	mov	r7, r0
 800888c:	460c      	mov	r4, r1
 800888e:	461e      	mov	r6, r3
 8008890:	f101 0c14 	add.w	ip, r1, #20
 8008894:	2000      	movs	r0, #0
 8008896:	f8dc 3000 	ldr.w	r3, [ip]
 800889a:	b299      	uxth	r1, r3
 800889c:	fb02 6101 	mla	r1, r2, r1, r6
 80088a0:	0c1e      	lsrs	r6, r3, #16
 80088a2:	0c0b      	lsrs	r3, r1, #16
 80088a4:	fb02 3306 	mla	r3, r2, r6, r3
 80088a8:	b289      	uxth	r1, r1
 80088aa:	3001      	adds	r0, #1
 80088ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088b0:	4285      	cmp	r5, r0
 80088b2:	f84c 1b04 	str.w	r1, [ip], #4
 80088b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ba:	dcec      	bgt.n	8008896 <__multadd+0x12>
 80088bc:	b30e      	cbz	r6, 8008902 <__multadd+0x7e>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dc19      	bgt.n	80088f8 <__multadd+0x74>
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4638      	mov	r0, r7
 80088c8:	3101      	adds	r1, #1
 80088ca:	f7ff ff79 	bl	80087c0 <_Balloc>
 80088ce:	4680      	mov	r8, r0
 80088d0:	b928      	cbnz	r0, 80088de <__multadd+0x5a>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <__multadd+0x84>)
 80088d6:	480d      	ldr	r0, [pc, #52]	@ (800890c <__multadd+0x88>)
 80088d8:	21ba      	movs	r1, #186	@ 0xba
 80088da:	f000 fd11 	bl	8009300 <__assert_func>
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	3202      	adds	r2, #2
 80088e2:	f104 010c 	add.w	r1, r4, #12
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	300c      	adds	r0, #12
 80088ea:	f7fe faf8 	bl	8006ede <memcpy>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff ffa5 	bl	8008840 <_Bfree>
 80088f6:	4644      	mov	r4, r8
 80088f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088fc:	3501      	adds	r5, #1
 80088fe:	615e      	str	r6, [r3, #20]
 8008900:	6125      	str	r5, [r4, #16]
 8008902:	4620      	mov	r0, r4
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	08009bc5 	.word	0x08009bc5
 800890c:	08009c47 	.word	0x08009c47

08008910 <__s2b>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	460c      	mov	r4, r1
 8008916:	4615      	mov	r5, r2
 8008918:	461f      	mov	r7, r3
 800891a:	2209      	movs	r2, #9
 800891c:	3308      	adds	r3, #8
 800891e:	4606      	mov	r6, r0
 8008920:	fb93 f3f2 	sdiv	r3, r3, r2
 8008924:	2100      	movs	r1, #0
 8008926:	2201      	movs	r2, #1
 8008928:	429a      	cmp	r2, r3
 800892a:	db09      	blt.n	8008940 <__s2b+0x30>
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff ff47 	bl	80087c0 <_Balloc>
 8008932:	b940      	cbnz	r0, 8008946 <__s2b+0x36>
 8008934:	4602      	mov	r2, r0
 8008936:	4b19      	ldr	r3, [pc, #100]	@ (800899c <__s2b+0x8c>)
 8008938:	4819      	ldr	r0, [pc, #100]	@ (80089a0 <__s2b+0x90>)
 800893a:	21d3      	movs	r1, #211	@ 0xd3
 800893c:	f000 fce0 	bl	8009300 <__assert_func>
 8008940:	0052      	lsls	r2, r2, #1
 8008942:	3101      	adds	r1, #1
 8008944:	e7f0      	b.n	8008928 <__s2b+0x18>
 8008946:	9b08      	ldr	r3, [sp, #32]
 8008948:	6143      	str	r3, [r0, #20]
 800894a:	2d09      	cmp	r5, #9
 800894c:	f04f 0301 	mov.w	r3, #1
 8008950:	6103      	str	r3, [r0, #16]
 8008952:	dd16      	ble.n	8008982 <__s2b+0x72>
 8008954:	f104 0909 	add.w	r9, r4, #9
 8008958:	46c8      	mov	r8, r9
 800895a:	442c      	add	r4, r5
 800895c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008960:	4601      	mov	r1, r0
 8008962:	3b30      	subs	r3, #48	@ 0x30
 8008964:	220a      	movs	r2, #10
 8008966:	4630      	mov	r0, r6
 8008968:	f7ff ff8c 	bl	8008884 <__multadd>
 800896c:	45a0      	cmp	r8, r4
 800896e:	d1f5      	bne.n	800895c <__s2b+0x4c>
 8008970:	f1a5 0408 	sub.w	r4, r5, #8
 8008974:	444c      	add	r4, r9
 8008976:	1b2d      	subs	r5, r5, r4
 8008978:	1963      	adds	r3, r4, r5
 800897a:	42bb      	cmp	r3, r7
 800897c:	db04      	blt.n	8008988 <__s2b+0x78>
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	340a      	adds	r4, #10
 8008984:	2509      	movs	r5, #9
 8008986:	e7f6      	b.n	8008976 <__s2b+0x66>
 8008988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800898c:	4601      	mov	r1, r0
 800898e:	3b30      	subs	r3, #48	@ 0x30
 8008990:	220a      	movs	r2, #10
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ff76 	bl	8008884 <__multadd>
 8008998:	e7ee      	b.n	8008978 <__s2b+0x68>
 800899a:	bf00      	nop
 800899c:	08009bc5 	.word	0x08009bc5
 80089a0:	08009c47 	.word	0x08009c47

080089a4 <__hi0bits>:
 80089a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089a8:	4603      	mov	r3, r0
 80089aa:	bf36      	itet	cc
 80089ac:	0403      	lslcc	r3, r0, #16
 80089ae:	2000      	movcs	r0, #0
 80089b0:	2010      	movcc	r0, #16
 80089b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089b6:	bf3c      	itt	cc
 80089b8:	021b      	lslcc	r3, r3, #8
 80089ba:	3008      	addcc	r0, #8
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c0:	bf3c      	itt	cc
 80089c2:	011b      	lslcc	r3, r3, #4
 80089c4:	3004      	addcc	r0, #4
 80089c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ca:	bf3c      	itt	cc
 80089cc:	009b      	lslcc	r3, r3, #2
 80089ce:	3002      	addcc	r0, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	db05      	blt.n	80089e0 <__hi0bits+0x3c>
 80089d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089d8:	f100 0001 	add.w	r0, r0, #1
 80089dc:	bf08      	it	eq
 80089de:	2020      	moveq	r0, #32
 80089e0:	4770      	bx	lr

080089e2 <__lo0bits>:
 80089e2:	6803      	ldr	r3, [r0, #0]
 80089e4:	4602      	mov	r2, r0
 80089e6:	f013 0007 	ands.w	r0, r3, #7
 80089ea:	d00b      	beq.n	8008a04 <__lo0bits+0x22>
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d421      	bmi.n	8008a34 <__lo0bits+0x52>
 80089f0:	0798      	lsls	r0, r3, #30
 80089f2:	bf49      	itett	mi
 80089f4:	085b      	lsrmi	r3, r3, #1
 80089f6:	089b      	lsrpl	r3, r3, #2
 80089f8:	2001      	movmi	r0, #1
 80089fa:	6013      	strmi	r3, [r2, #0]
 80089fc:	bf5c      	itt	pl
 80089fe:	6013      	strpl	r3, [r2, #0]
 8008a00:	2002      	movpl	r0, #2
 8008a02:	4770      	bx	lr
 8008a04:	b299      	uxth	r1, r3
 8008a06:	b909      	cbnz	r1, 8008a0c <__lo0bits+0x2a>
 8008a08:	0c1b      	lsrs	r3, r3, #16
 8008a0a:	2010      	movs	r0, #16
 8008a0c:	b2d9      	uxtb	r1, r3
 8008a0e:	b909      	cbnz	r1, 8008a14 <__lo0bits+0x32>
 8008a10:	3008      	adds	r0, #8
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	0719      	lsls	r1, r3, #28
 8008a16:	bf04      	itt	eq
 8008a18:	091b      	lsreq	r3, r3, #4
 8008a1a:	3004      	addeq	r0, #4
 8008a1c:	0799      	lsls	r1, r3, #30
 8008a1e:	bf04      	itt	eq
 8008a20:	089b      	lsreq	r3, r3, #2
 8008a22:	3002      	addeq	r0, #2
 8008a24:	07d9      	lsls	r1, r3, #31
 8008a26:	d403      	bmi.n	8008a30 <__lo0bits+0x4e>
 8008a28:	085b      	lsrs	r3, r3, #1
 8008a2a:	f100 0001 	add.w	r0, r0, #1
 8008a2e:	d003      	beq.n	8008a38 <__lo0bits+0x56>
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4770      	bx	lr
 8008a34:	2000      	movs	r0, #0
 8008a36:	4770      	bx	lr
 8008a38:	2020      	movs	r0, #32
 8008a3a:	4770      	bx	lr

08008a3c <__i2b>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	460c      	mov	r4, r1
 8008a40:	2101      	movs	r1, #1
 8008a42:	f7ff febd 	bl	80087c0 <_Balloc>
 8008a46:	4602      	mov	r2, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__i2b+0x1a>
 8008a4a:	4b05      	ldr	r3, [pc, #20]	@ (8008a60 <__i2b+0x24>)
 8008a4c:	4805      	ldr	r0, [pc, #20]	@ (8008a64 <__i2b+0x28>)
 8008a4e:	f240 1145 	movw	r1, #325	@ 0x145
 8008a52:	f000 fc55 	bl	8009300 <__assert_func>
 8008a56:	2301      	movs	r3, #1
 8008a58:	6144      	str	r4, [r0, #20]
 8008a5a:	6103      	str	r3, [r0, #16]
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	bf00      	nop
 8008a60:	08009bc5 	.word	0x08009bc5
 8008a64:	08009c47 	.word	0x08009c47

08008a68 <__multiply>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	690a      	ldr	r2, [r1, #16]
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	bfa8      	it	ge
 8008a76:	4623      	movge	r3, r4
 8008a78:	460f      	mov	r7, r1
 8008a7a:	bfa4      	itt	ge
 8008a7c:	460c      	movge	r4, r1
 8008a7e:	461f      	movge	r7, r3
 8008a80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a88:	68a3      	ldr	r3, [r4, #8]
 8008a8a:	6861      	ldr	r1, [r4, #4]
 8008a8c:	eb0a 0609 	add.w	r6, sl, r9
 8008a90:	42b3      	cmp	r3, r6
 8008a92:	b085      	sub	sp, #20
 8008a94:	bfb8      	it	lt
 8008a96:	3101      	addlt	r1, #1
 8008a98:	f7ff fe92 	bl	80087c0 <_Balloc>
 8008a9c:	b930      	cbnz	r0, 8008aac <__multiply+0x44>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b44      	ldr	r3, [pc, #272]	@ (8008bb4 <__multiply+0x14c>)
 8008aa2:	4845      	ldr	r0, [pc, #276]	@ (8008bb8 <__multiply+0x150>)
 8008aa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008aa8:	f000 fc2a 	bl	8009300 <__assert_func>
 8008aac:	f100 0514 	add.w	r5, r0, #20
 8008ab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	d321      	bcc.n	8008b00 <__multiply+0x98>
 8008abc:	f107 0114 	add.w	r1, r7, #20
 8008ac0:	f104 0214 	add.w	r2, r4, #20
 8008ac4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ac8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	1b13      	subs	r3, r2, r4
 8008ad0:	3b15      	subs	r3, #21
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	f104 0715 	add.w	r7, r4, #21
 8008adc:	42ba      	cmp	r2, r7
 8008ade:	bf38      	it	cc
 8008ae0:	2304      	movcc	r3, #4
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	9103      	str	r1, [sp, #12]
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	d80c      	bhi.n	8008b06 <__multiply+0x9e>
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	dd03      	ble.n	8008af8 <__multiply+0x90>
 8008af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d05b      	beq.n	8008bb0 <__multiply+0x148>
 8008af8:	6106      	str	r6, [r0, #16]
 8008afa:	b005      	add	sp, #20
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	f843 2b04 	str.w	r2, [r3], #4
 8008b04:	e7d8      	b.n	8008ab8 <__multiply+0x50>
 8008b06:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	d024      	beq.n	8008b5a <__multiply+0xf2>
 8008b10:	f104 0e14 	add.w	lr, r4, #20
 8008b14:	46a9      	mov	r9, r5
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b1e:	f8d9 3000 	ldr.w	r3, [r9]
 8008b22:	fa1f fb87 	uxth.w	fp, r7
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b30:	f8d9 7000 	ldr.w	r7, [r9]
 8008b34:	4463      	add	r3, ip
 8008b36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b48:	4572      	cmp	r2, lr
 8008b4a:	f849 3b04 	str.w	r3, [r9], #4
 8008b4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b52:	d8e2      	bhi.n	8008b1a <__multiply+0xb2>
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	f845 c003 	str.w	ip, [r5, r3]
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b60:	3104      	adds	r1, #4
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	d021      	beq.n	8008bac <__multiply+0x144>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	f104 0c14 	add.w	ip, r4, #20
 8008b6e:	46ae      	mov	lr, r5
 8008b70:	f04f 0a00 	mov.w	sl, #0
 8008b74:	f8bc b000 	ldrh.w	fp, [ip]
 8008b78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b7c:	fb09 770b 	mla	r7, r9, fp, r7
 8008b80:	4457      	add	r7, sl
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b88:	f84e 3b04 	str.w	r3, [lr], #4
 8008b8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b94:	f8be 3000 	ldrh.w	r3, [lr]
 8008b98:	fb09 330a 	mla	r3, r9, sl, r3
 8008b9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ba0:	4562      	cmp	r2, ip
 8008ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba6:	d8e5      	bhi.n	8008b74 <__multiply+0x10c>
 8008ba8:	9f01      	ldr	r7, [sp, #4]
 8008baa:	51eb      	str	r3, [r5, r7]
 8008bac:	3504      	adds	r5, #4
 8008bae:	e799      	b.n	8008ae4 <__multiply+0x7c>
 8008bb0:	3e01      	subs	r6, #1
 8008bb2:	e79b      	b.n	8008aec <__multiply+0x84>
 8008bb4:	08009bc5 	.word	0x08009bc5
 8008bb8:	08009c47 	.word	0x08009c47

08008bbc <__pow5mult>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	f012 0203 	ands.w	r2, r2, #3
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	460e      	mov	r6, r1
 8008bca:	d007      	beq.n	8008bdc <__pow5mult+0x20>
 8008bcc:	4c25      	ldr	r4, [pc, #148]	@ (8008c64 <__pow5mult+0xa8>)
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bd6:	f7ff fe55 	bl	8008884 <__multadd>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	10ad      	asrs	r5, r5, #2
 8008bde:	d03d      	beq.n	8008c5c <__pow5mult+0xa0>
 8008be0:	69fc      	ldr	r4, [r7, #28]
 8008be2:	b97c      	cbnz	r4, 8008c04 <__pow5mult+0x48>
 8008be4:	2010      	movs	r0, #16
 8008be6:	f7ff fc77 	bl	80084d8 <malloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	61f8      	str	r0, [r7, #28]
 8008bee:	b928      	cbnz	r0, 8008bfc <__pow5mult+0x40>
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c68 <__pow5mult+0xac>)
 8008bf2:	481e      	ldr	r0, [pc, #120]	@ (8008c6c <__pow5mult+0xb0>)
 8008bf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bf8:	f000 fb82 	bl	8009300 <__assert_func>
 8008bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c00:	6004      	str	r4, [r0, #0]
 8008c02:	60c4      	str	r4, [r0, #12]
 8008c04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c0c:	b94c      	cbnz	r4, 8008c22 <__pow5mult+0x66>
 8008c0e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7ff ff12 	bl	8008a3c <__i2b>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c1e:	4604      	mov	r4, r0
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	07eb      	lsls	r3, r5, #31
 8008c28:	d50a      	bpl.n	8008c40 <__pow5mult+0x84>
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4638      	mov	r0, r7
 8008c30:	f7ff ff1a 	bl	8008a68 <__multiply>
 8008c34:	4631      	mov	r1, r6
 8008c36:	4680      	mov	r8, r0
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7ff fe01 	bl	8008840 <_Bfree>
 8008c3e:	4646      	mov	r6, r8
 8008c40:	106d      	asrs	r5, r5, #1
 8008c42:	d00b      	beq.n	8008c5c <__pow5mult+0xa0>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	b938      	cbnz	r0, 8008c58 <__pow5mult+0x9c>
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff ff0b 	bl	8008a68 <__multiply>
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	f8c0 9000 	str.w	r9, [r0]
 8008c58:	4604      	mov	r4, r0
 8008c5a:	e7e4      	b.n	8008c26 <__pow5mult+0x6a>
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	bf00      	nop
 8008c64:	08009ca0 	.word	0x08009ca0
 8008c68:	08009b56 	.word	0x08009b56
 8008c6c:	08009c47 	.word	0x08009c47

08008c70 <__lshift>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	6849      	ldr	r1, [r1, #4]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	4607      	mov	r7, r0
 8008c82:	4691      	mov	r9, r2
 8008c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c88:	f108 0601 	add.w	r6, r8, #1
 8008c8c:	42b3      	cmp	r3, r6
 8008c8e:	db0b      	blt.n	8008ca8 <__lshift+0x38>
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff fd95 	bl	80087c0 <_Balloc>
 8008c96:	4605      	mov	r5, r0
 8008c98:	b948      	cbnz	r0, 8008cae <__lshift+0x3e>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	4b28      	ldr	r3, [pc, #160]	@ (8008d40 <__lshift+0xd0>)
 8008c9e:	4829      	ldr	r0, [pc, #164]	@ (8008d44 <__lshift+0xd4>)
 8008ca0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ca4:	f000 fb2c 	bl	8009300 <__assert_func>
 8008ca8:	3101      	adds	r1, #1
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	e7ee      	b.n	8008c8c <__lshift+0x1c>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f100 0114 	add.w	r1, r0, #20
 8008cb4:	f100 0210 	add.w	r2, r0, #16
 8008cb8:	4618      	mov	r0, r3
 8008cba:	4553      	cmp	r3, sl
 8008cbc:	db33      	blt.n	8008d26 <__lshift+0xb6>
 8008cbe:	6920      	ldr	r0, [r4, #16]
 8008cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cc4:	f104 0314 	add.w	r3, r4, #20
 8008cc8:	f019 091f 	ands.w	r9, r9, #31
 8008ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cd4:	d02b      	beq.n	8008d2e <__lshift+0xbe>
 8008cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cda:	468a      	mov	sl, r1
 8008cdc:	2200      	movs	r2, #0
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ce4:	4310      	orrs	r0, r2
 8008ce6:	f84a 0b04 	str.w	r0, [sl], #4
 8008cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cee:	459c      	cmp	ip, r3
 8008cf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cf4:	d8f3      	bhi.n	8008cde <__lshift+0x6e>
 8008cf6:	ebac 0304 	sub.w	r3, ip, r4
 8008cfa:	3b15      	subs	r3, #21
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	3304      	adds	r3, #4
 8008d02:	f104 0015 	add.w	r0, r4, #21
 8008d06:	4584      	cmp	ip, r0
 8008d08:	bf38      	it	cc
 8008d0a:	2304      	movcc	r3, #4
 8008d0c:	50ca      	str	r2, [r1, r3]
 8008d0e:	b10a      	cbz	r2, 8008d14 <__lshift+0xa4>
 8008d10:	f108 0602 	add.w	r6, r8, #2
 8008d14:	3e01      	subs	r6, #1
 8008d16:	4638      	mov	r0, r7
 8008d18:	612e      	str	r6, [r5, #16]
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f7ff fd90 	bl	8008840 <_Bfree>
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d26:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	e7c5      	b.n	8008cba <__lshift+0x4a>
 8008d2e:	3904      	subs	r1, #4
 8008d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d38:	459c      	cmp	ip, r3
 8008d3a:	d8f9      	bhi.n	8008d30 <__lshift+0xc0>
 8008d3c:	e7ea      	b.n	8008d14 <__lshift+0xa4>
 8008d3e:	bf00      	nop
 8008d40:	08009bc5 	.word	0x08009bc5
 8008d44:	08009c47 	.word	0x08009c47

08008d48 <__mcmp>:
 8008d48:	690a      	ldr	r2, [r1, #16]
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6900      	ldr	r0, [r0, #16]
 8008d4e:	1a80      	subs	r0, r0, r2
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	d10e      	bne.n	8008d72 <__mcmp+0x2a>
 8008d54:	3314      	adds	r3, #20
 8008d56:	3114      	adds	r1, #20
 8008d58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d68:	4295      	cmp	r5, r2
 8008d6a:	d003      	beq.n	8008d74 <__mcmp+0x2c>
 8008d6c:	d205      	bcs.n	8008d7a <__mcmp+0x32>
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d72:	bd30      	pop	{r4, r5, pc}
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d3f3      	bcc.n	8008d60 <__mcmp+0x18>
 8008d78:	e7fb      	b.n	8008d72 <__mcmp+0x2a>
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	e7f9      	b.n	8008d72 <__mcmp+0x2a>
	...

08008d80 <__mdiff>:
 8008d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	4689      	mov	r9, r1
 8008d86:	4606      	mov	r6, r0
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	f7ff ffdb 	bl	8008d48 <__mcmp>
 8008d92:	1e05      	subs	r5, r0, #0
 8008d94:	d112      	bne.n	8008dbc <__mdiff+0x3c>
 8008d96:	4629      	mov	r1, r5
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fd11 	bl	80087c0 <_Balloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__mdiff+0x2e>
 8008da2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ea0 <__mdiff+0x120>)
 8008da4:	f240 2137 	movw	r1, #567	@ 0x237
 8008da8:	483e      	ldr	r0, [pc, #248]	@ (8008ea4 <__mdiff+0x124>)
 8008daa:	f000 faa9 	bl	8009300 <__assert_func>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008db4:	4610      	mov	r0, r2
 8008db6:	b003      	add	sp, #12
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	bfbc      	itt	lt
 8008dbe:	464b      	movlt	r3, r9
 8008dc0:	46a1      	movlt	r9, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dc8:	bfba      	itte	lt
 8008dca:	461c      	movlt	r4, r3
 8008dcc:	2501      	movlt	r5, #1
 8008dce:	2500      	movge	r5, #0
 8008dd0:	f7ff fcf6 	bl	80087c0 <_Balloc>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	b918      	cbnz	r0, 8008de0 <__mdiff+0x60>
 8008dd8:	4b31      	ldr	r3, [pc, #196]	@ (8008ea0 <__mdiff+0x120>)
 8008dda:	f240 2145 	movw	r1, #581	@ 0x245
 8008dde:	e7e3      	b.n	8008da8 <__mdiff+0x28>
 8008de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008de4:	6926      	ldr	r6, [r4, #16]
 8008de6:	60c5      	str	r5, [r0, #12]
 8008de8:	f109 0310 	add.w	r3, r9, #16
 8008dec:	f109 0514 	add.w	r5, r9, #20
 8008df0:	f104 0e14 	add.w	lr, r4, #20
 8008df4:	f100 0b14 	add.w	fp, r0, #20
 8008df8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	46d9      	mov	r9, fp
 8008e04:	f04f 0c00 	mov.w	ip, #0
 8008e08:	9b01      	ldr	r3, [sp, #4]
 8008e0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	fa1f f38a 	uxth.w	r3, sl
 8008e18:	4619      	mov	r1, r3
 8008e1a:	b283      	uxth	r3, r0
 8008e1c:	1acb      	subs	r3, r1, r3
 8008e1e:	0c00      	lsrs	r0, r0, #16
 8008e20:	4463      	add	r3, ip
 8008e22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e30:	4576      	cmp	r6, lr
 8008e32:	f849 3b04 	str.w	r3, [r9], #4
 8008e36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e3a:	d8e5      	bhi.n	8008e08 <__mdiff+0x88>
 8008e3c:	1b33      	subs	r3, r6, r4
 8008e3e:	3b15      	subs	r3, #21
 8008e40:	f023 0303 	bic.w	r3, r3, #3
 8008e44:	3415      	adds	r4, #21
 8008e46:	3304      	adds	r3, #4
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	bf38      	it	cc
 8008e4c:	2304      	movcc	r3, #4
 8008e4e:	441d      	add	r5, r3
 8008e50:	445b      	add	r3, fp
 8008e52:	461e      	mov	r6, r3
 8008e54:	462c      	mov	r4, r5
 8008e56:	4544      	cmp	r4, r8
 8008e58:	d30e      	bcc.n	8008e78 <__mdiff+0xf8>
 8008e5a:	f108 0103 	add.w	r1, r8, #3
 8008e5e:	1b49      	subs	r1, r1, r5
 8008e60:	f021 0103 	bic.w	r1, r1, #3
 8008e64:	3d03      	subs	r5, #3
 8008e66:	45a8      	cmp	r8, r5
 8008e68:	bf38      	it	cc
 8008e6a:	2100      	movcc	r1, #0
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e72:	b191      	cbz	r1, 8008e9a <__mdiff+0x11a>
 8008e74:	6117      	str	r7, [r2, #16]
 8008e76:	e79d      	b.n	8008db4 <__mdiff+0x34>
 8008e78:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e7c:	46e6      	mov	lr, ip
 8008e7e:	0c08      	lsrs	r0, r1, #16
 8008e80:	fa1c fc81 	uxtah	ip, ip, r1
 8008e84:	4471      	add	r1, lr
 8008e86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e8a:	b289      	uxth	r1, r1
 8008e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e90:	f846 1b04 	str.w	r1, [r6], #4
 8008e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e98:	e7dd      	b.n	8008e56 <__mdiff+0xd6>
 8008e9a:	3f01      	subs	r7, #1
 8008e9c:	e7e7      	b.n	8008e6e <__mdiff+0xee>
 8008e9e:	bf00      	nop
 8008ea0:	08009bc5 	.word	0x08009bc5
 8008ea4:	08009c47 	.word	0x08009c47

08008ea8 <__ulp>:
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	ed8d 0b00 	vstr	d0, [sp]
 8008eae:	9a01      	ldr	r2, [sp, #4]
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef0 <__ulp+0x48>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc08      	bgt.n	8008ece <__ulp+0x26>
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ec6:	da04      	bge.n	8008ed2 <__ulp+0x2a>
 8008ec8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ecc:	4113      	asrs	r3, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	e008      	b.n	8008ee4 <__ulp+0x3c>
 8008ed2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ed6:	2b1e      	cmp	r3, #30
 8008ed8:	bfda      	itte	le
 8008eda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ede:	40da      	lsrle	r2, r3
 8008ee0:	2201      	movgt	r2, #1
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	ec41 0b10 	vmov	d0, r0, r1
 8008eec:	b002      	add	sp, #8
 8008eee:	4770      	bx	lr
 8008ef0:	7ff00000 	.word	0x7ff00000

08008ef4 <__b2d>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	6906      	ldr	r6, [r0, #16]
 8008efa:	f100 0814 	add.w	r8, r0, #20
 8008efe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f02:	1f37      	subs	r7, r6, #4
 8008f04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7ff fd4b 	bl	80089a4 <__hi0bits>
 8008f0e:	f1c0 0320 	rsb	r3, r0, #32
 8008f12:	280a      	cmp	r0, #10
 8008f14:	600b      	str	r3, [r1, #0]
 8008f16:	491b      	ldr	r1, [pc, #108]	@ (8008f84 <__b2d+0x90>)
 8008f18:	dc15      	bgt.n	8008f46 <__b2d+0x52>
 8008f1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f22:	45b8      	cmp	r8, r7
 8008f24:	ea43 0501 	orr.w	r5, r3, r1
 8008f28:	bf34      	ite	cc
 8008f2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f2e:	2300      	movcs	r3, #0
 8008f30:	3015      	adds	r0, #21
 8008f32:	fa02 f000 	lsl.w	r0, r2, r0
 8008f36:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f3a:	4303      	orrs	r3, r0
 8008f3c:	461c      	mov	r4, r3
 8008f3e:	ec45 4b10 	vmov	d0, r4, r5
 8008f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f46:	45b8      	cmp	r8, r7
 8008f48:	bf3a      	itte	cc
 8008f4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f52:	2300      	movcs	r3, #0
 8008f54:	380b      	subs	r0, #11
 8008f56:	d012      	beq.n	8008f7e <__b2d+0x8a>
 8008f58:	f1c0 0120 	rsb	r1, r0, #32
 8008f5c:	fa23 f401 	lsr.w	r4, r3, r1
 8008f60:	4082      	lsls	r2, r0
 8008f62:	4322      	orrs	r2, r4
 8008f64:	4547      	cmp	r7, r8
 8008f66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f6a:	bf8c      	ite	hi
 8008f6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f70:	2200      	movls	r2, #0
 8008f72:	4083      	lsls	r3, r0
 8008f74:	40ca      	lsrs	r2, r1
 8008f76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	e7de      	b.n	8008f3c <__b2d+0x48>
 8008f7e:	ea42 0501 	orr.w	r5, r2, r1
 8008f82:	e7db      	b.n	8008f3c <__b2d+0x48>
 8008f84:	3ff00000 	.word	0x3ff00000

08008f88 <__d2b>:
 8008f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	2101      	movs	r1, #1
 8008f90:	ec59 8b10 	vmov	r8, r9, d0
 8008f94:	4616      	mov	r6, r2
 8008f96:	f7ff fc13 	bl	80087c0 <_Balloc>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	b930      	cbnz	r0, 8008fac <__d2b+0x24>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b23      	ldr	r3, [pc, #140]	@ (8009030 <__d2b+0xa8>)
 8008fa2:	4824      	ldr	r0, [pc, #144]	@ (8009034 <__d2b+0xac>)
 8008fa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fa8:	f000 f9aa 	bl	8009300 <__assert_func>
 8008fac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fb4:	b10d      	cbz	r5, 8008fba <__d2b+0x32>
 8008fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fba:	9301      	str	r3, [sp, #4]
 8008fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8008fc0:	d023      	beq.n	800900a <__d2b+0x82>
 8008fc2:	4668      	mov	r0, sp
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	f7ff fd0c 	bl	80089e2 <__lo0bits>
 8008fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fce:	b1d0      	cbz	r0, 8009006 <__d2b+0x7e>
 8008fd0:	f1c0 0320 	rsb	r3, r0, #32
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	40c2      	lsrs	r2, r0
 8008fdc:	6163      	str	r3, [r4, #20]
 8008fde:	9201      	str	r2, [sp, #4]
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	61a3      	str	r3, [r4, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf0c      	ite	eq
 8008fe8:	2201      	moveq	r2, #1
 8008fea:	2202      	movne	r2, #2
 8008fec:	6122      	str	r2, [r4, #16]
 8008fee:	b1a5      	cbz	r5, 800901a <__d2b+0x92>
 8008ff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ff4:	4405      	add	r5, r0
 8008ff6:	603d      	str	r5, [r7, #0]
 8008ff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4620      	mov	r0, r4
 8009000:	b003      	add	sp, #12
 8009002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009006:	6161      	str	r1, [r4, #20]
 8009008:	e7ea      	b.n	8008fe0 <__d2b+0x58>
 800900a:	a801      	add	r0, sp, #4
 800900c:	f7ff fce9 	bl	80089e2 <__lo0bits>
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	3020      	adds	r0, #32
 8009016:	2201      	movs	r2, #1
 8009018:	e7e8      	b.n	8008fec <__d2b+0x64>
 800901a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800901e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009022:	6038      	str	r0, [r7, #0]
 8009024:	6918      	ldr	r0, [r3, #16]
 8009026:	f7ff fcbd 	bl	80089a4 <__hi0bits>
 800902a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800902e:	e7e5      	b.n	8008ffc <__d2b+0x74>
 8009030:	08009bc5 	.word	0x08009bc5
 8009034:	08009c47 	.word	0x08009c47

08009038 <__ratio>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	b085      	sub	sp, #20
 800903e:	e9cd 1000 	strd	r1, r0, [sp]
 8009042:	a902      	add	r1, sp, #8
 8009044:	f7ff ff56 	bl	8008ef4 <__b2d>
 8009048:	9800      	ldr	r0, [sp, #0]
 800904a:	a903      	add	r1, sp, #12
 800904c:	ec55 4b10 	vmov	r4, r5, d0
 8009050:	f7ff ff50 	bl	8008ef4 <__b2d>
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	6919      	ldr	r1, [r3, #16]
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	1ac9      	subs	r1, r1, r3
 800905e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009062:	1a9b      	subs	r3, r3, r2
 8009064:	ec5b ab10 	vmov	sl, fp, d0
 8009068:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800906c:	2b00      	cmp	r3, #0
 800906e:	bfce      	itee	gt
 8009070:	462a      	movgt	r2, r5
 8009072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009076:	465a      	movle	r2, fp
 8009078:	462f      	mov	r7, r5
 800907a:	46d9      	mov	r9, fp
 800907c:	bfcc      	ite	gt
 800907e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009082:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009086:	464b      	mov	r3, r9
 8009088:	4652      	mov	r2, sl
 800908a:	4620      	mov	r0, r4
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 fbdd 	bl	800084c <__aeabi_ddiv>
 8009092:	ec41 0b10 	vmov	d0, r0, r1
 8009096:	b005      	add	sp, #20
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800909c <__copybits>:
 800909c:	3901      	subs	r1, #1
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	1149      	asrs	r1, r1, #5
 80090a2:	6914      	ldr	r4, [r2, #16]
 80090a4:	3101      	adds	r1, #1
 80090a6:	f102 0314 	add.w	r3, r2, #20
 80090aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090b2:	1f05      	subs	r5, r0, #4
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d30c      	bcc.n	80090d2 <__copybits+0x36>
 80090b8:	1aa3      	subs	r3, r4, r2
 80090ba:	3b11      	subs	r3, #17
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3211      	adds	r2, #17
 80090c2:	42a2      	cmp	r2, r4
 80090c4:	bf88      	it	hi
 80090c6:	2300      	movhi	r3, #0
 80090c8:	4418      	add	r0, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	4288      	cmp	r0, r1
 80090ce:	d305      	bcc.n	80090dc <__copybits+0x40>
 80090d0:	bd70      	pop	{r4, r5, r6, pc}
 80090d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090da:	e7eb      	b.n	80090b4 <__copybits+0x18>
 80090dc:	f840 3b04 	str.w	r3, [r0], #4
 80090e0:	e7f4      	b.n	80090cc <__copybits+0x30>

080090e2 <__any_on>:
 80090e2:	f100 0214 	add.w	r2, r0, #20
 80090e6:	6900      	ldr	r0, [r0, #16]
 80090e8:	114b      	asrs	r3, r1, #5
 80090ea:	4298      	cmp	r0, r3
 80090ec:	b510      	push	{r4, lr}
 80090ee:	db11      	blt.n	8009114 <__any_on+0x32>
 80090f0:	dd0a      	ble.n	8009108 <__any_on+0x26>
 80090f2:	f011 011f 	ands.w	r1, r1, #31
 80090f6:	d007      	beq.n	8009108 <__any_on+0x26>
 80090f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090fc:	fa24 f001 	lsr.w	r0, r4, r1
 8009100:	fa00 f101 	lsl.w	r1, r0, r1
 8009104:	428c      	cmp	r4, r1
 8009106:	d10b      	bne.n	8009120 <__any_on+0x3e>
 8009108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800910c:	4293      	cmp	r3, r2
 800910e:	d803      	bhi.n	8009118 <__any_on+0x36>
 8009110:	2000      	movs	r0, #0
 8009112:	bd10      	pop	{r4, pc}
 8009114:	4603      	mov	r3, r0
 8009116:	e7f7      	b.n	8009108 <__any_on+0x26>
 8009118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800911c:	2900      	cmp	r1, #0
 800911e:	d0f5      	beq.n	800910c <__any_on+0x2a>
 8009120:	2001      	movs	r0, #1
 8009122:	e7f6      	b.n	8009112 <__any_on+0x30>

08009124 <__sread>:
 8009124:	b510      	push	{r4, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	f000 f8b4 	bl	8009298 <_read_r>
 8009130:	2800      	cmp	r0, #0
 8009132:	bfab      	itete	ge
 8009134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009136:	89a3      	ldrhlt	r3, [r4, #12]
 8009138:	181b      	addge	r3, r3, r0
 800913a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800913e:	bfac      	ite	ge
 8009140:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009142:	81a3      	strhlt	r3, [r4, #12]
 8009144:	bd10      	pop	{r4, pc}

08009146 <__swrite>:
 8009146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	461f      	mov	r7, r3
 800914c:	898b      	ldrh	r3, [r1, #12]
 800914e:	05db      	lsls	r3, r3, #23
 8009150:	4605      	mov	r5, r0
 8009152:	460c      	mov	r4, r1
 8009154:	4616      	mov	r6, r2
 8009156:	d505      	bpl.n	8009164 <__swrite+0x1e>
 8009158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915c:	2302      	movs	r3, #2
 800915e:	2200      	movs	r2, #0
 8009160:	f000 f888 	bl	8009274 <_lseek_r>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	4632      	mov	r2, r6
 8009172:	463b      	mov	r3, r7
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917a:	f000 b8af 	b.w	80092dc <_write_r>

0800917e <__sseek>:
 800917e:	b510      	push	{r4, lr}
 8009180:	460c      	mov	r4, r1
 8009182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009186:	f000 f875 	bl	8009274 <_lseek_r>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	bf15      	itete	ne
 8009190:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800919a:	81a3      	strheq	r3, [r4, #12]
 800919c:	bf18      	it	ne
 800919e:	81a3      	strhne	r3, [r4, #12]
 80091a0:	bd10      	pop	{r4, pc}

080091a2 <__sclose>:
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f000 b855 	b.w	8009254 <_close_r>

080091aa <_realloc_r>:
 80091aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	4680      	mov	r8, r0
 80091b0:	4615      	mov	r5, r2
 80091b2:	460c      	mov	r4, r1
 80091b4:	b921      	cbnz	r1, 80091c0 <_realloc_r+0x16>
 80091b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	4611      	mov	r1, r2
 80091bc:	f7ff b9b6 	b.w	800852c <_malloc_r>
 80091c0:	b92a      	cbnz	r2, 80091ce <_realloc_r+0x24>
 80091c2:	f000 f8cf 	bl	8009364 <_free_r>
 80091c6:	2400      	movs	r4, #0
 80091c8:	4620      	mov	r0, r4
 80091ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ce:	f000 f913 	bl	80093f8 <_malloc_usable_size_r>
 80091d2:	4285      	cmp	r5, r0
 80091d4:	4606      	mov	r6, r0
 80091d6:	d802      	bhi.n	80091de <_realloc_r+0x34>
 80091d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091dc:	d8f4      	bhi.n	80091c8 <_realloc_r+0x1e>
 80091de:	4629      	mov	r1, r5
 80091e0:	4640      	mov	r0, r8
 80091e2:	f7ff f9a3 	bl	800852c <_malloc_r>
 80091e6:	4607      	mov	r7, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0ec      	beq.n	80091c6 <_realloc_r+0x1c>
 80091ec:	42b5      	cmp	r5, r6
 80091ee:	462a      	mov	r2, r5
 80091f0:	4621      	mov	r1, r4
 80091f2:	bf28      	it	cs
 80091f4:	4632      	movcs	r2, r6
 80091f6:	f7fd fe72 	bl	8006ede <memcpy>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4640      	mov	r0, r8
 80091fe:	f000 f8b1 	bl	8009364 <_free_r>
 8009202:	463c      	mov	r4, r7
 8009204:	e7e0      	b.n	80091c8 <_realloc_r+0x1e>

08009206 <__ascii_wctomb>:
 8009206:	4603      	mov	r3, r0
 8009208:	4608      	mov	r0, r1
 800920a:	b141      	cbz	r1, 800921e <__ascii_wctomb+0x18>
 800920c:	2aff      	cmp	r2, #255	@ 0xff
 800920e:	d904      	bls.n	800921a <__ascii_wctomb+0x14>
 8009210:	228a      	movs	r2, #138	@ 0x8a
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009218:	4770      	bx	lr
 800921a:	700a      	strb	r2, [r1, #0]
 800921c:	2001      	movs	r0, #1
 800921e:	4770      	bx	lr

08009220 <memmove>:
 8009220:	4288      	cmp	r0, r1
 8009222:	b510      	push	{r4, lr}
 8009224:	eb01 0402 	add.w	r4, r1, r2
 8009228:	d902      	bls.n	8009230 <memmove+0x10>
 800922a:	4284      	cmp	r4, r0
 800922c:	4623      	mov	r3, r4
 800922e:	d807      	bhi.n	8009240 <memmove+0x20>
 8009230:	1e43      	subs	r3, r0, #1
 8009232:	42a1      	cmp	r1, r4
 8009234:	d008      	beq.n	8009248 <memmove+0x28>
 8009236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800923a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800923e:	e7f8      	b.n	8009232 <memmove+0x12>
 8009240:	4402      	add	r2, r0
 8009242:	4601      	mov	r1, r0
 8009244:	428a      	cmp	r2, r1
 8009246:	d100      	bne.n	800924a <memmove+0x2a>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800924e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009252:	e7f7      	b.n	8009244 <memmove+0x24>

08009254 <_close_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d06      	ldr	r5, [pc, #24]	@ (8009270 <_close_r+0x1c>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7f8 fcae 	bl	8001bc0 <_close>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_close_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_close_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	200004a4 	.word	0x200004a4

08009274 <_lseek_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	@ (8009294 <_lseek_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f8 fcc3 	bl	8001c0e <_lseek>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_lseek_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_lseek_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	200004a4 	.word	0x200004a4

08009298 <_read_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	@ (80092b8 <_read_r+0x20>)
 800929c:	4604      	mov	r4, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7f8 fc6d 	bl	8001b86 <_read>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_read_r+0x1e>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_read_r+0x1e>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	200004a4 	.word	0x200004a4

080092bc <_sbrk_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	@ (80092d8 <_sbrk_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f8 fcae 	bl	8001c28 <_sbrk>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_sbrk_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_sbrk_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200004a4 	.word	0x200004a4

080092dc <_write_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d07      	ldr	r5, [pc, #28]	@ (80092fc <_write_r+0x20>)
 80092e0:	4604      	mov	r4, r0
 80092e2:	4608      	mov	r0, r1
 80092e4:	4611      	mov	r1, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f7f8 f97e 	bl	80015ec <_write>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_write_r+0x1e>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_write_r+0x1e>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200004a4 	.word	0x200004a4

08009300 <__assert_func>:
 8009300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009302:	4614      	mov	r4, r2
 8009304:	461a      	mov	r2, r3
 8009306:	4b09      	ldr	r3, [pc, #36]	@ (800932c <__assert_func+0x2c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4605      	mov	r5, r0
 800930c:	68d8      	ldr	r0, [r3, #12]
 800930e:	b954      	cbnz	r4, 8009326 <__assert_func+0x26>
 8009310:	4b07      	ldr	r3, [pc, #28]	@ (8009330 <__assert_func+0x30>)
 8009312:	461c      	mov	r4, r3
 8009314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009318:	9100      	str	r1, [sp, #0]
 800931a:	462b      	mov	r3, r5
 800931c:	4905      	ldr	r1, [pc, #20]	@ (8009334 <__assert_func+0x34>)
 800931e:	f000 f873 	bl	8009408 <fiprintf>
 8009322:	f000 f883 	bl	800942c <abort>
 8009326:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <__assert_func+0x38>)
 8009328:	e7f4      	b.n	8009314 <__assert_func+0x14>
 800932a:	bf00      	nop
 800932c:	20000184 	.word	0x20000184
 8009330:	08009ddb 	.word	0x08009ddb
 8009334:	08009dad 	.word	0x08009dad
 8009338:	08009da0 	.word	0x08009da0

0800933c <_calloc_r>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	fba1 5402 	umull	r5, r4, r1, r2
 8009342:	b93c      	cbnz	r4, 8009354 <_calloc_r+0x18>
 8009344:	4629      	mov	r1, r5
 8009346:	f7ff f8f1 	bl	800852c <_malloc_r>
 800934a:	4606      	mov	r6, r0
 800934c:	b928      	cbnz	r0, 800935a <_calloc_r+0x1e>
 800934e:	2600      	movs	r6, #0
 8009350:	4630      	mov	r0, r6
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	220c      	movs	r2, #12
 8009356:	6002      	str	r2, [r0, #0]
 8009358:	e7f9      	b.n	800934e <_calloc_r+0x12>
 800935a:	462a      	mov	r2, r5
 800935c:	4621      	mov	r1, r4
 800935e:	f7fd fd85 	bl	8006e6c <memset>
 8009362:	e7f5      	b.n	8009350 <_calloc_r+0x14>

08009364 <_free_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4605      	mov	r5, r0
 8009368:	2900      	cmp	r1, #0
 800936a:	d041      	beq.n	80093f0 <_free_r+0x8c>
 800936c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009370:	1f0c      	subs	r4, r1, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfb8      	it	lt
 8009376:	18e4      	addlt	r4, r4, r3
 8009378:	f7ff fa16 	bl	80087a8 <__malloc_lock>
 800937c:	4a1d      	ldr	r2, [pc, #116]	@ (80093f4 <_free_r+0x90>)
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	b933      	cbnz	r3, 8009390 <_free_r+0x2c>
 8009382:	6063      	str	r3, [r4, #4]
 8009384:	6014      	str	r4, [r2, #0]
 8009386:	4628      	mov	r0, r5
 8009388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938c:	f7ff ba12 	b.w	80087b4 <__malloc_unlock>
 8009390:	42a3      	cmp	r3, r4
 8009392:	d908      	bls.n	80093a6 <_free_r+0x42>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	1821      	adds	r1, r4, r0
 8009398:	428b      	cmp	r3, r1
 800939a:	bf01      	itttt	eq
 800939c:	6819      	ldreq	r1, [r3, #0]
 800939e:	685b      	ldreq	r3, [r3, #4]
 80093a0:	1809      	addeq	r1, r1, r0
 80093a2:	6021      	streq	r1, [r4, #0]
 80093a4:	e7ed      	b.n	8009382 <_free_r+0x1e>
 80093a6:	461a      	mov	r2, r3
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	b10b      	cbz	r3, 80093b0 <_free_r+0x4c>
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d9fa      	bls.n	80093a6 <_free_r+0x42>
 80093b0:	6811      	ldr	r1, [r2, #0]
 80093b2:	1850      	adds	r0, r2, r1
 80093b4:	42a0      	cmp	r0, r4
 80093b6:	d10b      	bne.n	80093d0 <_free_r+0x6c>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	4401      	add	r1, r0
 80093bc:	1850      	adds	r0, r2, r1
 80093be:	4283      	cmp	r3, r0
 80093c0:	6011      	str	r1, [r2, #0]
 80093c2:	d1e0      	bne.n	8009386 <_free_r+0x22>
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	6053      	str	r3, [r2, #4]
 80093ca:	4408      	add	r0, r1
 80093cc:	6010      	str	r0, [r2, #0]
 80093ce:	e7da      	b.n	8009386 <_free_r+0x22>
 80093d0:	d902      	bls.n	80093d8 <_free_r+0x74>
 80093d2:	230c      	movs	r3, #12
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	e7d6      	b.n	8009386 <_free_r+0x22>
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	1821      	adds	r1, r4, r0
 80093dc:	428b      	cmp	r3, r1
 80093de:	bf04      	itt	eq
 80093e0:	6819      	ldreq	r1, [r3, #0]
 80093e2:	685b      	ldreq	r3, [r3, #4]
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	bf04      	itt	eq
 80093e8:	1809      	addeq	r1, r1, r0
 80093ea:	6021      	streq	r1, [r4, #0]
 80093ec:	6054      	str	r4, [r2, #4]
 80093ee:	e7ca      	b.n	8009386 <_free_r+0x22>
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	bf00      	nop
 80093f4:	200004a0 	.word	0x200004a0

080093f8 <_malloc_usable_size_r>:
 80093f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fc:	1f18      	subs	r0, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfbc      	itt	lt
 8009402:	580b      	ldrlt	r3, [r1, r0]
 8009404:	18c0      	addlt	r0, r0, r3
 8009406:	4770      	bx	lr

08009408 <fiprintf>:
 8009408:	b40e      	push	{r1, r2, r3}
 800940a:	b503      	push	{r0, r1, lr}
 800940c:	4601      	mov	r1, r0
 800940e:	ab03      	add	r3, sp, #12
 8009410:	4805      	ldr	r0, [pc, #20]	@ (8009428 <fiprintf+0x20>)
 8009412:	f853 2b04 	ldr.w	r2, [r3], #4
 8009416:	6800      	ldr	r0, [r0, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f000 f837 	bl	800948c <_vfiprintf_r>
 800941e:	b002      	add	sp, #8
 8009420:	f85d eb04 	ldr.w	lr, [sp], #4
 8009424:	b003      	add	sp, #12
 8009426:	4770      	bx	lr
 8009428:	20000184 	.word	0x20000184

0800942c <abort>:
 800942c:	b508      	push	{r3, lr}
 800942e:	2006      	movs	r0, #6
 8009430:	f000 fa84 	bl	800993c <raise>
 8009434:	2001      	movs	r0, #1
 8009436:	f7f8 fb9b 	bl	8001b70 <_exit>

0800943a <__sfputc_r>:
 800943a:	6893      	ldr	r3, [r2, #8]
 800943c:	3b01      	subs	r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	b410      	push	{r4}
 8009442:	6093      	str	r3, [r2, #8]
 8009444:	da08      	bge.n	8009458 <__sfputc_r+0x1e>
 8009446:	6994      	ldr	r4, [r2, #24]
 8009448:	42a3      	cmp	r3, r4
 800944a:	db01      	blt.n	8009450 <__sfputc_r+0x16>
 800944c:	290a      	cmp	r1, #10
 800944e:	d103      	bne.n	8009458 <__sfputc_r+0x1e>
 8009450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009454:	f000 b932 	b.w	80096bc <__swbuf_r>
 8009458:	6813      	ldr	r3, [r2, #0]
 800945a:	1c58      	adds	r0, r3, #1
 800945c:	6010      	str	r0, [r2, #0]
 800945e:	7019      	strb	r1, [r3, #0]
 8009460:	4608      	mov	r0, r1
 8009462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009466:	4770      	bx	lr

08009468 <__sfputs_r>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	4614      	mov	r4, r2
 8009470:	18d5      	adds	r5, r2, r3
 8009472:	42ac      	cmp	r4, r5
 8009474:	d101      	bne.n	800947a <__sfputs_r+0x12>
 8009476:	2000      	movs	r0, #0
 8009478:	e007      	b.n	800948a <__sfputs_r+0x22>
 800947a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800947e:	463a      	mov	r2, r7
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff ffda 	bl	800943a <__sfputc_r>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d1f3      	bne.n	8009472 <__sfputs_r+0xa>
 800948a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800948c <_vfiprintf_r>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	460d      	mov	r5, r1
 8009492:	b09d      	sub	sp, #116	@ 0x74
 8009494:	4614      	mov	r4, r2
 8009496:	4698      	mov	r8, r3
 8009498:	4606      	mov	r6, r0
 800949a:	b118      	cbz	r0, 80094a4 <_vfiprintf_r+0x18>
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b90b      	cbnz	r3, 80094a4 <_vfiprintf_r+0x18>
 80094a0:	f7fc fe16 	bl	80060d0 <__sinit>
 80094a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_vfiprintf_r+0x2a>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_vfiprintf_r+0x2a>
 80094b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b2:	f7fd fd12 	bl	8006eda <__retarget_lock_acquire_recursive>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	071b      	lsls	r3, r3, #28
 80094ba:	d501      	bpl.n	80094c0 <_vfiprintf_r+0x34>
 80094bc:	692b      	ldr	r3, [r5, #16]
 80094be:	b99b      	cbnz	r3, 80094e8 <_vfiprintf_r+0x5c>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 f938 	bl	8009738 <__swsetup_r>
 80094c8:	b170      	cbz	r0, 80094e8 <_vfiprintf_r+0x5c>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094cc:	07dc      	lsls	r4, r3, #31
 80094ce:	d504      	bpl.n	80094da <_vfiprintf_r+0x4e>
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094d4:	b01d      	add	sp, #116	@ 0x74
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	0598      	lsls	r0, r3, #22
 80094de:	d4f7      	bmi.n	80094d0 <_vfiprintf_r+0x44>
 80094e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094e2:	f7fd fcfb 	bl	8006edc <__retarget_lock_release_recursive>
 80094e6:	e7f3      	b.n	80094d0 <_vfiprintf_r+0x44>
 80094e8:	2300      	movs	r3, #0
 80094ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ec:	2320      	movs	r3, #32
 80094ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094f6:	2330      	movs	r3, #48	@ 0x30
 80094f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096a8 <_vfiprintf_r+0x21c>
 80094fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009500:	f04f 0901 	mov.w	r9, #1
 8009504:	4623      	mov	r3, r4
 8009506:	469a      	mov	sl, r3
 8009508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800950c:	b10a      	cbz	r2, 8009512 <_vfiprintf_r+0x86>
 800950e:	2a25      	cmp	r2, #37	@ 0x25
 8009510:	d1f9      	bne.n	8009506 <_vfiprintf_r+0x7a>
 8009512:	ebba 0b04 	subs.w	fp, sl, r4
 8009516:	d00b      	beq.n	8009530 <_vfiprintf_r+0xa4>
 8009518:	465b      	mov	r3, fp
 800951a:	4622      	mov	r2, r4
 800951c:	4629      	mov	r1, r5
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ffa2 	bl	8009468 <__sfputs_r>
 8009524:	3001      	adds	r0, #1
 8009526:	f000 80a7 	beq.w	8009678 <_vfiprintf_r+0x1ec>
 800952a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800952c:	445a      	add	r2, fp
 800952e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009530:	f89a 3000 	ldrb.w	r3, [sl]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 809f 	beq.w	8009678 <_vfiprintf_r+0x1ec>
 800953a:	2300      	movs	r3, #0
 800953c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009544:	f10a 0a01 	add.w	sl, sl, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009550:	931a      	str	r3, [sp, #104]	@ 0x68
 8009552:	4654      	mov	r4, sl
 8009554:	2205      	movs	r2, #5
 8009556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955a:	4853      	ldr	r0, [pc, #332]	@ (80096a8 <_vfiprintf_r+0x21c>)
 800955c:	f7f6 fe38 	bl	80001d0 <memchr>
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	b9d8      	cbnz	r0, 800959c <_vfiprintf_r+0x110>
 8009564:	06d1      	lsls	r1, r2, #27
 8009566:	bf44      	itt	mi
 8009568:	2320      	movmi	r3, #32
 800956a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800956e:	0713      	lsls	r3, r2, #28
 8009570:	bf44      	itt	mi
 8009572:	232b      	movmi	r3, #43	@ 0x2b
 8009574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009578:	f89a 3000 	ldrb.w	r3, [sl]
 800957c:	2b2a      	cmp	r3, #42	@ 0x2a
 800957e:	d015      	beq.n	80095ac <_vfiprintf_r+0x120>
 8009580:	9a07      	ldr	r2, [sp, #28]
 8009582:	4654      	mov	r4, sl
 8009584:	2000      	movs	r0, #0
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4621      	mov	r1, r4
 800958c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009590:	3b30      	subs	r3, #48	@ 0x30
 8009592:	2b09      	cmp	r3, #9
 8009594:	d94b      	bls.n	800962e <_vfiprintf_r+0x1a2>
 8009596:	b1b0      	cbz	r0, 80095c6 <_vfiprintf_r+0x13a>
 8009598:	9207      	str	r2, [sp, #28]
 800959a:	e014      	b.n	80095c6 <_vfiprintf_r+0x13a>
 800959c:	eba0 0308 	sub.w	r3, r0, r8
 80095a0:	fa09 f303 	lsl.w	r3, r9, r3
 80095a4:	4313      	orrs	r3, r2
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	46a2      	mov	sl, r4
 80095aa:	e7d2      	b.n	8009552 <_vfiprintf_r+0xc6>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	1d19      	adds	r1, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	9103      	str	r1, [sp, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfbb      	ittet	lt
 80095b8:	425b      	neglt	r3, r3
 80095ba:	f042 0202 	orrlt.w	r2, r2, #2
 80095be:	9307      	strge	r3, [sp, #28]
 80095c0:	9307      	strlt	r3, [sp, #28]
 80095c2:	bfb8      	it	lt
 80095c4:	9204      	strlt	r2, [sp, #16]
 80095c6:	7823      	ldrb	r3, [r4, #0]
 80095c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80095ca:	d10a      	bne.n	80095e2 <_vfiprintf_r+0x156>
 80095cc:	7863      	ldrb	r3, [r4, #1]
 80095ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80095d0:	d132      	bne.n	8009638 <_vfiprintf_r+0x1ac>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9203      	str	r2, [sp, #12]
 80095da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095de:	3402      	adds	r4, #2
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096b8 <_vfiprintf_r+0x22c>
 80095e6:	7821      	ldrb	r1, [r4, #0]
 80095e8:	2203      	movs	r2, #3
 80095ea:	4650      	mov	r0, sl
 80095ec:	f7f6 fdf0 	bl	80001d0 <memchr>
 80095f0:	b138      	cbz	r0, 8009602 <_vfiprintf_r+0x176>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	eba0 000a 	sub.w	r0, r0, sl
 80095f8:	2240      	movs	r2, #64	@ 0x40
 80095fa:	4082      	lsls	r2, r0
 80095fc:	4313      	orrs	r3, r2
 80095fe:	3401      	adds	r4, #1
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009606:	4829      	ldr	r0, [pc, #164]	@ (80096ac <_vfiprintf_r+0x220>)
 8009608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800960c:	2206      	movs	r2, #6
 800960e:	f7f6 fddf 	bl	80001d0 <memchr>
 8009612:	2800      	cmp	r0, #0
 8009614:	d03f      	beq.n	8009696 <_vfiprintf_r+0x20a>
 8009616:	4b26      	ldr	r3, [pc, #152]	@ (80096b0 <_vfiprintf_r+0x224>)
 8009618:	bb1b      	cbnz	r3, 8009662 <_vfiprintf_r+0x1d6>
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	3307      	adds	r3, #7
 800961e:	f023 0307 	bic.w	r3, r3, #7
 8009622:	3308      	adds	r3, #8
 8009624:	9303      	str	r3, [sp, #12]
 8009626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009628:	443b      	add	r3, r7
 800962a:	9309      	str	r3, [sp, #36]	@ 0x24
 800962c:	e76a      	b.n	8009504 <_vfiprintf_r+0x78>
 800962e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009632:	460c      	mov	r4, r1
 8009634:	2001      	movs	r0, #1
 8009636:	e7a8      	b.n	800958a <_vfiprintf_r+0xfe>
 8009638:	2300      	movs	r3, #0
 800963a:	3401      	adds	r4, #1
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	4619      	mov	r1, r3
 8009640:	f04f 0c0a 	mov.w	ip, #10
 8009644:	4620      	mov	r0, r4
 8009646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800964a:	3a30      	subs	r2, #48	@ 0x30
 800964c:	2a09      	cmp	r2, #9
 800964e:	d903      	bls.n	8009658 <_vfiprintf_r+0x1cc>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0c6      	beq.n	80095e2 <_vfiprintf_r+0x156>
 8009654:	9105      	str	r1, [sp, #20]
 8009656:	e7c4      	b.n	80095e2 <_vfiprintf_r+0x156>
 8009658:	fb0c 2101 	mla	r1, ip, r1, r2
 800965c:	4604      	mov	r4, r0
 800965e:	2301      	movs	r3, #1
 8009660:	e7f0      	b.n	8009644 <_vfiprintf_r+0x1b8>
 8009662:	ab03      	add	r3, sp, #12
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462a      	mov	r2, r5
 8009668:	4b12      	ldr	r3, [pc, #72]	@ (80096b4 <_vfiprintf_r+0x228>)
 800966a:	a904      	add	r1, sp, #16
 800966c:	4630      	mov	r0, r6
 800966e:	f7fb feb7 	bl	80053e0 <_printf_float>
 8009672:	4607      	mov	r7, r0
 8009674:	1c78      	adds	r0, r7, #1
 8009676:	d1d6      	bne.n	8009626 <_vfiprintf_r+0x19a>
 8009678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800967a:	07d9      	lsls	r1, r3, #31
 800967c:	d405      	bmi.n	800968a <_vfiprintf_r+0x1fe>
 800967e:	89ab      	ldrh	r3, [r5, #12]
 8009680:	059a      	lsls	r2, r3, #22
 8009682:	d402      	bmi.n	800968a <_vfiprintf_r+0x1fe>
 8009684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009686:	f7fd fc29 	bl	8006edc <__retarget_lock_release_recursive>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	065b      	lsls	r3, r3, #25
 800968e:	f53f af1f 	bmi.w	80094d0 <_vfiprintf_r+0x44>
 8009692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009694:	e71e      	b.n	80094d4 <_vfiprintf_r+0x48>
 8009696:	ab03      	add	r3, sp, #12
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	462a      	mov	r2, r5
 800969c:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <_vfiprintf_r+0x228>)
 800969e:	a904      	add	r1, sp, #16
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7fc f935 	bl	8005910 <_printf_i>
 80096a6:	e7e4      	b.n	8009672 <_vfiprintf_r+0x1e6>
 80096a8:	08009c36 	.word	0x08009c36
 80096ac:	08009c40 	.word	0x08009c40
 80096b0:	080053e1 	.word	0x080053e1
 80096b4:	08009469 	.word	0x08009469
 80096b8:	08009c3c 	.word	0x08009c3c

080096bc <__swbuf_r>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	460e      	mov	r6, r1
 80096c0:	4614      	mov	r4, r2
 80096c2:	4605      	mov	r5, r0
 80096c4:	b118      	cbz	r0, 80096ce <__swbuf_r+0x12>
 80096c6:	6a03      	ldr	r3, [r0, #32]
 80096c8:	b90b      	cbnz	r3, 80096ce <__swbuf_r+0x12>
 80096ca:	f7fc fd01 	bl	80060d0 <__sinit>
 80096ce:	69a3      	ldr	r3, [r4, #24]
 80096d0:	60a3      	str	r3, [r4, #8]
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	071a      	lsls	r2, r3, #28
 80096d6:	d501      	bpl.n	80096dc <__swbuf_r+0x20>
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	b943      	cbnz	r3, 80096ee <__swbuf_r+0x32>
 80096dc:	4621      	mov	r1, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f82a 	bl	8009738 <__swsetup_r>
 80096e4:	b118      	cbz	r0, 80096ee <__swbuf_r+0x32>
 80096e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80096ea:	4638      	mov	r0, r7
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	1a98      	subs	r0, r3, r2
 80096f4:	6963      	ldr	r3, [r4, #20]
 80096f6:	b2f6      	uxtb	r6, r6
 80096f8:	4283      	cmp	r3, r0
 80096fa:	4637      	mov	r7, r6
 80096fc:	dc05      	bgt.n	800970a <__swbuf_r+0x4e>
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f7ff f829 	bl	8008758 <_fflush_r>
 8009706:	2800      	cmp	r0, #0
 8009708:	d1ed      	bne.n	80096e6 <__swbuf_r+0x2a>
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	701e      	strb	r6, [r3, #0]
 8009718:	6962      	ldr	r2, [r4, #20]
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	429a      	cmp	r2, r3
 800971e:	d004      	beq.n	800972a <__swbuf_r+0x6e>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	07db      	lsls	r3, r3, #31
 8009724:	d5e1      	bpl.n	80096ea <__swbuf_r+0x2e>
 8009726:	2e0a      	cmp	r6, #10
 8009728:	d1df      	bne.n	80096ea <__swbuf_r+0x2e>
 800972a:	4621      	mov	r1, r4
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff f813 	bl	8008758 <_fflush_r>
 8009732:	2800      	cmp	r0, #0
 8009734:	d0d9      	beq.n	80096ea <__swbuf_r+0x2e>
 8009736:	e7d6      	b.n	80096e6 <__swbuf_r+0x2a>

08009738 <__swsetup_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4b29      	ldr	r3, [pc, #164]	@ (80097e0 <__swsetup_r+0xa8>)
 800973c:	4605      	mov	r5, r0
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	460c      	mov	r4, r1
 8009742:	b118      	cbz	r0, 800974c <__swsetup_r+0x14>
 8009744:	6a03      	ldr	r3, [r0, #32]
 8009746:	b90b      	cbnz	r3, 800974c <__swsetup_r+0x14>
 8009748:	f7fc fcc2 	bl	80060d0 <__sinit>
 800974c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009750:	0719      	lsls	r1, r3, #28
 8009752:	d422      	bmi.n	800979a <__swsetup_r+0x62>
 8009754:	06da      	lsls	r2, r3, #27
 8009756:	d407      	bmi.n	8009768 <__swsetup_r+0x30>
 8009758:	2209      	movs	r2, #9
 800975a:	602a      	str	r2, [r5, #0]
 800975c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009766:	e033      	b.n	80097d0 <__swsetup_r+0x98>
 8009768:	0758      	lsls	r0, r3, #29
 800976a:	d512      	bpl.n	8009792 <__swsetup_r+0x5a>
 800976c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800976e:	b141      	cbz	r1, 8009782 <__swsetup_r+0x4a>
 8009770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009774:	4299      	cmp	r1, r3
 8009776:	d002      	beq.n	800977e <__swsetup_r+0x46>
 8009778:	4628      	mov	r0, r5
 800977a:	f7ff fdf3 	bl	8009364 <_free_r>
 800977e:	2300      	movs	r3, #0
 8009780:	6363      	str	r3, [r4, #52]	@ 0x34
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	2300      	movs	r3, #0
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f043 0308 	orr.w	r3, r3, #8
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	b94b      	cbnz	r3, 80097b2 <__swsetup_r+0x7a>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a8:	d003      	beq.n	80097b2 <__swsetup_r+0x7a>
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f83f 	bl	8009830 <__smakebuf_r>
 80097b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b6:	f013 0201 	ands.w	r2, r3, #1
 80097ba:	d00a      	beq.n	80097d2 <__swsetup_r+0x9a>
 80097bc:	2200      	movs	r2, #0
 80097be:	60a2      	str	r2, [r4, #8]
 80097c0:	6962      	ldr	r2, [r4, #20]
 80097c2:	4252      	negs	r2, r2
 80097c4:	61a2      	str	r2, [r4, #24]
 80097c6:	6922      	ldr	r2, [r4, #16]
 80097c8:	b942      	cbnz	r2, 80097dc <__swsetup_r+0xa4>
 80097ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097ce:	d1c5      	bne.n	800975c <__swsetup_r+0x24>
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	0799      	lsls	r1, r3, #30
 80097d4:	bf58      	it	pl
 80097d6:	6962      	ldrpl	r2, [r4, #20]
 80097d8:	60a2      	str	r2, [r4, #8]
 80097da:	e7f4      	b.n	80097c6 <__swsetup_r+0x8e>
 80097dc:	2000      	movs	r0, #0
 80097de:	e7f7      	b.n	80097d0 <__swsetup_r+0x98>
 80097e0:	20000184 	.word	0x20000184

080097e4 <__swhatbuf_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	460c      	mov	r4, r1
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	b096      	sub	sp, #88	@ 0x58
 80097f0:	4615      	mov	r5, r2
 80097f2:	461e      	mov	r6, r3
 80097f4:	da0d      	bge.n	8009812 <__swhatbuf_r+0x2e>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097fc:	f04f 0100 	mov.w	r1, #0
 8009800:	bf14      	ite	ne
 8009802:	2340      	movne	r3, #64	@ 0x40
 8009804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009808:	2000      	movs	r0, #0
 800980a:	6031      	str	r1, [r6, #0]
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	b016      	add	sp, #88	@ 0x58
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	466a      	mov	r2, sp
 8009814:	f000 f848 	bl	80098a8 <_fstat_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	dbec      	blt.n	80097f6 <__swhatbuf_r+0x12>
 800981c:	9901      	ldr	r1, [sp, #4]
 800981e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009826:	4259      	negs	r1, r3
 8009828:	4159      	adcs	r1, r3
 800982a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800982e:	e7eb      	b.n	8009808 <__swhatbuf_r+0x24>

08009830 <__smakebuf_r>:
 8009830:	898b      	ldrh	r3, [r1, #12]
 8009832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009834:	079d      	lsls	r5, r3, #30
 8009836:	4606      	mov	r6, r0
 8009838:	460c      	mov	r4, r1
 800983a:	d507      	bpl.n	800984c <__smakebuf_r+0x1c>
 800983c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	2301      	movs	r3, #1
 8009846:	6163      	str	r3, [r4, #20]
 8009848:	b003      	add	sp, #12
 800984a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984c:	ab01      	add	r3, sp, #4
 800984e:	466a      	mov	r2, sp
 8009850:	f7ff ffc8 	bl	80097e4 <__swhatbuf_r>
 8009854:	9f00      	ldr	r7, [sp, #0]
 8009856:	4605      	mov	r5, r0
 8009858:	4639      	mov	r1, r7
 800985a:	4630      	mov	r0, r6
 800985c:	f7fe fe66 	bl	800852c <_malloc_r>
 8009860:	b948      	cbnz	r0, 8009876 <__smakebuf_r+0x46>
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	059a      	lsls	r2, r3, #22
 8009868:	d4ee      	bmi.n	8009848 <__smakebuf_r+0x18>
 800986a:	f023 0303 	bic.w	r3, r3, #3
 800986e:	f043 0302 	orr.w	r3, r3, #2
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	e7e2      	b.n	800983c <__smakebuf_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	6020      	str	r0, [r4, #0]
 800987a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009886:	b15b      	cbz	r3, 80098a0 <__smakebuf_r+0x70>
 8009888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f81d 	bl	80098cc <_isatty_r>
 8009892:	b128      	cbz	r0, 80098a0 <__smakebuf_r+0x70>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f023 0303 	bic.w	r3, r3, #3
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	431d      	orrs	r5, r3
 80098a4:	81a5      	strh	r5, [r4, #12]
 80098a6:	e7cf      	b.n	8009848 <__smakebuf_r+0x18>

080098a8 <_fstat_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	@ (80098c8 <_fstat_r+0x20>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	f7f8 f98f 	bl	8001bd8 <_fstat>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_fstat_r+0x1c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_fstat_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	200004a4 	.word	0x200004a4

080098cc <_isatty_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d06      	ldr	r5, [pc, #24]	@ (80098e8 <_isatty_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f8 f98e 	bl	8001bf8 <_isatty>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_isatty_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_isatty_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200004a4 	.word	0x200004a4

080098ec <_raise_r>:
 80098ec:	291f      	cmp	r1, #31
 80098ee:	b538      	push	{r3, r4, r5, lr}
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	d904      	bls.n	8009900 <_raise_r+0x14>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009902:	b112      	cbz	r2, 800990a <_raise_r+0x1e>
 8009904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009908:	b94b      	cbnz	r3, 800991e <_raise_r+0x32>
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f830 	bl	8009970 <_getpid_r>
 8009910:	4622      	mov	r2, r4
 8009912:	4601      	mov	r1, r0
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	f000 b817 	b.w	800994c <_kill_r>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d00a      	beq.n	8009938 <_raise_r+0x4c>
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	d103      	bne.n	800992e <_raise_r+0x42>
 8009926:	2316      	movs	r3, #22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	2001      	movs	r0, #1
 800992c:	e7e7      	b.n	80098fe <_raise_r+0x12>
 800992e:	2100      	movs	r1, #0
 8009930:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009934:	4620      	mov	r0, r4
 8009936:	4798      	blx	r3
 8009938:	2000      	movs	r0, #0
 800993a:	e7e0      	b.n	80098fe <_raise_r+0x12>

0800993c <raise>:
 800993c:	4b02      	ldr	r3, [pc, #8]	@ (8009948 <raise+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f7ff bfd3 	b.w	80098ec <_raise_r>
 8009946:	bf00      	nop
 8009948:	20000184 	.word	0x20000184

0800994c <_kill_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	@ (800996c <_kill_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f8 f8f9 	bl	8001b50 <_kill>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_kill_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_kill_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	200004a4 	.word	0x200004a4

08009970 <_getpid_r>:
 8009970:	f7f8 b8e6 	b.w	8001b40 <_getpid>

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
